"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@peculiar";
exports.ids = ["vendor-chunks/@peculiar"];
exports.modules = {

/***/ "(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/convert.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/convert.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AsnConvert = void 0;\nconst asn1js = __webpack_require__(/*! asn1js */ \"(action-browser)/./node_modules/asn1js/build/index.js\");\nconst pvtsutils_1 = __webpack_require__(/*! pvtsutils */ \"(action-browser)/./node_modules/pvtsutils/build/index.js\");\nconst parser_1 = __webpack_require__(/*! ./parser */ \"(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/parser.js\");\nconst serializer_1 = __webpack_require__(/*! ./serializer */ \"(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/serializer.js\");\nclass AsnConvert {\n    static serialize(obj) {\n        return serializer_1.AsnSerializer.serialize(obj);\n    }\n    static parse(data, target) {\n        return parser_1.AsnParser.parse(data, target);\n    }\n    static toString(data) {\n        const buf = pvtsutils_1.BufferSourceConverter.isBufferSource(data) ? pvtsutils_1.BufferSourceConverter.toArrayBuffer(data) : AsnConvert.serialize(data);\n        const asn = asn1js.fromBER(buf);\n        if (asn.offset === -1) {\n            throw new Error(`Cannot decode ASN.1 data. ${asn.result.error}`);\n        }\n        return asn.result.toString();\n    }\n}\nexports.AsnConvert = AsnConvert;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGVjdWxpYXIvYXNuMS1zY2hlbWEvYnVpbGQvY2pzL2NvbnZlcnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGtCQUFrQixHQUFHLEtBQUs7QUFDMUIsTUFBTUcsU0FBU0MsbUJBQU9BLENBQUMscUVBQVE7QUFDL0IsTUFBTUMsY0FBY0QsbUJBQU9BLENBQUMsMkVBQVc7QUFDdkMsTUFBTUUsV0FBV0YsbUJBQU9BLENBQUMsMkZBQVU7QUFDbkMsTUFBTUcsZUFBZUgsbUJBQU9BLENBQUMsbUdBQWM7QUFDM0MsTUFBTUY7SUFDRixPQUFPTSxVQUFVQyxHQUFHLEVBQUU7UUFDbEIsT0FBT0YsYUFBYUcsYUFBYSxDQUFDRixTQUFTLENBQUNDO0lBQ2hEO0lBQ0EsT0FBT0UsTUFBTUMsSUFBSSxFQUFFQyxNQUFNLEVBQUU7UUFDdkIsT0FBT1AsU0FBU1EsU0FBUyxDQUFDSCxLQUFLLENBQUNDLE1BQU1DO0lBQzFDO0lBQ0EsT0FBT0UsU0FBU0gsSUFBSSxFQUFFO1FBQ2xCLE1BQU1JLE1BQU1YLFlBQVlZLHFCQUFxQixDQUFDQyxjQUFjLENBQUNOLFFBQ3ZEUCxZQUFZWSxxQkFBcUIsQ0FBQ0UsYUFBYSxDQUFDUCxRQUNoRFYsV0FBV00sU0FBUyxDQUFDSTtRQUMzQixNQUFNUSxNQUFNakIsT0FBT2tCLE9BQU8sQ0FBQ0w7UUFDM0IsSUFBSUksSUFBSUUsTUFBTSxLQUFLLENBQUMsR0FBRztZQUNuQixNQUFNLElBQUlDLE1BQU0sQ0FBQywwQkFBMEIsRUFBRUgsSUFBSUksTUFBTSxDQUFDQyxLQUFLLENBQUMsQ0FBQztRQUNuRTtRQUNBLE9BQU9MLElBQUlJLE1BQU0sQ0FBQ1QsUUFBUTtJQUM5QjtBQUNKO0FBQ0FmLGtCQUFrQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLW1ha2V0cGxhY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy9jb252ZXJ0LmpzPzA3ZDAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFzbkNvbnZlcnQgPSB2b2lkIDA7XG5jb25zdCBhc24xanMgPSByZXF1aXJlKFwiYXNuMWpzXCIpO1xuY29uc3QgcHZ0c3V0aWxzXzEgPSByZXF1aXJlKFwicHZ0c3V0aWxzXCIpO1xuY29uc3QgcGFyc2VyXzEgPSByZXF1aXJlKFwiLi9wYXJzZXJcIik7XG5jb25zdCBzZXJpYWxpemVyXzEgPSByZXF1aXJlKFwiLi9zZXJpYWxpemVyXCIpO1xuY2xhc3MgQXNuQ29udmVydCB7XG4gICAgc3RhdGljIHNlcmlhbGl6ZShvYmopIHtcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZXJfMS5Bc25TZXJpYWxpemVyLnNlcmlhbGl6ZShvYmopO1xuICAgIH1cbiAgICBzdGF0aWMgcGFyc2UoZGF0YSwgdGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiBwYXJzZXJfMS5Bc25QYXJzZXIucGFyc2UoZGF0YSwgdGFyZ2V0KTtcbiAgICB9XG4gICAgc3RhdGljIHRvU3RyaW5nKGRhdGEpIHtcbiAgICAgICAgY29uc3QgYnVmID0gcHZ0c3V0aWxzXzEuQnVmZmVyU291cmNlQ29udmVydGVyLmlzQnVmZmVyU291cmNlKGRhdGEpXG4gICAgICAgICAgICA/IHB2dHN1dGlsc18xLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci50b0FycmF5QnVmZmVyKGRhdGEpXG4gICAgICAgICAgICA6IEFzbkNvbnZlcnQuc2VyaWFsaXplKGRhdGEpO1xuICAgICAgICBjb25zdCBhc24gPSBhc24xanMuZnJvbUJFUihidWYpO1xuICAgICAgICBpZiAoYXNuLm9mZnNldCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGRlY29kZSBBU04uMSBkYXRhLiAke2Fzbi5yZXN1bHQuZXJyb3J9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFzbi5yZXN1bHQudG9TdHJpbmcoKTtcbiAgICB9XG59XG5leHBvcnRzLkFzbkNvbnZlcnQgPSBBc25Db252ZXJ0O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQXNuQ29udmVydCIsImFzbjFqcyIsInJlcXVpcmUiLCJwdnRzdXRpbHNfMSIsInBhcnNlcl8xIiwic2VyaWFsaXplcl8xIiwic2VyaWFsaXplIiwib2JqIiwiQXNuU2VyaWFsaXplciIsInBhcnNlIiwiZGF0YSIsInRhcmdldCIsIkFzblBhcnNlciIsInRvU3RyaW5nIiwiYnVmIiwiQnVmZmVyU291cmNlQ29udmVydGVyIiwiaXNCdWZmZXJTb3VyY2UiLCJ0b0FycmF5QnVmZmVyIiwiYXNuIiwiZnJvbUJFUiIsIm9mZnNldCIsIkVycm9yIiwicmVzdWx0IiwiZXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/convert.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/convert.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/convert.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AsnConvert = void 0;\nconst asn1js = __webpack_require__(/*! asn1js */ \"(rsc)/./node_modules/asn1js/build/index.js\");\nconst pvtsutils_1 = __webpack_require__(/*! pvtsutils */ \"(rsc)/./node_modules/pvtsutils/build/index.js\");\nconst parser_1 = __webpack_require__(/*! ./parser */ \"(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/parser.js\");\nconst serializer_1 = __webpack_require__(/*! ./serializer */ \"(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/serializer.js\");\nclass AsnConvert {\n    static serialize(obj) {\n        return serializer_1.AsnSerializer.serialize(obj);\n    }\n    static parse(data, target) {\n        return parser_1.AsnParser.parse(data, target);\n    }\n    static toString(data) {\n        const buf = pvtsutils_1.BufferSourceConverter.isBufferSource(data) ? pvtsutils_1.BufferSourceConverter.toArrayBuffer(data) : AsnConvert.serialize(data);\n        const asn = asn1js.fromBER(buf);\n        if (asn.offset === -1) {\n            throw new Error(`Cannot decode ASN.1 data. ${asn.result.error}`);\n        }\n        return asn.result.toString();\n    }\n}\nexports.AsnConvert = AsnConvert;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy9jb252ZXJ0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxrQkFBa0IsR0FBRyxLQUFLO0FBQzFCLE1BQU1HLFNBQVNDLG1CQUFPQSxDQUFDLDBEQUFRO0FBQy9CLE1BQU1DLGNBQWNELG1CQUFPQSxDQUFDLGdFQUFXO0FBQ3ZDLE1BQU1FLFdBQVdGLG1CQUFPQSxDQUFDLGdGQUFVO0FBQ25DLE1BQU1HLGVBQWVILG1CQUFPQSxDQUFDLHdGQUFjO0FBQzNDLE1BQU1GO0lBQ0YsT0FBT00sVUFBVUMsR0FBRyxFQUFFO1FBQ2xCLE9BQU9GLGFBQWFHLGFBQWEsQ0FBQ0YsU0FBUyxDQUFDQztJQUNoRDtJQUNBLE9BQU9FLE1BQU1DLElBQUksRUFBRUMsTUFBTSxFQUFFO1FBQ3ZCLE9BQU9QLFNBQVNRLFNBQVMsQ0FBQ0gsS0FBSyxDQUFDQyxNQUFNQztJQUMxQztJQUNBLE9BQU9FLFNBQVNILElBQUksRUFBRTtRQUNsQixNQUFNSSxNQUFNWCxZQUFZWSxxQkFBcUIsQ0FBQ0MsY0FBYyxDQUFDTixRQUN2RFAsWUFBWVkscUJBQXFCLENBQUNFLGFBQWEsQ0FBQ1AsUUFDaERWLFdBQVdNLFNBQVMsQ0FBQ0k7UUFDM0IsTUFBTVEsTUFBTWpCLE9BQU9rQixPQUFPLENBQUNMO1FBQzNCLElBQUlJLElBQUlFLE1BQU0sS0FBSyxDQUFDLEdBQUc7WUFDbkIsTUFBTSxJQUFJQyxNQUFNLENBQUMsMEJBQTBCLEVBQUVILElBQUlJLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDLENBQUM7UUFDbkU7UUFDQSxPQUFPTCxJQUFJSSxNQUFNLENBQUNULFFBQVE7SUFDOUI7QUFDSjtBQUNBZixrQkFBa0IsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1tYWtldHBsYWNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL0BwZWN1bGlhci9hc24xLXNjaGVtYS9idWlsZC9janMvY29udmVydC5qcz8wN2QwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Bc25Db252ZXJ0ID0gdm9pZCAwO1xuY29uc3QgYXNuMWpzID0gcmVxdWlyZShcImFzbjFqc1wiKTtcbmNvbnN0IHB2dHN1dGlsc18xID0gcmVxdWlyZShcInB2dHN1dGlsc1wiKTtcbmNvbnN0IHBhcnNlcl8xID0gcmVxdWlyZShcIi4vcGFyc2VyXCIpO1xuY29uc3Qgc2VyaWFsaXplcl8xID0gcmVxdWlyZShcIi4vc2VyaWFsaXplclwiKTtcbmNsYXNzIEFzbkNvbnZlcnQge1xuICAgIHN0YXRpYyBzZXJpYWxpemUob2JqKSB7XG4gICAgICAgIHJldHVybiBzZXJpYWxpemVyXzEuQXNuU2VyaWFsaXplci5zZXJpYWxpemUob2JqKTtcbiAgICB9XG4gICAgc3RhdGljIHBhcnNlKGRhdGEsIHRhcmdldCkge1xuICAgICAgICByZXR1cm4gcGFyc2VyXzEuQXNuUGFyc2VyLnBhcnNlKGRhdGEsIHRhcmdldCk7XG4gICAgfVxuICAgIHN0YXRpYyB0b1N0cmluZyhkYXRhKSB7XG4gICAgICAgIGNvbnN0IGJ1ZiA9IHB2dHN1dGlsc18xLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci5pc0J1ZmZlclNvdXJjZShkYXRhKVxuICAgICAgICAgICAgPyBwdnRzdXRpbHNfMS5CdWZmZXJTb3VyY2VDb252ZXJ0ZXIudG9BcnJheUJ1ZmZlcihkYXRhKVxuICAgICAgICAgICAgOiBBc25Db252ZXJ0LnNlcmlhbGl6ZShkYXRhKTtcbiAgICAgICAgY29uc3QgYXNuID0gYXNuMWpzLmZyb21CRVIoYnVmKTtcbiAgICAgICAgaWYgKGFzbi5vZmZzZXQgPT09IC0xKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBkZWNvZGUgQVNOLjEgZGF0YS4gJHthc24ucmVzdWx0LmVycm9yfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhc24ucmVzdWx0LnRvU3RyaW5nKCk7XG4gICAgfVxufVxuZXhwb3J0cy5Bc25Db252ZXJ0ID0gQXNuQ29udmVydDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkFzbkNvbnZlcnQiLCJhc24xanMiLCJyZXF1aXJlIiwicHZ0c3V0aWxzXzEiLCJwYXJzZXJfMSIsInNlcmlhbGl6ZXJfMSIsInNlcmlhbGl6ZSIsIm9iaiIsIkFzblNlcmlhbGl6ZXIiLCJwYXJzZSIsImRhdGEiLCJ0YXJnZXQiLCJBc25QYXJzZXIiLCJ0b1N0cmluZyIsImJ1ZiIsIkJ1ZmZlclNvdXJjZUNvbnZlcnRlciIsImlzQnVmZmVyU291cmNlIiwidG9BcnJheUJ1ZmZlciIsImFzbiIsImZyb21CRVIiLCJvZmZzZXQiLCJFcnJvciIsInJlc3VsdCIsImVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/convert.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/converters.js":
/*!********************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/converters.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.defaultConverter = exports.AsnNullConverter = exports.AsnGeneralizedTimeConverter = exports.AsnUTCTimeConverter = exports.AsnCharacterStringConverter = exports.AsnGeneralStringConverter = exports.AsnVisibleStringConverter = exports.AsnGraphicStringConverter = exports.AsnIA5StringConverter = exports.AsnVideotexStringConverter = exports.AsnTeletexStringConverter = exports.AsnPrintableStringConverter = exports.AsnNumericStringConverter = exports.AsnUniversalStringConverter = exports.AsnBmpStringConverter = exports.AsnUtf8StringConverter = exports.AsnConstructedOctetStringConverter = exports.AsnOctetStringConverter = exports.AsnBooleanConverter = exports.AsnObjectIdentifierConverter = exports.AsnBitStringConverter = exports.AsnIntegerBigIntConverter = exports.AsnIntegerArrayBufferConverter = exports.AsnEnumeratedConverter = exports.AsnIntegerConverter = exports.AsnAnyConverter = void 0;\nconst asn1js = __webpack_require__(/*! asn1js */ \"(action-browser)/./node_modules/asn1js/build/index.js\");\nconst enums_1 = __webpack_require__(/*! ./enums */ \"(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/enums.js\");\nconst index_1 = __webpack_require__(/*! ./types/index */ \"(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/types/index.js\");\nexports.AsnAnyConverter = {\n    fromASN: (value)=>value instanceof asn1js.Null ? null : value.valueBeforeDecodeView,\n    toASN: (value)=>{\n        if (value === null) {\n            return new asn1js.Null();\n        }\n        const schema = asn1js.fromBER(value);\n        if (schema.result.error) {\n            throw new Error(schema.result.error);\n        }\n        return schema.result;\n    }\n};\nexports.AsnIntegerConverter = {\n    fromASN: (value)=>value.valueBlock.valueHexView.byteLength >= 4 ? value.valueBlock.toString() : value.valueBlock.valueDec,\n    toASN: (value)=>new asn1js.Integer({\n            value: +value\n        })\n};\nexports.AsnEnumeratedConverter = {\n    fromASN: (value)=>value.valueBlock.valueDec,\n    toASN: (value)=>new asn1js.Enumerated({\n            value\n        })\n};\nexports.AsnIntegerArrayBufferConverter = {\n    fromASN: (value)=>value.valueBlock.valueHexView,\n    toASN: (value)=>new asn1js.Integer({\n            valueHex: value\n        })\n};\nexports.AsnIntegerBigIntConverter = {\n    fromASN: (value)=>value.toBigInt(),\n    toASN: (value)=>asn1js.Integer.fromBigInt(value)\n};\nexports.AsnBitStringConverter = {\n    fromASN: (value)=>value.valueBlock.valueHexView,\n    toASN: (value)=>new asn1js.BitString({\n            valueHex: value\n        })\n};\nexports.AsnObjectIdentifierConverter = {\n    fromASN: (value)=>value.valueBlock.toString(),\n    toASN: (value)=>new asn1js.ObjectIdentifier({\n            value\n        })\n};\nexports.AsnBooleanConverter = {\n    fromASN: (value)=>value.valueBlock.value,\n    toASN: (value)=>new asn1js.Boolean({\n            value\n        })\n};\nexports.AsnOctetStringConverter = {\n    fromASN: (value)=>value.valueBlock.valueHexView,\n    toASN: (value)=>new asn1js.OctetString({\n            valueHex: value\n        })\n};\nexports.AsnConstructedOctetStringConverter = {\n    fromASN: (value)=>new index_1.OctetString(value.getValue()),\n    toASN: (value)=>value.toASN()\n};\nfunction createStringConverter(Asn1Type) {\n    return {\n        fromASN: (value)=>value.valueBlock.value,\n        toASN: (value)=>new Asn1Type({\n                value\n            })\n    };\n}\nexports.AsnUtf8StringConverter = createStringConverter(asn1js.Utf8String);\nexports.AsnBmpStringConverter = createStringConverter(asn1js.BmpString);\nexports.AsnUniversalStringConverter = createStringConverter(asn1js.UniversalString);\nexports.AsnNumericStringConverter = createStringConverter(asn1js.NumericString);\nexports.AsnPrintableStringConverter = createStringConverter(asn1js.PrintableString);\nexports.AsnTeletexStringConverter = createStringConverter(asn1js.TeletexString);\nexports.AsnVideotexStringConverter = createStringConverter(asn1js.VideotexString);\nexports.AsnIA5StringConverter = createStringConverter(asn1js.IA5String);\nexports.AsnGraphicStringConverter = createStringConverter(asn1js.GraphicString);\nexports.AsnVisibleStringConverter = createStringConverter(asn1js.VisibleString);\nexports.AsnGeneralStringConverter = createStringConverter(asn1js.GeneralString);\nexports.AsnCharacterStringConverter = createStringConverter(asn1js.CharacterString);\nexports.AsnUTCTimeConverter = {\n    fromASN: (value)=>value.toDate(),\n    toASN: (value)=>new asn1js.UTCTime({\n            valueDate: value\n        })\n};\nexports.AsnGeneralizedTimeConverter = {\n    fromASN: (value)=>value.toDate(),\n    toASN: (value)=>new asn1js.GeneralizedTime({\n            valueDate: value\n        })\n};\nexports.AsnNullConverter = {\n    fromASN: ()=>null,\n    toASN: ()=>{\n        return new asn1js.Null();\n    }\n};\nfunction defaultConverter(type) {\n    switch(type){\n        case enums_1.AsnPropTypes.Any:\n            return exports.AsnAnyConverter;\n        case enums_1.AsnPropTypes.BitString:\n            return exports.AsnBitStringConverter;\n        case enums_1.AsnPropTypes.BmpString:\n            return exports.AsnBmpStringConverter;\n        case enums_1.AsnPropTypes.Boolean:\n            return exports.AsnBooleanConverter;\n        case enums_1.AsnPropTypes.CharacterString:\n            return exports.AsnCharacterStringConverter;\n        case enums_1.AsnPropTypes.Enumerated:\n            return exports.AsnEnumeratedConverter;\n        case enums_1.AsnPropTypes.GeneralString:\n            return exports.AsnGeneralStringConverter;\n        case enums_1.AsnPropTypes.GeneralizedTime:\n            return exports.AsnGeneralizedTimeConverter;\n        case enums_1.AsnPropTypes.GraphicString:\n            return exports.AsnGraphicStringConverter;\n        case enums_1.AsnPropTypes.IA5String:\n            return exports.AsnIA5StringConverter;\n        case enums_1.AsnPropTypes.Integer:\n            return exports.AsnIntegerConverter;\n        case enums_1.AsnPropTypes.Null:\n            return exports.AsnNullConverter;\n        case enums_1.AsnPropTypes.NumericString:\n            return exports.AsnNumericStringConverter;\n        case enums_1.AsnPropTypes.ObjectIdentifier:\n            return exports.AsnObjectIdentifierConverter;\n        case enums_1.AsnPropTypes.OctetString:\n            return exports.AsnOctetStringConverter;\n        case enums_1.AsnPropTypes.PrintableString:\n            return exports.AsnPrintableStringConverter;\n        case enums_1.AsnPropTypes.TeletexString:\n            return exports.AsnTeletexStringConverter;\n        case enums_1.AsnPropTypes.UTCTime:\n            return exports.AsnUTCTimeConverter;\n        case enums_1.AsnPropTypes.UniversalString:\n            return exports.AsnUniversalStringConverter;\n        case enums_1.AsnPropTypes.Utf8String:\n            return exports.AsnUtf8StringConverter;\n        case enums_1.AsnPropTypes.VideotexString:\n            return exports.AsnVideotexStringConverter;\n        case enums_1.AsnPropTypes.VisibleString:\n            return exports.AsnVisibleStringConverter;\n        default:\n            return null;\n    }\n}\nexports.defaultConverter = defaultConverter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/converters.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/converters.js":
/*!********************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/converters.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.defaultConverter = exports.AsnNullConverter = exports.AsnGeneralizedTimeConverter = exports.AsnUTCTimeConverter = exports.AsnCharacterStringConverter = exports.AsnGeneralStringConverter = exports.AsnVisibleStringConverter = exports.AsnGraphicStringConverter = exports.AsnIA5StringConverter = exports.AsnVideotexStringConverter = exports.AsnTeletexStringConverter = exports.AsnPrintableStringConverter = exports.AsnNumericStringConverter = exports.AsnUniversalStringConverter = exports.AsnBmpStringConverter = exports.AsnUtf8StringConverter = exports.AsnConstructedOctetStringConverter = exports.AsnOctetStringConverter = exports.AsnBooleanConverter = exports.AsnObjectIdentifierConverter = exports.AsnBitStringConverter = exports.AsnIntegerBigIntConverter = exports.AsnIntegerArrayBufferConverter = exports.AsnEnumeratedConverter = exports.AsnIntegerConverter = exports.AsnAnyConverter = void 0;\nconst asn1js = __webpack_require__(/*! asn1js */ \"(rsc)/./node_modules/asn1js/build/index.js\");\nconst enums_1 = __webpack_require__(/*! ./enums */ \"(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/enums.js\");\nconst index_1 = __webpack_require__(/*! ./types/index */ \"(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/types/index.js\");\nexports.AsnAnyConverter = {\n    fromASN: (value)=>value instanceof asn1js.Null ? null : value.valueBeforeDecodeView,\n    toASN: (value)=>{\n        if (value === null) {\n            return new asn1js.Null();\n        }\n        const schema = asn1js.fromBER(value);\n        if (schema.result.error) {\n            throw new Error(schema.result.error);\n        }\n        return schema.result;\n    }\n};\nexports.AsnIntegerConverter = {\n    fromASN: (value)=>value.valueBlock.valueHexView.byteLength >= 4 ? value.valueBlock.toString() : value.valueBlock.valueDec,\n    toASN: (value)=>new asn1js.Integer({\n            value: +value\n        })\n};\nexports.AsnEnumeratedConverter = {\n    fromASN: (value)=>value.valueBlock.valueDec,\n    toASN: (value)=>new asn1js.Enumerated({\n            value\n        })\n};\nexports.AsnIntegerArrayBufferConverter = {\n    fromASN: (value)=>value.valueBlock.valueHexView,\n    toASN: (value)=>new asn1js.Integer({\n            valueHex: value\n        })\n};\nexports.AsnIntegerBigIntConverter = {\n    fromASN: (value)=>value.toBigInt(),\n    toASN: (value)=>asn1js.Integer.fromBigInt(value)\n};\nexports.AsnBitStringConverter = {\n    fromASN: (value)=>value.valueBlock.valueHexView,\n    toASN: (value)=>new asn1js.BitString({\n            valueHex: value\n        })\n};\nexports.AsnObjectIdentifierConverter = {\n    fromASN: (value)=>value.valueBlock.toString(),\n    toASN: (value)=>new asn1js.ObjectIdentifier({\n            value\n        })\n};\nexports.AsnBooleanConverter = {\n    fromASN: (value)=>value.valueBlock.value,\n    toASN: (value)=>new asn1js.Boolean({\n            value\n        })\n};\nexports.AsnOctetStringConverter = {\n    fromASN: (value)=>value.valueBlock.valueHexView,\n    toASN: (value)=>new asn1js.OctetString({\n            valueHex: value\n        })\n};\nexports.AsnConstructedOctetStringConverter = {\n    fromASN: (value)=>new index_1.OctetString(value.getValue()),\n    toASN: (value)=>value.toASN()\n};\nfunction createStringConverter(Asn1Type) {\n    return {\n        fromASN: (value)=>value.valueBlock.value,\n        toASN: (value)=>new Asn1Type({\n                value\n            })\n    };\n}\nexports.AsnUtf8StringConverter = createStringConverter(asn1js.Utf8String);\nexports.AsnBmpStringConverter = createStringConverter(asn1js.BmpString);\nexports.AsnUniversalStringConverter = createStringConverter(asn1js.UniversalString);\nexports.AsnNumericStringConverter = createStringConverter(asn1js.NumericString);\nexports.AsnPrintableStringConverter = createStringConverter(asn1js.PrintableString);\nexports.AsnTeletexStringConverter = createStringConverter(asn1js.TeletexString);\nexports.AsnVideotexStringConverter = createStringConverter(asn1js.VideotexString);\nexports.AsnIA5StringConverter = createStringConverter(asn1js.IA5String);\nexports.AsnGraphicStringConverter = createStringConverter(asn1js.GraphicString);\nexports.AsnVisibleStringConverter = createStringConverter(asn1js.VisibleString);\nexports.AsnGeneralStringConverter = createStringConverter(asn1js.GeneralString);\nexports.AsnCharacterStringConverter = createStringConverter(asn1js.CharacterString);\nexports.AsnUTCTimeConverter = {\n    fromASN: (value)=>value.toDate(),\n    toASN: (value)=>new asn1js.UTCTime({\n            valueDate: value\n        })\n};\nexports.AsnGeneralizedTimeConverter = {\n    fromASN: (value)=>value.toDate(),\n    toASN: (value)=>new asn1js.GeneralizedTime({\n            valueDate: value\n        })\n};\nexports.AsnNullConverter = {\n    fromASN: ()=>null,\n    toASN: ()=>{\n        return new asn1js.Null();\n    }\n};\nfunction defaultConverter(type) {\n    switch(type){\n        case enums_1.AsnPropTypes.Any:\n            return exports.AsnAnyConverter;\n        case enums_1.AsnPropTypes.BitString:\n            return exports.AsnBitStringConverter;\n        case enums_1.AsnPropTypes.BmpString:\n            return exports.AsnBmpStringConverter;\n        case enums_1.AsnPropTypes.Boolean:\n            return exports.AsnBooleanConverter;\n        case enums_1.AsnPropTypes.CharacterString:\n            return exports.AsnCharacterStringConverter;\n        case enums_1.AsnPropTypes.Enumerated:\n            return exports.AsnEnumeratedConverter;\n        case enums_1.AsnPropTypes.GeneralString:\n            return exports.AsnGeneralStringConverter;\n        case enums_1.AsnPropTypes.GeneralizedTime:\n            return exports.AsnGeneralizedTimeConverter;\n        case enums_1.AsnPropTypes.GraphicString:\n            return exports.AsnGraphicStringConverter;\n        case enums_1.AsnPropTypes.IA5String:\n            return exports.AsnIA5StringConverter;\n        case enums_1.AsnPropTypes.Integer:\n            return exports.AsnIntegerConverter;\n        case enums_1.AsnPropTypes.Null:\n            return exports.AsnNullConverter;\n        case enums_1.AsnPropTypes.NumericString:\n            return exports.AsnNumericStringConverter;\n        case enums_1.AsnPropTypes.ObjectIdentifier:\n            return exports.AsnObjectIdentifierConverter;\n        case enums_1.AsnPropTypes.OctetString:\n            return exports.AsnOctetStringConverter;\n        case enums_1.AsnPropTypes.PrintableString:\n            return exports.AsnPrintableStringConverter;\n        case enums_1.AsnPropTypes.TeletexString:\n            return exports.AsnTeletexStringConverter;\n        case enums_1.AsnPropTypes.UTCTime:\n            return exports.AsnUTCTimeConverter;\n        case enums_1.AsnPropTypes.UniversalString:\n            return exports.AsnUniversalStringConverter;\n        case enums_1.AsnPropTypes.Utf8String:\n            return exports.AsnUtf8StringConverter;\n        case enums_1.AsnPropTypes.VideotexString:\n            return exports.AsnVideotexStringConverter;\n        case enums_1.AsnPropTypes.VisibleString:\n            return exports.AsnVisibleStringConverter;\n        default:\n            return null;\n    }\n}\nexports.defaultConverter = defaultConverter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/converters.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/decorators.js":
/*!********************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/decorators.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AsnProp = exports.AsnSequenceType = exports.AsnSetType = exports.AsnChoiceType = exports.AsnType = void 0;\nconst converters = __webpack_require__(/*! ./converters */ \"(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/converters.js\");\nconst enums_1 = __webpack_require__(/*! ./enums */ \"(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/enums.js\");\nconst storage_1 = __webpack_require__(/*! ./storage */ \"(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/storage.js\");\nconst AsnType = (options)=>(target)=>{\n        let schema;\n        if (!storage_1.schemaStorage.has(target)) {\n            schema = storage_1.schemaStorage.createDefault(target);\n            storage_1.schemaStorage.set(target, schema);\n        } else {\n            schema = storage_1.schemaStorage.get(target);\n        }\n        Object.assign(schema, options);\n    };\nexports.AsnType = AsnType;\nconst AsnChoiceType = ()=>(0, exports.AsnType)({\n        type: enums_1.AsnTypeTypes.Choice\n    });\nexports.AsnChoiceType = AsnChoiceType;\nconst AsnSetType = (options)=>(0, exports.AsnType)({\n        type: enums_1.AsnTypeTypes.Set,\n        ...options\n    });\nexports.AsnSetType = AsnSetType;\nconst AsnSequenceType = (options)=>(0, exports.AsnType)({\n        type: enums_1.AsnTypeTypes.Sequence,\n        ...options\n    });\nexports.AsnSequenceType = AsnSequenceType;\nconst AsnProp = (options)=>(target, propertyKey)=>{\n        let schema;\n        if (!storage_1.schemaStorage.has(target.constructor)) {\n            schema = storage_1.schemaStorage.createDefault(target.constructor);\n            storage_1.schemaStorage.set(target.constructor, schema);\n        } else {\n            schema = storage_1.schemaStorage.get(target.constructor);\n        }\n        const copyOptions = Object.assign({}, options);\n        if (typeof copyOptions.type === \"number\" && !copyOptions.converter) {\n            const defaultConverter = converters.defaultConverter(options.type);\n            if (!defaultConverter) {\n                throw new Error(`Cannot get default converter for property '${propertyKey}' of ${target.constructor.name}`);\n            }\n            copyOptions.converter = defaultConverter;\n        }\n        schema.items[propertyKey] = copyOptions;\n    };\nexports.AsnProp = AsnProp;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGVjdWxpYXIvYXNuMS1zY2hlbWEvYnVpbGQvY2pzL2RlY29yYXRvcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGVBQWUsR0FBR0EsdUJBQXVCLEdBQUdBLGtCQUFrQixHQUFHQSxxQkFBcUIsR0FBR0EsZUFBZSxHQUFHLEtBQUs7QUFDaEgsTUFBTU8sYUFBYUMsbUJBQU9BLENBQUMsbUdBQWM7QUFDekMsTUFBTUMsVUFBVUQsbUJBQU9BLENBQUMseUZBQVM7QUFDakMsTUFBTUUsWUFBWUYsbUJBQU9BLENBQUMsNkZBQVc7QUFDckMsTUFBTUYsVUFBVSxDQUFDSyxVQUFZLENBQUNDO1FBQzFCLElBQUlDO1FBQ0osSUFBSSxDQUFDSCxVQUFVSSxhQUFhLENBQUNDLEdBQUcsQ0FBQ0gsU0FBUztZQUN0Q0MsU0FBU0gsVUFBVUksYUFBYSxDQUFDRSxhQUFhLENBQUNKO1lBQy9DRixVQUFVSSxhQUFhLENBQUNHLEdBQUcsQ0FBQ0wsUUFBUUM7UUFDeEMsT0FDSztZQUNEQSxTQUFTSCxVQUFVSSxhQUFhLENBQUNJLEdBQUcsQ0FBQ047UUFDekM7UUFDQWQsT0FBT3FCLE1BQU0sQ0FBQ04sUUFBUUY7SUFDMUI7QUFDQVgsZUFBZSxHQUFHTTtBQUNsQixNQUFNRCxnQkFBZ0IsSUFBTSxDQUFDLEdBQUdMLFFBQVFNLE9BQU8sRUFBRTtRQUFFYyxNQUFNWCxRQUFRWSxZQUFZLENBQUNDLE1BQU07SUFBQztBQUNyRnRCLHFCQUFxQixHQUFHSztBQUN4QixNQUFNRCxhQUFhLENBQUNPLFVBQVksQ0FBQyxHQUFHWCxRQUFRTSxPQUFPLEVBQUU7UUFBRWMsTUFBTVgsUUFBUVksWUFBWSxDQUFDRSxHQUFHO1FBQUUsR0FBR1osT0FBTztJQUFDO0FBQ2xHWCxrQkFBa0IsR0FBR0k7QUFDckIsTUFBTUQsa0JBQWtCLENBQUNRLFVBQVksQ0FBQyxHQUFHWCxRQUFRTSxPQUFPLEVBQUU7UUFBRWMsTUFBTVgsUUFBUVksWUFBWSxDQUFDRyxRQUFRO1FBQUUsR0FBR2IsT0FBTztJQUFDO0FBQzVHWCx1QkFBdUIsR0FBR0c7QUFDMUIsTUFBTUQsVUFBVSxDQUFDUyxVQUFZLENBQUNDLFFBQVFhO1FBQ2xDLElBQUlaO1FBQ0osSUFBSSxDQUFDSCxVQUFVSSxhQUFhLENBQUNDLEdBQUcsQ0FBQ0gsT0FBT2MsV0FBVyxHQUFHO1lBQ2xEYixTQUFTSCxVQUFVSSxhQUFhLENBQUNFLGFBQWEsQ0FBQ0osT0FBT2MsV0FBVztZQUNqRWhCLFVBQVVJLGFBQWEsQ0FBQ0csR0FBRyxDQUFDTCxPQUFPYyxXQUFXLEVBQUViO1FBQ3BELE9BQ0s7WUFDREEsU0FBU0gsVUFBVUksYUFBYSxDQUFDSSxHQUFHLENBQUNOLE9BQU9jLFdBQVc7UUFDM0Q7UUFDQSxNQUFNQyxjQUFjN0IsT0FBT3FCLE1BQU0sQ0FBQyxDQUFDLEdBQUdSO1FBQ3RDLElBQUksT0FBT2dCLFlBQVlQLElBQUksS0FBSyxZQUFZLENBQUNPLFlBQVlDLFNBQVMsRUFBRTtZQUNoRSxNQUFNQyxtQkFBbUJ0QixXQUFXc0IsZ0JBQWdCLENBQUNsQixRQUFRUyxJQUFJO1lBQ2pFLElBQUksQ0FBQ1Msa0JBQWtCO2dCQUNuQixNQUFNLElBQUlDLE1BQU0sQ0FBQywyQ0FBMkMsRUFBRUwsWUFBWSxLQUFLLEVBQUViLE9BQU9jLFdBQVcsQ0FBQ0ssSUFBSSxDQUFDLENBQUM7WUFDOUc7WUFDQUosWUFBWUMsU0FBUyxHQUFHQztRQUM1QjtRQUNBaEIsT0FBT21CLEtBQUssQ0FBQ1AsWUFBWSxHQUFHRTtJQUNoQztBQUNBM0IsZUFBZSxHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLW1ha2V0cGxhY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy9kZWNvcmF0b3JzLmpzPzMxNWEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFzblByb3AgPSBleHBvcnRzLkFzblNlcXVlbmNlVHlwZSA9IGV4cG9ydHMuQXNuU2V0VHlwZSA9IGV4cG9ydHMuQXNuQ2hvaWNlVHlwZSA9IGV4cG9ydHMuQXNuVHlwZSA9IHZvaWQgMDtcbmNvbnN0IGNvbnZlcnRlcnMgPSByZXF1aXJlKFwiLi9jb252ZXJ0ZXJzXCIpO1xuY29uc3QgZW51bXNfMSA9IHJlcXVpcmUoXCIuL2VudW1zXCIpO1xuY29uc3Qgc3RvcmFnZV8xID0gcmVxdWlyZShcIi4vc3RvcmFnZVwiKTtcbmNvbnN0IEFzblR5cGUgPSAob3B0aW9ucykgPT4gKHRhcmdldCkgPT4ge1xuICAgIGxldCBzY2hlbWE7XG4gICAgaWYgKCFzdG9yYWdlXzEuc2NoZW1hU3RvcmFnZS5oYXModGFyZ2V0KSkge1xuICAgICAgICBzY2hlbWEgPSBzdG9yYWdlXzEuc2NoZW1hU3RvcmFnZS5jcmVhdGVEZWZhdWx0KHRhcmdldCk7XG4gICAgICAgIHN0b3JhZ2VfMS5zY2hlbWFTdG9yYWdlLnNldCh0YXJnZXQsIHNjaGVtYSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzY2hlbWEgPSBzdG9yYWdlXzEuc2NoZW1hU3RvcmFnZS5nZXQodGFyZ2V0KTtcbiAgICB9XG4gICAgT2JqZWN0LmFzc2lnbihzY2hlbWEsIG9wdGlvbnMpO1xufTtcbmV4cG9ydHMuQXNuVHlwZSA9IEFzblR5cGU7XG5jb25zdCBBc25DaG9pY2VUeXBlID0gKCkgPT4gKDAsIGV4cG9ydHMuQXNuVHlwZSkoeyB0eXBlOiBlbnVtc18xLkFzblR5cGVUeXBlcy5DaG9pY2UgfSk7XG5leHBvcnRzLkFzbkNob2ljZVR5cGUgPSBBc25DaG9pY2VUeXBlO1xuY29uc3QgQXNuU2V0VHlwZSA9IChvcHRpb25zKSA9PiAoMCwgZXhwb3J0cy5Bc25UeXBlKSh7IHR5cGU6IGVudW1zXzEuQXNuVHlwZVR5cGVzLlNldCwgLi4ub3B0aW9ucyB9KTtcbmV4cG9ydHMuQXNuU2V0VHlwZSA9IEFzblNldFR5cGU7XG5jb25zdCBBc25TZXF1ZW5jZVR5cGUgPSAob3B0aW9ucykgPT4gKDAsIGV4cG9ydHMuQXNuVHlwZSkoeyB0eXBlOiBlbnVtc18xLkFzblR5cGVUeXBlcy5TZXF1ZW5jZSwgLi4ub3B0aW9ucyB9KTtcbmV4cG9ydHMuQXNuU2VxdWVuY2VUeXBlID0gQXNuU2VxdWVuY2VUeXBlO1xuY29uc3QgQXNuUHJvcCA9IChvcHRpb25zKSA9PiAodGFyZ2V0LCBwcm9wZXJ0eUtleSkgPT4ge1xuICAgIGxldCBzY2hlbWE7XG4gICAgaWYgKCFzdG9yYWdlXzEuc2NoZW1hU3RvcmFnZS5oYXModGFyZ2V0LmNvbnN0cnVjdG9yKSkge1xuICAgICAgICBzY2hlbWEgPSBzdG9yYWdlXzEuc2NoZW1hU3RvcmFnZS5jcmVhdGVEZWZhdWx0KHRhcmdldC5jb25zdHJ1Y3Rvcik7XG4gICAgICAgIHN0b3JhZ2VfMS5zY2hlbWFTdG9yYWdlLnNldCh0YXJnZXQuY29uc3RydWN0b3IsIHNjaGVtYSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzY2hlbWEgPSBzdG9yYWdlXzEuc2NoZW1hU3RvcmFnZS5nZXQodGFyZ2V0LmNvbnN0cnVjdG9yKTtcbiAgICB9XG4gICAgY29uc3QgY29weU9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKTtcbiAgICBpZiAodHlwZW9mIGNvcHlPcHRpb25zLnR5cGUgPT09IFwibnVtYmVyXCIgJiYgIWNvcHlPcHRpb25zLmNvbnZlcnRlcikge1xuICAgICAgICBjb25zdCBkZWZhdWx0Q29udmVydGVyID0gY29udmVydGVycy5kZWZhdWx0Q29udmVydGVyKG9wdGlvbnMudHlwZSk7XG4gICAgICAgIGlmICghZGVmYXVsdENvbnZlcnRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZ2V0IGRlZmF1bHQgY29udmVydGVyIGZvciBwcm9wZXJ0eSAnJHtwcm9wZXJ0eUtleX0nIG9mICR7dGFyZ2V0LmNvbnN0cnVjdG9yLm5hbWV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29weU9wdGlvbnMuY29udmVydGVyID0gZGVmYXVsdENvbnZlcnRlcjtcbiAgICB9XG4gICAgc2NoZW1hLml0ZW1zW3Byb3BlcnR5S2V5XSA9IGNvcHlPcHRpb25zO1xufTtcbmV4cG9ydHMuQXNuUHJvcCA9IEFzblByb3A7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJBc25Qcm9wIiwiQXNuU2VxdWVuY2VUeXBlIiwiQXNuU2V0VHlwZSIsIkFzbkNob2ljZVR5cGUiLCJBc25UeXBlIiwiY29udmVydGVycyIsInJlcXVpcmUiLCJlbnVtc18xIiwic3RvcmFnZV8xIiwib3B0aW9ucyIsInRhcmdldCIsInNjaGVtYSIsInNjaGVtYVN0b3JhZ2UiLCJoYXMiLCJjcmVhdGVEZWZhdWx0Iiwic2V0IiwiZ2V0IiwiYXNzaWduIiwidHlwZSIsIkFzblR5cGVUeXBlcyIsIkNob2ljZSIsIlNldCIsIlNlcXVlbmNlIiwicHJvcGVydHlLZXkiLCJjb25zdHJ1Y3RvciIsImNvcHlPcHRpb25zIiwiY29udmVydGVyIiwiZGVmYXVsdENvbnZlcnRlciIsIkVycm9yIiwibmFtZSIsIml0ZW1zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/decorators.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/decorators.js":
/*!********************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/decorators.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AsnProp = exports.AsnSequenceType = exports.AsnSetType = exports.AsnChoiceType = exports.AsnType = void 0;\nconst converters = __webpack_require__(/*! ./converters */ \"(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/converters.js\");\nconst enums_1 = __webpack_require__(/*! ./enums */ \"(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/enums.js\");\nconst storage_1 = __webpack_require__(/*! ./storage */ \"(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/storage.js\");\nconst AsnType = (options)=>(target)=>{\n        let schema;\n        if (!storage_1.schemaStorage.has(target)) {\n            schema = storage_1.schemaStorage.createDefault(target);\n            storage_1.schemaStorage.set(target, schema);\n        } else {\n            schema = storage_1.schemaStorage.get(target);\n        }\n        Object.assign(schema, options);\n    };\nexports.AsnType = AsnType;\nconst AsnChoiceType = ()=>(0, exports.AsnType)({\n        type: enums_1.AsnTypeTypes.Choice\n    });\nexports.AsnChoiceType = AsnChoiceType;\nconst AsnSetType = (options)=>(0, exports.AsnType)({\n        type: enums_1.AsnTypeTypes.Set,\n        ...options\n    });\nexports.AsnSetType = AsnSetType;\nconst AsnSequenceType = (options)=>(0, exports.AsnType)({\n        type: enums_1.AsnTypeTypes.Sequence,\n        ...options\n    });\nexports.AsnSequenceType = AsnSequenceType;\nconst AsnProp = (options)=>(target, propertyKey)=>{\n        let schema;\n        if (!storage_1.schemaStorage.has(target.constructor)) {\n            schema = storage_1.schemaStorage.createDefault(target.constructor);\n            storage_1.schemaStorage.set(target.constructor, schema);\n        } else {\n            schema = storage_1.schemaStorage.get(target.constructor);\n        }\n        const copyOptions = Object.assign({}, options);\n        if (typeof copyOptions.type === \"number\" && !copyOptions.converter) {\n            const defaultConverter = converters.defaultConverter(options.type);\n            if (!defaultConverter) {\n                throw new Error(`Cannot get default converter for property '${propertyKey}' of ${target.constructor.name}`);\n            }\n            copyOptions.converter = defaultConverter;\n        }\n        schema.items[propertyKey] = copyOptions;\n    };\nexports.AsnProp = AsnProp;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy9kZWNvcmF0b3JzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxlQUFlLEdBQUdBLHVCQUF1QixHQUFHQSxrQkFBa0IsR0FBR0EscUJBQXFCLEdBQUdBLGVBQWUsR0FBRyxLQUFLO0FBQ2hILE1BQU1PLGFBQWFDLG1CQUFPQSxDQUFDLHdGQUFjO0FBQ3pDLE1BQU1DLFVBQVVELG1CQUFPQSxDQUFDLDhFQUFTO0FBQ2pDLE1BQU1FLFlBQVlGLG1CQUFPQSxDQUFDLGtGQUFXO0FBQ3JDLE1BQU1GLFVBQVUsQ0FBQ0ssVUFBWSxDQUFDQztRQUMxQixJQUFJQztRQUNKLElBQUksQ0FBQ0gsVUFBVUksYUFBYSxDQUFDQyxHQUFHLENBQUNILFNBQVM7WUFDdENDLFNBQVNILFVBQVVJLGFBQWEsQ0FBQ0UsYUFBYSxDQUFDSjtZQUMvQ0YsVUFBVUksYUFBYSxDQUFDRyxHQUFHLENBQUNMLFFBQVFDO1FBQ3hDLE9BQ0s7WUFDREEsU0FBU0gsVUFBVUksYUFBYSxDQUFDSSxHQUFHLENBQUNOO1FBQ3pDO1FBQ0FkLE9BQU9xQixNQUFNLENBQUNOLFFBQVFGO0lBQzFCO0FBQ0FYLGVBQWUsR0FBR007QUFDbEIsTUFBTUQsZ0JBQWdCLElBQU0sQ0FBQyxHQUFHTCxRQUFRTSxPQUFPLEVBQUU7UUFBRWMsTUFBTVgsUUFBUVksWUFBWSxDQUFDQyxNQUFNO0lBQUM7QUFDckZ0QixxQkFBcUIsR0FBR0s7QUFDeEIsTUFBTUQsYUFBYSxDQUFDTyxVQUFZLENBQUMsR0FBR1gsUUFBUU0sT0FBTyxFQUFFO1FBQUVjLE1BQU1YLFFBQVFZLFlBQVksQ0FBQ0UsR0FBRztRQUFFLEdBQUdaLE9BQU87SUFBQztBQUNsR1gsa0JBQWtCLEdBQUdJO0FBQ3JCLE1BQU1ELGtCQUFrQixDQUFDUSxVQUFZLENBQUMsR0FBR1gsUUFBUU0sT0FBTyxFQUFFO1FBQUVjLE1BQU1YLFFBQVFZLFlBQVksQ0FBQ0csUUFBUTtRQUFFLEdBQUdiLE9BQU87SUFBQztBQUM1R1gsdUJBQXVCLEdBQUdHO0FBQzFCLE1BQU1ELFVBQVUsQ0FBQ1MsVUFBWSxDQUFDQyxRQUFRYTtRQUNsQyxJQUFJWjtRQUNKLElBQUksQ0FBQ0gsVUFBVUksYUFBYSxDQUFDQyxHQUFHLENBQUNILE9BQU9jLFdBQVcsR0FBRztZQUNsRGIsU0FBU0gsVUFBVUksYUFBYSxDQUFDRSxhQUFhLENBQUNKLE9BQU9jLFdBQVc7WUFDakVoQixVQUFVSSxhQUFhLENBQUNHLEdBQUcsQ0FBQ0wsT0FBT2MsV0FBVyxFQUFFYjtRQUNwRCxPQUNLO1lBQ0RBLFNBQVNILFVBQVVJLGFBQWEsQ0FBQ0ksR0FBRyxDQUFDTixPQUFPYyxXQUFXO1FBQzNEO1FBQ0EsTUFBTUMsY0FBYzdCLE9BQU9xQixNQUFNLENBQUMsQ0FBQyxHQUFHUjtRQUN0QyxJQUFJLE9BQU9nQixZQUFZUCxJQUFJLEtBQUssWUFBWSxDQUFDTyxZQUFZQyxTQUFTLEVBQUU7WUFDaEUsTUFBTUMsbUJBQW1CdEIsV0FBV3NCLGdCQUFnQixDQUFDbEIsUUFBUVMsSUFBSTtZQUNqRSxJQUFJLENBQUNTLGtCQUFrQjtnQkFDbkIsTUFBTSxJQUFJQyxNQUFNLENBQUMsMkNBQTJDLEVBQUVMLFlBQVksS0FBSyxFQUFFYixPQUFPYyxXQUFXLENBQUNLLElBQUksQ0FBQyxDQUFDO1lBQzlHO1lBQ0FKLFlBQVlDLFNBQVMsR0FBR0M7UUFDNUI7UUFDQWhCLE9BQU9tQixLQUFLLENBQUNQLFlBQVksR0FBR0U7SUFDaEM7QUFDQTNCLGVBQWUsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1tYWtldHBsYWNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL0BwZWN1bGlhci9hc24xLXNjaGVtYS9idWlsZC9janMvZGVjb3JhdG9ycy5qcz8zMTVhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Bc25Qcm9wID0gZXhwb3J0cy5Bc25TZXF1ZW5jZVR5cGUgPSBleHBvcnRzLkFzblNldFR5cGUgPSBleHBvcnRzLkFzbkNob2ljZVR5cGUgPSBleHBvcnRzLkFzblR5cGUgPSB2b2lkIDA7XG5jb25zdCBjb252ZXJ0ZXJzID0gcmVxdWlyZShcIi4vY29udmVydGVyc1wiKTtcbmNvbnN0IGVudW1zXzEgPSByZXF1aXJlKFwiLi9lbnVtc1wiKTtcbmNvbnN0IHN0b3JhZ2VfMSA9IHJlcXVpcmUoXCIuL3N0b3JhZ2VcIik7XG5jb25zdCBBc25UeXBlID0gKG9wdGlvbnMpID0+ICh0YXJnZXQpID0+IHtcbiAgICBsZXQgc2NoZW1hO1xuICAgIGlmICghc3RvcmFnZV8xLnNjaGVtYVN0b3JhZ2UuaGFzKHRhcmdldCkpIHtcbiAgICAgICAgc2NoZW1hID0gc3RvcmFnZV8xLnNjaGVtYVN0b3JhZ2UuY3JlYXRlRGVmYXVsdCh0YXJnZXQpO1xuICAgICAgICBzdG9yYWdlXzEuc2NoZW1hU3RvcmFnZS5zZXQodGFyZ2V0LCBzY2hlbWEpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc2NoZW1hID0gc3RvcmFnZV8xLnNjaGVtYVN0b3JhZ2UuZ2V0KHRhcmdldCk7XG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24oc2NoZW1hLCBvcHRpb25zKTtcbn07XG5leHBvcnRzLkFzblR5cGUgPSBBc25UeXBlO1xuY29uc3QgQXNuQ2hvaWNlVHlwZSA9ICgpID0+ICgwLCBleHBvcnRzLkFzblR5cGUpKHsgdHlwZTogZW51bXNfMS5Bc25UeXBlVHlwZXMuQ2hvaWNlIH0pO1xuZXhwb3J0cy5Bc25DaG9pY2VUeXBlID0gQXNuQ2hvaWNlVHlwZTtcbmNvbnN0IEFzblNldFR5cGUgPSAob3B0aW9ucykgPT4gKDAsIGV4cG9ydHMuQXNuVHlwZSkoeyB0eXBlOiBlbnVtc18xLkFzblR5cGVUeXBlcy5TZXQsIC4uLm9wdGlvbnMgfSk7XG5leHBvcnRzLkFzblNldFR5cGUgPSBBc25TZXRUeXBlO1xuY29uc3QgQXNuU2VxdWVuY2VUeXBlID0gKG9wdGlvbnMpID0+ICgwLCBleHBvcnRzLkFzblR5cGUpKHsgdHlwZTogZW51bXNfMS5Bc25UeXBlVHlwZXMuU2VxdWVuY2UsIC4uLm9wdGlvbnMgfSk7XG5leHBvcnRzLkFzblNlcXVlbmNlVHlwZSA9IEFzblNlcXVlbmNlVHlwZTtcbmNvbnN0IEFzblByb3AgPSAob3B0aW9ucykgPT4gKHRhcmdldCwgcHJvcGVydHlLZXkpID0+IHtcbiAgICBsZXQgc2NoZW1hO1xuICAgIGlmICghc3RvcmFnZV8xLnNjaGVtYVN0b3JhZ2UuaGFzKHRhcmdldC5jb25zdHJ1Y3RvcikpIHtcbiAgICAgICAgc2NoZW1hID0gc3RvcmFnZV8xLnNjaGVtYVN0b3JhZ2UuY3JlYXRlRGVmYXVsdCh0YXJnZXQuY29uc3RydWN0b3IpO1xuICAgICAgICBzdG9yYWdlXzEuc2NoZW1hU3RvcmFnZS5zZXQodGFyZ2V0LmNvbnN0cnVjdG9yLCBzY2hlbWEpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc2NoZW1hID0gc3RvcmFnZV8xLnNjaGVtYVN0b3JhZ2UuZ2V0KHRhcmdldC5jb25zdHJ1Y3Rvcik7XG4gICAgfVxuICAgIGNvbnN0IGNvcHlPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyk7XG4gICAgaWYgKHR5cGVvZiBjb3B5T3B0aW9ucy50eXBlID09PSBcIm51bWJlclwiICYmICFjb3B5T3B0aW9ucy5jb252ZXJ0ZXIpIHtcbiAgICAgICAgY29uc3QgZGVmYXVsdENvbnZlcnRlciA9IGNvbnZlcnRlcnMuZGVmYXVsdENvbnZlcnRlcihvcHRpb25zLnR5cGUpO1xuICAgICAgICBpZiAoIWRlZmF1bHRDb252ZXJ0ZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGdldCBkZWZhdWx0IGNvbnZlcnRlciBmb3IgcHJvcGVydHkgJyR7cHJvcGVydHlLZXl9JyBvZiAke3RhcmdldC5jb25zdHJ1Y3Rvci5uYW1lfWApO1xuICAgICAgICB9XG4gICAgICAgIGNvcHlPcHRpb25zLmNvbnZlcnRlciA9IGRlZmF1bHRDb252ZXJ0ZXI7XG4gICAgfVxuICAgIHNjaGVtYS5pdGVtc1twcm9wZXJ0eUtleV0gPSBjb3B5T3B0aW9ucztcbn07XG5leHBvcnRzLkFzblByb3AgPSBBc25Qcm9wO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQXNuUHJvcCIsIkFzblNlcXVlbmNlVHlwZSIsIkFzblNldFR5cGUiLCJBc25DaG9pY2VUeXBlIiwiQXNuVHlwZSIsImNvbnZlcnRlcnMiLCJyZXF1aXJlIiwiZW51bXNfMSIsInN0b3JhZ2VfMSIsIm9wdGlvbnMiLCJ0YXJnZXQiLCJzY2hlbWEiLCJzY2hlbWFTdG9yYWdlIiwiaGFzIiwiY3JlYXRlRGVmYXVsdCIsInNldCIsImdldCIsImFzc2lnbiIsInR5cGUiLCJBc25UeXBlVHlwZXMiLCJDaG9pY2UiLCJTZXQiLCJTZXF1ZW5jZSIsInByb3BlcnR5S2V5IiwiY29uc3RydWN0b3IiLCJjb3B5T3B0aW9ucyIsImNvbnZlcnRlciIsImRlZmF1bHRDb252ZXJ0ZXIiLCJFcnJvciIsIm5hbWUiLCJpdGVtcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/decorators.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/enums.js":
/*!***************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/enums.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AsnPropTypes = exports.AsnTypeTypes = void 0;\nvar AsnTypeTypes;\n(function(AsnTypeTypes) {\n    AsnTypeTypes[AsnTypeTypes[\"Sequence\"] = 0] = \"Sequence\";\n    AsnTypeTypes[AsnTypeTypes[\"Set\"] = 1] = \"Set\";\n    AsnTypeTypes[AsnTypeTypes[\"Choice\"] = 2] = \"Choice\";\n})(AsnTypeTypes = exports.AsnTypeTypes || (exports.AsnTypeTypes = {}));\nvar AsnPropTypes;\n(function(AsnPropTypes) {\n    AsnPropTypes[AsnPropTypes[\"Any\"] = 1] = \"Any\";\n    AsnPropTypes[AsnPropTypes[\"Boolean\"] = 2] = \"Boolean\";\n    AsnPropTypes[AsnPropTypes[\"OctetString\"] = 3] = \"OctetString\";\n    AsnPropTypes[AsnPropTypes[\"BitString\"] = 4] = \"BitString\";\n    AsnPropTypes[AsnPropTypes[\"Integer\"] = 5] = \"Integer\";\n    AsnPropTypes[AsnPropTypes[\"Enumerated\"] = 6] = \"Enumerated\";\n    AsnPropTypes[AsnPropTypes[\"ObjectIdentifier\"] = 7] = \"ObjectIdentifier\";\n    AsnPropTypes[AsnPropTypes[\"Utf8String\"] = 8] = \"Utf8String\";\n    AsnPropTypes[AsnPropTypes[\"BmpString\"] = 9] = \"BmpString\";\n    AsnPropTypes[AsnPropTypes[\"UniversalString\"] = 10] = \"UniversalString\";\n    AsnPropTypes[AsnPropTypes[\"NumericString\"] = 11] = \"NumericString\";\n    AsnPropTypes[AsnPropTypes[\"PrintableString\"] = 12] = \"PrintableString\";\n    AsnPropTypes[AsnPropTypes[\"TeletexString\"] = 13] = \"TeletexString\";\n    AsnPropTypes[AsnPropTypes[\"VideotexString\"] = 14] = \"VideotexString\";\n    AsnPropTypes[AsnPropTypes[\"IA5String\"] = 15] = \"IA5String\";\n    AsnPropTypes[AsnPropTypes[\"GraphicString\"] = 16] = \"GraphicString\";\n    AsnPropTypes[AsnPropTypes[\"VisibleString\"] = 17] = \"VisibleString\";\n    AsnPropTypes[AsnPropTypes[\"GeneralString\"] = 18] = \"GeneralString\";\n    AsnPropTypes[AsnPropTypes[\"CharacterString\"] = 19] = \"CharacterString\";\n    AsnPropTypes[AsnPropTypes[\"UTCTime\"] = 20] = \"UTCTime\";\n    AsnPropTypes[AsnPropTypes[\"GeneralizedTime\"] = 21] = \"GeneralizedTime\";\n    AsnPropTypes[AsnPropTypes[\"DATE\"] = 22] = \"DATE\";\n    AsnPropTypes[AsnPropTypes[\"TimeOfDay\"] = 23] = \"TimeOfDay\";\n    AsnPropTypes[AsnPropTypes[\"DateTime\"] = 24] = \"DateTime\";\n    AsnPropTypes[AsnPropTypes[\"Duration\"] = 25] = \"Duration\";\n    AsnPropTypes[AsnPropTypes[\"TIME\"] = 26] = \"TIME\";\n    AsnPropTypes[AsnPropTypes[\"Null\"] = 27] = \"Null\";\n})(AsnPropTypes = exports.AsnPropTypes || (exports.AsnPropTypes = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGVjdWxpYXIvYXNuMS1zY2hlbWEvYnVpbGQvY2pzL2VudW1zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxvQkFBb0IsR0FBR0Esb0JBQW9CLEdBQUcsS0FBSztBQUNuRCxJQUFJRztBQUNILFVBQVVBLFlBQVk7SUFDbkJBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLFdBQVcsR0FBRyxFQUFFLEdBQUc7SUFDN0NBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLE1BQU0sR0FBRyxFQUFFLEdBQUc7SUFDeENBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLFNBQVMsR0FBRyxFQUFFLEdBQUc7QUFDL0MsR0FBR0EsZUFBZUgsUUFBUUcsWUFBWSxJQUFLSCxDQUFBQSxvQkFBb0IsR0FBRyxDQUFDO0FBQ25FLElBQUlFO0FBQ0gsVUFBVUEsWUFBWTtJQUNuQkEsWUFBWSxDQUFDQSxZQUFZLENBQUMsTUFBTSxHQUFHLEVBQUUsR0FBRztJQUN4Q0EsWUFBWSxDQUFDQSxZQUFZLENBQUMsVUFBVSxHQUFHLEVBQUUsR0FBRztJQUM1Q0EsWUFBWSxDQUFDQSxZQUFZLENBQUMsY0FBYyxHQUFHLEVBQUUsR0FBRztJQUNoREEsWUFBWSxDQUFDQSxZQUFZLENBQUMsWUFBWSxHQUFHLEVBQUUsR0FBRztJQUM5Q0EsWUFBWSxDQUFDQSxZQUFZLENBQUMsVUFBVSxHQUFHLEVBQUUsR0FBRztJQUM1Q0EsWUFBWSxDQUFDQSxZQUFZLENBQUMsYUFBYSxHQUFHLEVBQUUsR0FBRztJQUMvQ0EsWUFBWSxDQUFDQSxZQUFZLENBQUMsbUJBQW1CLEdBQUcsRUFBRSxHQUFHO0lBQ3JEQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxhQUFhLEdBQUcsRUFBRSxHQUFHO0lBQy9DQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxZQUFZLEdBQUcsRUFBRSxHQUFHO0lBQzlDQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxrQkFBa0IsR0FBRyxHQUFHLEdBQUc7SUFDckRBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLGdCQUFnQixHQUFHLEdBQUcsR0FBRztJQUNuREEsWUFBWSxDQUFDQSxZQUFZLENBQUMsa0JBQWtCLEdBQUcsR0FBRyxHQUFHO0lBQ3JEQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxnQkFBZ0IsR0FBRyxHQUFHLEdBQUc7SUFDbkRBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLGlCQUFpQixHQUFHLEdBQUcsR0FBRztJQUNwREEsWUFBWSxDQUFDQSxZQUFZLENBQUMsWUFBWSxHQUFHLEdBQUcsR0FBRztJQUMvQ0EsWUFBWSxDQUFDQSxZQUFZLENBQUMsZ0JBQWdCLEdBQUcsR0FBRyxHQUFHO0lBQ25EQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxnQkFBZ0IsR0FBRyxHQUFHLEdBQUc7SUFDbkRBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLGdCQUFnQixHQUFHLEdBQUcsR0FBRztJQUNuREEsWUFBWSxDQUFDQSxZQUFZLENBQUMsa0JBQWtCLEdBQUcsR0FBRyxHQUFHO0lBQ3JEQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxVQUFVLEdBQUcsR0FBRyxHQUFHO0lBQzdDQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxrQkFBa0IsR0FBRyxHQUFHLEdBQUc7SUFDckRBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLE9BQU8sR0FBRyxHQUFHLEdBQUc7SUFDMUNBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLFlBQVksR0FBRyxHQUFHLEdBQUc7SUFDL0NBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLFdBQVcsR0FBRyxHQUFHLEdBQUc7SUFDOUNBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLFdBQVcsR0FBRyxHQUFHLEdBQUc7SUFDOUNBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLE9BQU8sR0FBRyxHQUFHLEdBQUc7SUFDMUNBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLE9BQU8sR0FBRyxHQUFHLEdBQUc7QUFDOUMsR0FBR0EsZUFBZUYsUUFBUUUsWUFBWSxJQUFLRixDQUFBQSxvQkFBb0IsR0FBRyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktbWFrZXRwbGFjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9AcGVjdWxpYXIvYXNuMS1zY2hlbWEvYnVpbGQvY2pzL2VudW1zLmpzP2JhMTciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFzblByb3BUeXBlcyA9IGV4cG9ydHMuQXNuVHlwZVR5cGVzID0gdm9pZCAwO1xudmFyIEFzblR5cGVUeXBlcztcbihmdW5jdGlvbiAoQXNuVHlwZVR5cGVzKSB7XG4gICAgQXNuVHlwZVR5cGVzW0FzblR5cGVUeXBlc1tcIlNlcXVlbmNlXCJdID0gMF0gPSBcIlNlcXVlbmNlXCI7XG4gICAgQXNuVHlwZVR5cGVzW0FzblR5cGVUeXBlc1tcIlNldFwiXSA9IDFdID0gXCJTZXRcIjtcbiAgICBBc25UeXBlVHlwZXNbQXNuVHlwZVR5cGVzW1wiQ2hvaWNlXCJdID0gMl0gPSBcIkNob2ljZVwiO1xufSkoQXNuVHlwZVR5cGVzID0gZXhwb3J0cy5Bc25UeXBlVHlwZXMgfHwgKGV4cG9ydHMuQXNuVHlwZVR5cGVzID0ge30pKTtcbnZhciBBc25Qcm9wVHlwZXM7XG4oZnVuY3Rpb24gKEFzblByb3BUeXBlcykge1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJBbnlcIl0gPSAxXSA9IFwiQW55XCI7XG4gICAgQXNuUHJvcFR5cGVzW0FzblByb3BUeXBlc1tcIkJvb2xlYW5cIl0gPSAyXSA9IFwiQm9vbGVhblwiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJPY3RldFN0cmluZ1wiXSA9IDNdID0gXCJPY3RldFN0cmluZ1wiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJCaXRTdHJpbmdcIl0gPSA0XSA9IFwiQml0U3RyaW5nXCI7XG4gICAgQXNuUHJvcFR5cGVzW0FzblByb3BUeXBlc1tcIkludGVnZXJcIl0gPSA1XSA9IFwiSW50ZWdlclwiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJFbnVtZXJhdGVkXCJdID0gNl0gPSBcIkVudW1lcmF0ZWRcIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiT2JqZWN0SWRlbnRpZmllclwiXSA9IDddID0gXCJPYmplY3RJZGVudGlmaWVyXCI7XG4gICAgQXNuUHJvcFR5cGVzW0FzblByb3BUeXBlc1tcIlV0ZjhTdHJpbmdcIl0gPSA4XSA9IFwiVXRmOFN0cmluZ1wiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJCbXBTdHJpbmdcIl0gPSA5XSA9IFwiQm1wU3RyaW5nXCI7XG4gICAgQXNuUHJvcFR5cGVzW0FzblByb3BUeXBlc1tcIlVuaXZlcnNhbFN0cmluZ1wiXSA9IDEwXSA9IFwiVW5pdmVyc2FsU3RyaW5nXCI7XG4gICAgQXNuUHJvcFR5cGVzW0FzblByb3BUeXBlc1tcIk51bWVyaWNTdHJpbmdcIl0gPSAxMV0gPSBcIk51bWVyaWNTdHJpbmdcIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiUHJpbnRhYmxlU3RyaW5nXCJdID0gMTJdID0gXCJQcmludGFibGVTdHJpbmdcIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiVGVsZXRleFN0cmluZ1wiXSA9IDEzXSA9IFwiVGVsZXRleFN0cmluZ1wiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJWaWRlb3RleFN0cmluZ1wiXSA9IDE0XSA9IFwiVmlkZW90ZXhTdHJpbmdcIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiSUE1U3RyaW5nXCJdID0gMTVdID0gXCJJQTVTdHJpbmdcIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiR3JhcGhpY1N0cmluZ1wiXSA9IDE2XSA9IFwiR3JhcGhpY1N0cmluZ1wiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJWaXNpYmxlU3RyaW5nXCJdID0gMTddID0gXCJWaXNpYmxlU3RyaW5nXCI7XG4gICAgQXNuUHJvcFR5cGVzW0FzblByb3BUeXBlc1tcIkdlbmVyYWxTdHJpbmdcIl0gPSAxOF0gPSBcIkdlbmVyYWxTdHJpbmdcIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiQ2hhcmFjdGVyU3RyaW5nXCJdID0gMTldID0gXCJDaGFyYWN0ZXJTdHJpbmdcIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiVVRDVGltZVwiXSA9IDIwXSA9IFwiVVRDVGltZVwiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJHZW5lcmFsaXplZFRpbWVcIl0gPSAyMV0gPSBcIkdlbmVyYWxpemVkVGltZVwiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJEQVRFXCJdID0gMjJdID0gXCJEQVRFXCI7XG4gICAgQXNuUHJvcFR5cGVzW0FzblByb3BUeXBlc1tcIlRpbWVPZkRheVwiXSA9IDIzXSA9IFwiVGltZU9mRGF5XCI7XG4gICAgQXNuUHJvcFR5cGVzW0FzblByb3BUeXBlc1tcIkRhdGVUaW1lXCJdID0gMjRdID0gXCJEYXRlVGltZVwiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJEdXJhdGlvblwiXSA9IDI1XSA9IFwiRHVyYXRpb25cIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiVElNRVwiXSA9IDI2XSA9IFwiVElNRVwiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJOdWxsXCJdID0gMjddID0gXCJOdWxsXCI7XG59KShBc25Qcm9wVHlwZXMgPSBleHBvcnRzLkFzblByb3BUeXBlcyB8fCAoZXhwb3J0cy5Bc25Qcm9wVHlwZXMgPSB7fSkpO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQXNuUHJvcFR5cGVzIiwiQXNuVHlwZVR5cGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/enums.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/enums.js":
/*!***************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/enums.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AsnPropTypes = exports.AsnTypeTypes = void 0;\nvar AsnTypeTypes;\n(function(AsnTypeTypes) {\n    AsnTypeTypes[AsnTypeTypes[\"Sequence\"] = 0] = \"Sequence\";\n    AsnTypeTypes[AsnTypeTypes[\"Set\"] = 1] = \"Set\";\n    AsnTypeTypes[AsnTypeTypes[\"Choice\"] = 2] = \"Choice\";\n})(AsnTypeTypes = exports.AsnTypeTypes || (exports.AsnTypeTypes = {}));\nvar AsnPropTypes;\n(function(AsnPropTypes) {\n    AsnPropTypes[AsnPropTypes[\"Any\"] = 1] = \"Any\";\n    AsnPropTypes[AsnPropTypes[\"Boolean\"] = 2] = \"Boolean\";\n    AsnPropTypes[AsnPropTypes[\"OctetString\"] = 3] = \"OctetString\";\n    AsnPropTypes[AsnPropTypes[\"BitString\"] = 4] = \"BitString\";\n    AsnPropTypes[AsnPropTypes[\"Integer\"] = 5] = \"Integer\";\n    AsnPropTypes[AsnPropTypes[\"Enumerated\"] = 6] = \"Enumerated\";\n    AsnPropTypes[AsnPropTypes[\"ObjectIdentifier\"] = 7] = \"ObjectIdentifier\";\n    AsnPropTypes[AsnPropTypes[\"Utf8String\"] = 8] = \"Utf8String\";\n    AsnPropTypes[AsnPropTypes[\"BmpString\"] = 9] = \"BmpString\";\n    AsnPropTypes[AsnPropTypes[\"UniversalString\"] = 10] = \"UniversalString\";\n    AsnPropTypes[AsnPropTypes[\"NumericString\"] = 11] = \"NumericString\";\n    AsnPropTypes[AsnPropTypes[\"PrintableString\"] = 12] = \"PrintableString\";\n    AsnPropTypes[AsnPropTypes[\"TeletexString\"] = 13] = \"TeletexString\";\n    AsnPropTypes[AsnPropTypes[\"VideotexString\"] = 14] = \"VideotexString\";\n    AsnPropTypes[AsnPropTypes[\"IA5String\"] = 15] = \"IA5String\";\n    AsnPropTypes[AsnPropTypes[\"GraphicString\"] = 16] = \"GraphicString\";\n    AsnPropTypes[AsnPropTypes[\"VisibleString\"] = 17] = \"VisibleString\";\n    AsnPropTypes[AsnPropTypes[\"GeneralString\"] = 18] = \"GeneralString\";\n    AsnPropTypes[AsnPropTypes[\"CharacterString\"] = 19] = \"CharacterString\";\n    AsnPropTypes[AsnPropTypes[\"UTCTime\"] = 20] = \"UTCTime\";\n    AsnPropTypes[AsnPropTypes[\"GeneralizedTime\"] = 21] = \"GeneralizedTime\";\n    AsnPropTypes[AsnPropTypes[\"DATE\"] = 22] = \"DATE\";\n    AsnPropTypes[AsnPropTypes[\"TimeOfDay\"] = 23] = \"TimeOfDay\";\n    AsnPropTypes[AsnPropTypes[\"DateTime\"] = 24] = \"DateTime\";\n    AsnPropTypes[AsnPropTypes[\"Duration\"] = 25] = \"Duration\";\n    AsnPropTypes[AsnPropTypes[\"TIME\"] = 26] = \"TIME\";\n    AsnPropTypes[AsnPropTypes[\"Null\"] = 27] = \"Null\";\n})(AsnPropTypes = exports.AsnPropTypes || (exports.AsnPropTypes = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy9lbnVtcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsb0JBQW9CLEdBQUdBLG9CQUFvQixHQUFHLEtBQUs7QUFDbkQsSUFBSUc7QUFDSCxVQUFVQSxZQUFZO0lBQ25CQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxXQUFXLEdBQUcsRUFBRSxHQUFHO0lBQzdDQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxNQUFNLEdBQUcsRUFBRSxHQUFHO0lBQ3hDQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxTQUFTLEdBQUcsRUFBRSxHQUFHO0FBQy9DLEdBQUdBLGVBQWVILFFBQVFHLFlBQVksSUFBS0gsQ0FBQUEsb0JBQW9CLEdBQUcsQ0FBQztBQUNuRSxJQUFJRTtBQUNILFVBQVVBLFlBQVk7SUFDbkJBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLE1BQU0sR0FBRyxFQUFFLEdBQUc7SUFDeENBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLFVBQVUsR0FBRyxFQUFFLEdBQUc7SUFDNUNBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLGNBQWMsR0FBRyxFQUFFLEdBQUc7SUFDaERBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLFlBQVksR0FBRyxFQUFFLEdBQUc7SUFDOUNBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLFVBQVUsR0FBRyxFQUFFLEdBQUc7SUFDNUNBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLGFBQWEsR0FBRyxFQUFFLEdBQUc7SUFDL0NBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLG1CQUFtQixHQUFHLEVBQUUsR0FBRztJQUNyREEsWUFBWSxDQUFDQSxZQUFZLENBQUMsYUFBYSxHQUFHLEVBQUUsR0FBRztJQUMvQ0EsWUFBWSxDQUFDQSxZQUFZLENBQUMsWUFBWSxHQUFHLEVBQUUsR0FBRztJQUM5Q0EsWUFBWSxDQUFDQSxZQUFZLENBQUMsa0JBQWtCLEdBQUcsR0FBRyxHQUFHO0lBQ3JEQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxnQkFBZ0IsR0FBRyxHQUFHLEdBQUc7SUFDbkRBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLGtCQUFrQixHQUFHLEdBQUcsR0FBRztJQUNyREEsWUFBWSxDQUFDQSxZQUFZLENBQUMsZ0JBQWdCLEdBQUcsR0FBRyxHQUFHO0lBQ25EQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxpQkFBaUIsR0FBRyxHQUFHLEdBQUc7SUFDcERBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLFlBQVksR0FBRyxHQUFHLEdBQUc7SUFDL0NBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLGdCQUFnQixHQUFHLEdBQUcsR0FBRztJQUNuREEsWUFBWSxDQUFDQSxZQUFZLENBQUMsZ0JBQWdCLEdBQUcsR0FBRyxHQUFHO0lBQ25EQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxnQkFBZ0IsR0FBRyxHQUFHLEdBQUc7SUFDbkRBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLGtCQUFrQixHQUFHLEdBQUcsR0FBRztJQUNyREEsWUFBWSxDQUFDQSxZQUFZLENBQUMsVUFBVSxHQUFHLEdBQUcsR0FBRztJQUM3Q0EsWUFBWSxDQUFDQSxZQUFZLENBQUMsa0JBQWtCLEdBQUcsR0FBRyxHQUFHO0lBQ3JEQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxPQUFPLEdBQUcsR0FBRyxHQUFHO0lBQzFDQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxZQUFZLEdBQUcsR0FBRyxHQUFHO0lBQy9DQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxXQUFXLEdBQUcsR0FBRyxHQUFHO0lBQzlDQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxXQUFXLEdBQUcsR0FBRyxHQUFHO0lBQzlDQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxPQUFPLEdBQUcsR0FBRyxHQUFHO0lBQzFDQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxPQUFPLEdBQUcsR0FBRyxHQUFHO0FBQzlDLEdBQUdBLGVBQWVGLFFBQVFFLFlBQVksSUFBS0YsQ0FBQUEsb0JBQW9CLEdBQUcsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLW1ha2V0cGxhY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy9lbnVtcy5qcz9iYTE3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Bc25Qcm9wVHlwZXMgPSBleHBvcnRzLkFzblR5cGVUeXBlcyA9IHZvaWQgMDtcbnZhciBBc25UeXBlVHlwZXM7XG4oZnVuY3Rpb24gKEFzblR5cGVUeXBlcykge1xuICAgIEFzblR5cGVUeXBlc1tBc25UeXBlVHlwZXNbXCJTZXF1ZW5jZVwiXSA9IDBdID0gXCJTZXF1ZW5jZVwiO1xuICAgIEFzblR5cGVUeXBlc1tBc25UeXBlVHlwZXNbXCJTZXRcIl0gPSAxXSA9IFwiU2V0XCI7XG4gICAgQXNuVHlwZVR5cGVzW0FzblR5cGVUeXBlc1tcIkNob2ljZVwiXSA9IDJdID0gXCJDaG9pY2VcIjtcbn0pKEFzblR5cGVUeXBlcyA9IGV4cG9ydHMuQXNuVHlwZVR5cGVzIHx8IChleHBvcnRzLkFzblR5cGVUeXBlcyA9IHt9KSk7XG52YXIgQXNuUHJvcFR5cGVzO1xuKGZ1bmN0aW9uIChBc25Qcm9wVHlwZXMpIHtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiQW55XCJdID0gMV0gPSBcIkFueVwiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJCb29sZWFuXCJdID0gMl0gPSBcIkJvb2xlYW5cIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiT2N0ZXRTdHJpbmdcIl0gPSAzXSA9IFwiT2N0ZXRTdHJpbmdcIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiQml0U3RyaW5nXCJdID0gNF0gPSBcIkJpdFN0cmluZ1wiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJJbnRlZ2VyXCJdID0gNV0gPSBcIkludGVnZXJcIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiRW51bWVyYXRlZFwiXSA9IDZdID0gXCJFbnVtZXJhdGVkXCI7XG4gICAgQXNuUHJvcFR5cGVzW0FzblByb3BUeXBlc1tcIk9iamVjdElkZW50aWZpZXJcIl0gPSA3XSA9IFwiT2JqZWN0SWRlbnRpZmllclwiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJVdGY4U3RyaW5nXCJdID0gOF0gPSBcIlV0ZjhTdHJpbmdcIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiQm1wU3RyaW5nXCJdID0gOV0gPSBcIkJtcFN0cmluZ1wiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJVbml2ZXJzYWxTdHJpbmdcIl0gPSAxMF0gPSBcIlVuaXZlcnNhbFN0cmluZ1wiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJOdW1lcmljU3RyaW5nXCJdID0gMTFdID0gXCJOdW1lcmljU3RyaW5nXCI7XG4gICAgQXNuUHJvcFR5cGVzW0FzblByb3BUeXBlc1tcIlByaW50YWJsZVN0cmluZ1wiXSA9IDEyXSA9IFwiUHJpbnRhYmxlU3RyaW5nXCI7XG4gICAgQXNuUHJvcFR5cGVzW0FzblByb3BUeXBlc1tcIlRlbGV0ZXhTdHJpbmdcIl0gPSAxM10gPSBcIlRlbGV0ZXhTdHJpbmdcIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiVmlkZW90ZXhTdHJpbmdcIl0gPSAxNF0gPSBcIlZpZGVvdGV4U3RyaW5nXCI7XG4gICAgQXNuUHJvcFR5cGVzW0FzblByb3BUeXBlc1tcIklBNVN0cmluZ1wiXSA9IDE1XSA9IFwiSUE1U3RyaW5nXCI7XG4gICAgQXNuUHJvcFR5cGVzW0FzblByb3BUeXBlc1tcIkdyYXBoaWNTdHJpbmdcIl0gPSAxNl0gPSBcIkdyYXBoaWNTdHJpbmdcIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiVmlzaWJsZVN0cmluZ1wiXSA9IDE3XSA9IFwiVmlzaWJsZVN0cmluZ1wiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJHZW5lcmFsU3RyaW5nXCJdID0gMThdID0gXCJHZW5lcmFsU3RyaW5nXCI7XG4gICAgQXNuUHJvcFR5cGVzW0FzblByb3BUeXBlc1tcIkNoYXJhY3RlclN0cmluZ1wiXSA9IDE5XSA9IFwiQ2hhcmFjdGVyU3RyaW5nXCI7XG4gICAgQXNuUHJvcFR5cGVzW0FzblByb3BUeXBlc1tcIlVUQ1RpbWVcIl0gPSAyMF0gPSBcIlVUQ1RpbWVcIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiR2VuZXJhbGl6ZWRUaW1lXCJdID0gMjFdID0gXCJHZW5lcmFsaXplZFRpbWVcIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiREFURVwiXSA9IDIyXSA9IFwiREFURVwiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJUaW1lT2ZEYXlcIl0gPSAyM10gPSBcIlRpbWVPZkRheVwiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJEYXRlVGltZVwiXSA9IDI0XSA9IFwiRGF0ZVRpbWVcIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiRHVyYXRpb25cIl0gPSAyNV0gPSBcIkR1cmF0aW9uXCI7XG4gICAgQXNuUHJvcFR5cGVzW0FzblByb3BUeXBlc1tcIlRJTUVcIl0gPSAyNl0gPSBcIlRJTUVcIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiTnVsbFwiXSA9IDI3XSA9IFwiTnVsbFwiO1xufSkoQXNuUHJvcFR5cGVzID0gZXhwb3J0cy5Bc25Qcm9wVHlwZXMgfHwgKGV4cG9ydHMuQXNuUHJvcFR5cGVzID0ge30pKTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkFzblByb3BUeXBlcyIsIkFzblR5cGVUeXBlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/enums.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/errors/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/errors/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(action-browser)/./node_modules/tslib/tslib.es6.mjs\");\ntslib_1.__exportStar(__webpack_require__(/*! ./schema_validation */ \"(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/errors/schema_validation.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGVjdWxpYXIvYXNuMS1zY2hlbWEvYnVpbGQvY2pzL2Vycm9ycy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxVQUFVQyxtQkFBT0EsQ0FBQyxrRUFBTztBQUMvQkQsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyx3SEFBcUIsR0FBR0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1tYWtldHBsYWNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL0BwZWN1bGlhci9hc24xLXNjaGVtYS9idWlsZC9janMvZXJyb3JzL2luZGV4LmpzP2UxY2MiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vc2NoZW1hX3ZhbGlkYXRpb25cIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidHNsaWJfMSIsInJlcXVpcmUiLCJfX2V4cG9ydFN0YXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/errors/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/errors/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/errors/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\ntslib_1.__exportStar(__webpack_require__(/*! ./schema_validation */ \"(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/errors/schema_validation.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy9lcnJvcnMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsVUFBVUMsbUJBQU9BLENBQUMsdURBQU87QUFDL0JELFFBQVFFLFlBQVksQ0FBQ0QsbUJBQU9BLENBQUMsNkdBQXFCLEdBQUdIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktbWFrZXRwbGFjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9AcGVjdWxpYXIvYXNuMS1zY2hlbWEvYnVpbGQvY2pzL2Vycm9ycy9pbmRleC5qcz9lMWNjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3NjaGVtYV92YWxpZGF0aW9uXCIpLCBleHBvcnRzKTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRzbGliXzEiLCJyZXF1aXJlIiwiX19leHBvcnRTdGFyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/errors/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/errors/schema_validation.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/errors/schema_validation.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AsnSchemaValidationError = void 0;\nclass AsnSchemaValidationError extends Error {\n    constructor(){\n        super(...arguments);\n        this.schemas = [];\n    }\n}\nexports.AsnSchemaValidationError = AsnSchemaValidationError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGVjdWxpYXIvYXNuMS1zY2hlbWEvYnVpbGQvY2pzL2Vycm9ycy9zY2hlbWFfdmFsaWRhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZ0NBQWdDLEdBQUcsS0FBSztBQUN4QyxNQUFNRSxpQ0FBaUNDO0lBQ25DQyxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0MsT0FBTyxHQUFHLEVBQUU7SUFDckI7QUFDSjtBQUNBTixnQ0FBZ0MsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1tYWtldHBsYWNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL0BwZWN1bGlhci9hc24xLXNjaGVtYS9idWlsZC9janMvZXJyb3JzL3NjaGVtYV92YWxpZGF0aW9uLmpzPzZjYzgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFzblNjaGVtYVZhbGlkYXRpb25FcnJvciA9IHZvaWQgMDtcbmNsYXNzIEFzblNjaGVtYVZhbGlkYXRpb25FcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5zY2hlbWFzID0gW107XG4gICAgfVxufVxuZXhwb3J0cy5Bc25TY2hlbWFWYWxpZGF0aW9uRXJyb3IgPSBBc25TY2hlbWFWYWxpZGF0aW9uRXJyb3I7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJBc25TY2hlbWFWYWxpZGF0aW9uRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwic2NoZW1hcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/errors/schema_validation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/errors/schema_validation.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/errors/schema_validation.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AsnSchemaValidationError = void 0;\nclass AsnSchemaValidationError extends Error {\n    constructor(){\n        super(...arguments);\n        this.schemas = [];\n    }\n}\nexports.AsnSchemaValidationError = AsnSchemaValidationError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy9lcnJvcnMvc2NoZW1hX3ZhbGlkYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGdDQUFnQyxHQUFHLEtBQUs7QUFDeEMsTUFBTUUsaUNBQWlDQztJQUNuQ0MsYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNDLE9BQU8sR0FBRyxFQUFFO0lBQ3JCO0FBQ0o7QUFDQU4sZ0NBQWdDLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktbWFrZXRwbGFjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9AcGVjdWxpYXIvYXNuMS1zY2hlbWEvYnVpbGQvY2pzL2Vycm9ycy9zY2hlbWFfdmFsaWRhdGlvbi5qcz82Y2M4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Bc25TY2hlbWFWYWxpZGF0aW9uRXJyb3IgPSB2b2lkIDA7XG5jbGFzcyBBc25TY2hlbWFWYWxpZGF0aW9uRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuc2NoZW1hcyA9IFtdO1xuICAgIH1cbn1cbmV4cG9ydHMuQXNuU2NoZW1hVmFsaWRhdGlvbkVycm9yID0gQXNuU2NoZW1hVmFsaWRhdGlvbkVycm9yO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQXNuU2NoZW1hVmFsaWRhdGlvbkVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsInNjaGVtYXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/errors/schema_validation.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/helper.js":
/*!****************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/helper.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isArrayEqual = exports.isTypeOfArray = exports.isConvertible = void 0;\nfunction isConvertible(target) {\n    if (typeof target === \"function\" && target.prototype) {\n        if (target.prototype.toASN && target.prototype.fromASN) {\n            return true;\n        } else {\n            return isConvertible(target.prototype);\n        }\n    } else {\n        return !!(target && typeof target === \"object\" && \"toASN\" in target && \"fromASN\" in target);\n    }\n}\nexports.isConvertible = isConvertible;\nfunction isTypeOfArray(target) {\n    var _a;\n    if (target) {\n        const proto = Object.getPrototypeOf(target);\n        if (((_a = proto === null || proto === void 0 ? void 0 : proto.prototype) === null || _a === void 0 ? void 0 : _a.constructor) === Array) {\n            return true;\n        }\n        return isTypeOfArray(proto);\n    }\n    return false;\n}\nexports.isTypeOfArray = isTypeOfArray;\nfunction isArrayEqual(bytes1, bytes2) {\n    if (!(bytes1 && bytes2)) {\n        return false;\n    }\n    if (bytes1.byteLength !== bytes2.byteLength) {\n        return false;\n    }\n    const b1 = new Uint8Array(bytes1);\n    const b2 = new Uint8Array(bytes2);\n    for(let i = 0; i < bytes1.byteLength; i++){\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.isArrayEqual = isArrayEqual;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGVjdWxpYXIvYXNuMS1zY2hlbWEvYnVpbGQvY2pzL2hlbHBlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsb0JBQW9CLEdBQUdBLHFCQUFxQixHQUFHQSxxQkFBcUIsR0FBRyxLQUFLO0FBQzVFLFNBQVNJLGNBQWNDLE1BQU07SUFDekIsSUFBSSxPQUFPQSxXQUFXLGNBQWNBLE9BQU9DLFNBQVMsRUFBRTtRQUNsRCxJQUFJRCxPQUFPQyxTQUFTLENBQUNDLEtBQUssSUFBSUYsT0FBT0MsU0FBUyxDQUFDRSxPQUFPLEVBQUU7WUFDcEQsT0FBTztRQUNYLE9BQ0s7WUFDRCxPQUFPSixjQUFjQyxPQUFPQyxTQUFTO1FBQ3pDO0lBQ0osT0FDSztRQUNELE9BQU8sQ0FBQyxDQUFFRCxDQUFBQSxVQUFVLE9BQU9BLFdBQVcsWUFBWSxXQUFXQSxVQUFVLGFBQWFBLE1BQUs7SUFDN0Y7QUFDSjtBQUNBTCxxQkFBcUIsR0FBR0k7QUFDeEIsU0FBU0QsY0FBY0UsTUFBTTtJQUN6QixJQUFJSTtJQUNKLElBQUlKLFFBQVE7UUFDUixNQUFNSyxRQUFRWixPQUFPYSxjQUFjLENBQUNOO1FBQ3BDLElBQUksQ0FBQyxDQUFDSSxLQUFLQyxVQUFVLFFBQVFBLFVBQVUsS0FBSyxJQUFJLEtBQUssSUFBSUEsTUFBTUosU0FBUyxNQUFNLFFBQVFHLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR0csV0FBVyxNQUFNQyxPQUFPO1lBQ3RJLE9BQU87UUFDWDtRQUNBLE9BQU9WLGNBQWNPO0lBQ3pCO0lBQ0EsT0FBTztBQUNYO0FBQ0FWLHFCQUFxQixHQUFHRztBQUN4QixTQUFTRCxhQUFhWSxNQUFNLEVBQUVDLE1BQU07SUFDaEMsSUFBSSxDQUFFRCxDQUFBQSxVQUFVQyxNQUFLLEdBQUk7UUFDckIsT0FBTztJQUNYO0lBQ0EsSUFBSUQsT0FBT0UsVUFBVSxLQUFLRCxPQUFPQyxVQUFVLEVBQUU7UUFDekMsT0FBTztJQUNYO0lBQ0EsTUFBTUMsS0FBSyxJQUFJQyxXQUFXSjtJQUMxQixNQUFNSyxLQUFLLElBQUlELFdBQVdIO0lBQzFCLElBQUssSUFBSUssSUFBSSxHQUFHQSxJQUFJTixPQUFPRSxVQUFVLEVBQUVJLElBQUs7UUFDeEMsSUFBSUgsRUFBRSxDQUFDRyxFQUFFLEtBQUtELEVBQUUsQ0FBQ0MsRUFBRSxFQUFFO1lBQ2pCLE9BQU87UUFDWDtJQUNKO0lBQ0EsT0FBTztBQUNYO0FBQ0FwQixvQkFBb0IsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1tYWtldHBsYWNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL0BwZWN1bGlhci9hc24xLXNjaGVtYS9idWlsZC9janMvaGVscGVyLmpzP2YxOTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzQXJyYXlFcXVhbCA9IGV4cG9ydHMuaXNUeXBlT2ZBcnJheSA9IGV4cG9ydHMuaXNDb252ZXJ0aWJsZSA9IHZvaWQgMDtcbmZ1bmN0aW9uIGlzQ29udmVydGlibGUodGFyZ2V0KSB7XG4gICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09IFwiZnVuY3Rpb25cIiAmJiB0YXJnZXQucHJvdG90eXBlKSB7XG4gICAgICAgIGlmICh0YXJnZXQucHJvdG90eXBlLnRvQVNOICYmIHRhcmdldC5wcm90b3R5cGUuZnJvbUFTTikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaXNDb252ZXJ0aWJsZSh0YXJnZXQucHJvdG90eXBlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuICEhKHRhcmdldCAmJiB0eXBlb2YgdGFyZ2V0ID09PSBcIm9iamVjdFwiICYmIFwidG9BU05cIiBpbiB0YXJnZXQgJiYgXCJmcm9tQVNOXCIgaW4gdGFyZ2V0KTtcbiAgICB9XG59XG5leHBvcnRzLmlzQ29udmVydGlibGUgPSBpc0NvbnZlcnRpYmxlO1xuZnVuY3Rpb24gaXNUeXBlT2ZBcnJheSh0YXJnZXQpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKHRhcmdldCkge1xuICAgICAgICBjb25zdCBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpO1xuICAgICAgICBpZiAoKChfYSA9IHByb3RvID09PSBudWxsIHx8IHByb3RvID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwcm90by5wcm90b3R5cGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jb25zdHJ1Y3RvcikgPT09IEFycmF5KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNUeXBlT2ZBcnJheShwcm90byk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMuaXNUeXBlT2ZBcnJheSA9IGlzVHlwZU9mQXJyYXk7XG5mdW5jdGlvbiBpc0FycmF5RXF1YWwoYnl0ZXMxLCBieXRlczIpIHtcbiAgICBpZiAoIShieXRlczEgJiYgYnl0ZXMyKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChieXRlczEuYnl0ZUxlbmd0aCAhPT0gYnl0ZXMyLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBiMSA9IG5ldyBVaW50OEFycmF5KGJ5dGVzMSk7XG4gICAgY29uc3QgYjIgPSBuZXcgVWludDhBcnJheShieXRlczIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMxLmJ5dGVMZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYjFbaV0gIT09IGIyW2ldKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5leHBvcnRzLmlzQXJyYXlFcXVhbCA9IGlzQXJyYXlFcXVhbDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlzQXJyYXlFcXVhbCIsImlzVHlwZU9mQXJyYXkiLCJpc0NvbnZlcnRpYmxlIiwidGFyZ2V0IiwicHJvdG90eXBlIiwidG9BU04iLCJmcm9tQVNOIiwiX2EiLCJwcm90byIsImdldFByb3RvdHlwZU9mIiwiY29uc3RydWN0b3IiLCJBcnJheSIsImJ5dGVzMSIsImJ5dGVzMiIsImJ5dGVMZW5ndGgiLCJiMSIsIlVpbnQ4QXJyYXkiLCJiMiIsImkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/helper.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/helper.js":
/*!****************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/helper.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isArrayEqual = exports.isTypeOfArray = exports.isConvertible = void 0;\nfunction isConvertible(target) {\n    if (typeof target === \"function\" && target.prototype) {\n        if (target.prototype.toASN && target.prototype.fromASN) {\n            return true;\n        } else {\n            return isConvertible(target.prototype);\n        }\n    } else {\n        return !!(target && typeof target === \"object\" && \"toASN\" in target && \"fromASN\" in target);\n    }\n}\nexports.isConvertible = isConvertible;\nfunction isTypeOfArray(target) {\n    var _a;\n    if (target) {\n        const proto = Object.getPrototypeOf(target);\n        if (((_a = proto === null || proto === void 0 ? void 0 : proto.prototype) === null || _a === void 0 ? void 0 : _a.constructor) === Array) {\n            return true;\n        }\n        return isTypeOfArray(proto);\n    }\n    return false;\n}\nexports.isTypeOfArray = isTypeOfArray;\nfunction isArrayEqual(bytes1, bytes2) {\n    if (!(bytes1 && bytes2)) {\n        return false;\n    }\n    if (bytes1.byteLength !== bytes2.byteLength) {\n        return false;\n    }\n    const b1 = new Uint8Array(bytes1);\n    const b2 = new Uint8Array(bytes2);\n    for(let i = 0; i < bytes1.byteLength; i++){\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.isArrayEqual = isArrayEqual;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy9oZWxwZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG9CQUFvQixHQUFHQSxxQkFBcUIsR0FBR0EscUJBQXFCLEdBQUcsS0FBSztBQUM1RSxTQUFTSSxjQUFjQyxNQUFNO0lBQ3pCLElBQUksT0FBT0EsV0FBVyxjQUFjQSxPQUFPQyxTQUFTLEVBQUU7UUFDbEQsSUFBSUQsT0FBT0MsU0FBUyxDQUFDQyxLQUFLLElBQUlGLE9BQU9DLFNBQVMsQ0FBQ0UsT0FBTyxFQUFFO1lBQ3BELE9BQU87UUFDWCxPQUNLO1lBQ0QsT0FBT0osY0FBY0MsT0FBT0MsU0FBUztRQUN6QztJQUNKLE9BQ0s7UUFDRCxPQUFPLENBQUMsQ0FBRUQsQ0FBQUEsVUFBVSxPQUFPQSxXQUFXLFlBQVksV0FBV0EsVUFBVSxhQUFhQSxNQUFLO0lBQzdGO0FBQ0o7QUFDQUwscUJBQXFCLEdBQUdJO0FBQ3hCLFNBQVNELGNBQWNFLE1BQU07SUFDekIsSUFBSUk7SUFDSixJQUFJSixRQUFRO1FBQ1IsTUFBTUssUUFBUVosT0FBT2EsY0FBYyxDQUFDTjtRQUNwQyxJQUFJLENBQUMsQ0FBQ0ksS0FBS0MsVUFBVSxRQUFRQSxVQUFVLEtBQUssSUFBSSxLQUFLLElBQUlBLE1BQU1KLFNBQVMsTUFBTSxRQUFRRyxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdHLFdBQVcsTUFBTUMsT0FBTztZQUN0SSxPQUFPO1FBQ1g7UUFDQSxPQUFPVixjQUFjTztJQUN6QjtJQUNBLE9BQU87QUFDWDtBQUNBVixxQkFBcUIsR0FBR0c7QUFDeEIsU0FBU0QsYUFBYVksTUFBTSxFQUFFQyxNQUFNO0lBQ2hDLElBQUksQ0FBRUQsQ0FBQUEsVUFBVUMsTUFBSyxHQUFJO1FBQ3JCLE9BQU87SUFDWDtJQUNBLElBQUlELE9BQU9FLFVBQVUsS0FBS0QsT0FBT0MsVUFBVSxFQUFFO1FBQ3pDLE9BQU87SUFDWDtJQUNBLE1BQU1DLEtBQUssSUFBSUMsV0FBV0o7SUFDMUIsTUFBTUssS0FBSyxJQUFJRCxXQUFXSDtJQUMxQixJQUFLLElBQUlLLElBQUksR0FBR0EsSUFBSU4sT0FBT0UsVUFBVSxFQUFFSSxJQUFLO1FBQ3hDLElBQUlILEVBQUUsQ0FBQ0csRUFBRSxLQUFLRCxFQUFFLENBQUNDLEVBQUUsRUFBRTtZQUNqQixPQUFPO1FBQ1g7SUFDSjtJQUNBLE9BQU87QUFDWDtBQUNBcEIsb0JBQW9CLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktbWFrZXRwbGFjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9AcGVjdWxpYXIvYXNuMS1zY2hlbWEvYnVpbGQvY2pzL2hlbHBlci5qcz9mMTkyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0FycmF5RXF1YWwgPSBleHBvcnRzLmlzVHlwZU9mQXJyYXkgPSBleHBvcnRzLmlzQ29udmVydGlibGUgPSB2b2lkIDA7XG5mdW5jdGlvbiBpc0NvbnZlcnRpYmxlKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSBcImZ1bmN0aW9uXCIgJiYgdGFyZ2V0LnByb3RvdHlwZSkge1xuICAgICAgICBpZiAodGFyZ2V0LnByb3RvdHlwZS50b0FTTiAmJiB0YXJnZXQucHJvdG90eXBlLmZyb21BU04pIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGlzQ29udmVydGlibGUodGFyZ2V0LnByb3RvdHlwZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiAhISh0YXJnZXQgJiYgdHlwZW9mIHRhcmdldCA9PT0gXCJvYmplY3RcIiAmJiBcInRvQVNOXCIgaW4gdGFyZ2V0ICYmIFwiZnJvbUFTTlwiIGluIHRhcmdldCk7XG4gICAgfVxufVxuZXhwb3J0cy5pc0NvbnZlcnRpYmxlID0gaXNDb252ZXJ0aWJsZTtcbmZ1bmN0aW9uIGlzVHlwZU9mQXJyYXkodGFyZ2V0KSB7XG4gICAgdmFyIF9hO1xuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgY29uc3QgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KTtcbiAgICAgICAgaWYgKCgoX2EgPSBwcm90byA9PT0gbnVsbCB8fCBwcm90byA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJvdG8ucHJvdG90eXBlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29uc3RydWN0b3IpID09PSBBcnJheSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzVHlwZU9mQXJyYXkocHJvdG8pO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnRzLmlzVHlwZU9mQXJyYXkgPSBpc1R5cGVPZkFycmF5O1xuZnVuY3Rpb24gaXNBcnJheUVxdWFsKGJ5dGVzMSwgYnl0ZXMyKSB7XG4gICAgaWYgKCEoYnl0ZXMxICYmIGJ5dGVzMikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoYnl0ZXMxLmJ5dGVMZW5ndGggIT09IGJ5dGVzMi5ieXRlTGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgYjEgPSBuZXcgVWludDhBcnJheShieXRlczEpO1xuICAgIGNvbnN0IGIyID0gbmV3IFVpbnQ4QXJyYXkoYnl0ZXMyKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzMS5ieXRlTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGIxW2ldICE9PSBiMltpXSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZXhwb3J0cy5pc0FycmF5RXF1YWwgPSBpc0FycmF5RXF1YWw7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpc0FycmF5RXF1YWwiLCJpc1R5cGVPZkFycmF5IiwiaXNDb252ZXJ0aWJsZSIsInRhcmdldCIsInByb3RvdHlwZSIsInRvQVNOIiwiZnJvbUFTTiIsIl9hIiwicHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsImNvbnN0cnVjdG9yIiwiQXJyYXkiLCJieXRlczEiLCJieXRlczIiLCJieXRlTGVuZ3RoIiwiYjEiLCJVaW50OEFycmF5IiwiYjIiLCJpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/helper.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AsnSerializer = exports.AsnParser = exports.AsnPropTypes = exports.AsnTypeTypes = exports.AsnSetType = exports.AsnSequenceType = exports.AsnChoiceType = exports.AsnType = exports.AsnProp = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(action-browser)/./node_modules/tslib/tslib.es6.mjs\");\ntslib_1.__exportStar(__webpack_require__(/*! ./converters */ \"(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/converters.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./types/index */ \"(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/types/index.js\"), exports);\nvar decorators_1 = __webpack_require__(/*! ./decorators */ \"(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/decorators.js\");\nObject.defineProperty(exports, \"AsnProp\", ({\n    enumerable: true,\n    get: function() {\n        return decorators_1.AsnProp;\n    }\n}));\nObject.defineProperty(exports, \"AsnType\", ({\n    enumerable: true,\n    get: function() {\n        return decorators_1.AsnType;\n    }\n}));\nObject.defineProperty(exports, \"AsnChoiceType\", ({\n    enumerable: true,\n    get: function() {\n        return decorators_1.AsnChoiceType;\n    }\n}));\nObject.defineProperty(exports, \"AsnSequenceType\", ({\n    enumerable: true,\n    get: function() {\n        return decorators_1.AsnSequenceType;\n    }\n}));\nObject.defineProperty(exports, \"AsnSetType\", ({\n    enumerable: true,\n    get: function() {\n        return decorators_1.AsnSetType;\n    }\n}));\nvar enums_1 = __webpack_require__(/*! ./enums */ \"(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/enums.js\");\nObject.defineProperty(exports, \"AsnTypeTypes\", ({\n    enumerable: true,\n    get: function() {\n        return enums_1.AsnTypeTypes;\n    }\n}));\nObject.defineProperty(exports, \"AsnPropTypes\", ({\n    enumerable: true,\n    get: function() {\n        return enums_1.AsnPropTypes;\n    }\n}));\nvar parser_1 = __webpack_require__(/*! ./parser */ \"(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/parser.js\");\nObject.defineProperty(exports, \"AsnParser\", ({\n    enumerable: true,\n    get: function() {\n        return parser_1.AsnParser;\n    }\n}));\nvar serializer_1 = __webpack_require__(/*! ./serializer */ \"(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/serializer.js\");\nObject.defineProperty(exports, \"AsnSerializer\", ({\n    enumerable: true,\n    get: function() {\n        return serializer_1.AsnSerializer;\n    }\n}));\ntslib_1.__exportStar(__webpack_require__(/*! ./errors */ \"(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/errors/index.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./objects */ \"(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/objects.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./convert */ \"(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/convert.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGVjdWxpYXIvYXNuMS1zY2hlbWEvYnVpbGQvY2pzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxxQkFBcUIsR0FBR0EsaUJBQWlCLEdBQUdBLG9CQUFvQixHQUFHQSxvQkFBb0IsR0FBR0Esa0JBQWtCLEdBQUdBLHVCQUF1QixHQUFHQSxxQkFBcUIsR0FBR0EsZUFBZSxHQUFHQSxlQUFlLEdBQUcsS0FBSztBQUMxTSxNQUFNVyxVQUFVQyxtQkFBT0EsQ0FBQyxrRUFBTztBQUMvQkQsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyxtR0FBYyxHQUFHWjtBQUM5Q1csUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyxxR0FBZSxHQUFHWjtBQUMvQyxJQUFJYyxlQUFlRixtQkFBT0EsQ0FBQyxtR0FBYztBQUN6Q2QsMkNBQTBDO0lBQUVpQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRixhQUFhSixPQUFPO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDbEhaLDJDQUEwQztJQUFFaUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0YsYUFBYUwsT0FBTztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2xIWCxpREFBZ0Q7SUFBRWlCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9GLGFBQWFOLGFBQWE7SUFBRTtBQUFFLENBQUMsRUFBQztBQUM5SFYsbURBQWtEO0lBQUVpQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRixhQUFhUCxlQUFlO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDbElULDhDQUE2QztJQUFFaUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0YsYUFBYVIsVUFBVTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3hILElBQUlXLFVBQVVMLG1CQUFPQSxDQUFDLHlGQUFTO0FBQy9CZCxnREFBK0M7SUFBRWlCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9DLFFBQVFaLFlBQVk7SUFBRTtBQUFFLENBQUMsRUFBQztBQUN2SFAsZ0RBQStDO0lBQUVpQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPQyxRQUFRYixZQUFZO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDdkgsSUFBSWMsV0FBV04sbUJBQU9BLENBQUMsMkZBQVU7QUFDakNkLDZDQUE0QztJQUFFaUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0UsU0FBU2YsU0FBUztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2xILElBQUlnQixlQUFlUCxtQkFBT0EsQ0FBQyxtR0FBYztBQUN6Q2QsaURBQWdEO0lBQUVpQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRyxhQUFhakIsYUFBYTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzlIUyxRQUFRRSxZQUFZLENBQUNELG1CQUFPQSxDQUFDLGlHQUFVLEdBQUdaO0FBQzFDVyxRQUFRRSxZQUFZLENBQUNELG1CQUFPQSxDQUFDLDZGQUFXLEdBQUdaO0FBQzNDVyxRQUFRRSxZQUFZLENBQUNELG1CQUFPQSxDQUFDLDZGQUFXLEdBQUdaIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktbWFrZXRwbGFjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9AcGVjdWxpYXIvYXNuMS1zY2hlbWEvYnVpbGQvY2pzL2luZGV4LmpzPzcyOTciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFzblNlcmlhbGl6ZXIgPSBleHBvcnRzLkFzblBhcnNlciA9IGV4cG9ydHMuQXNuUHJvcFR5cGVzID0gZXhwb3J0cy5Bc25UeXBlVHlwZXMgPSBleHBvcnRzLkFzblNldFR5cGUgPSBleHBvcnRzLkFzblNlcXVlbmNlVHlwZSA9IGV4cG9ydHMuQXNuQ2hvaWNlVHlwZSA9IGV4cG9ydHMuQXNuVHlwZSA9IGV4cG9ydHMuQXNuUHJvcCA9IHZvaWQgMDtcbmNvbnN0IHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb252ZXJ0ZXJzXCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3R5cGVzL2luZGV4XCIpLCBleHBvcnRzKTtcbnZhciBkZWNvcmF0b3JzXzEgPSByZXF1aXJlKFwiLi9kZWNvcmF0b3JzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQXNuUHJvcFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVjb3JhdG9yc18xLkFzblByb3A7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBc25UeXBlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWNvcmF0b3JzXzEuQXNuVHlwZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFzbkNob2ljZVR5cGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlY29yYXRvcnNfMS5Bc25DaG9pY2VUeXBlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQXNuU2VxdWVuY2VUeXBlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWNvcmF0b3JzXzEuQXNuU2VxdWVuY2VUeXBlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQXNuU2V0VHlwZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVjb3JhdG9yc18xLkFzblNldFR5cGU7IH0gfSk7XG52YXIgZW51bXNfMSA9IHJlcXVpcmUoXCIuL2VudW1zXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQXNuVHlwZVR5cGVzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlbnVtc18xLkFzblR5cGVUeXBlczsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFzblByb3BUeXBlc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZW51bXNfMS5Bc25Qcm9wVHlwZXM7IH0gfSk7XG52YXIgcGFyc2VyXzEgPSByZXF1aXJlKFwiLi9wYXJzZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBc25QYXJzZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBhcnNlcl8xLkFzblBhcnNlcjsgfSB9KTtcbnZhciBzZXJpYWxpemVyXzEgPSByZXF1aXJlKFwiLi9zZXJpYWxpemVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQXNuU2VyaWFsaXplclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2VyaWFsaXplcl8xLkFzblNlcmlhbGl6ZXI7IH0gfSk7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9lcnJvcnNcIiksIGV4cG9ydHMpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vb2JqZWN0c1wiKSwgZXhwb3J0cyk7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb252ZXJ0XCIpLCBleHBvcnRzKTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkFzblNlcmlhbGl6ZXIiLCJBc25QYXJzZXIiLCJBc25Qcm9wVHlwZXMiLCJBc25UeXBlVHlwZXMiLCJBc25TZXRUeXBlIiwiQXNuU2VxdWVuY2VUeXBlIiwiQXNuQ2hvaWNlVHlwZSIsIkFzblR5cGUiLCJBc25Qcm9wIiwidHNsaWJfMSIsInJlcXVpcmUiLCJfX2V4cG9ydFN0YXIiLCJkZWNvcmF0b3JzXzEiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZW51bXNfMSIsInBhcnNlcl8xIiwic2VyaWFsaXplcl8xIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AsnSerializer = exports.AsnParser = exports.AsnPropTypes = exports.AsnTypeTypes = exports.AsnSetType = exports.AsnSequenceType = exports.AsnChoiceType = exports.AsnType = exports.AsnProp = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\ntslib_1.__exportStar(__webpack_require__(/*! ./converters */ \"(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/converters.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./types/index */ \"(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/types/index.js\"), exports);\nvar decorators_1 = __webpack_require__(/*! ./decorators */ \"(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/decorators.js\");\nObject.defineProperty(exports, \"AsnProp\", ({\n    enumerable: true,\n    get: function() {\n        return decorators_1.AsnProp;\n    }\n}));\nObject.defineProperty(exports, \"AsnType\", ({\n    enumerable: true,\n    get: function() {\n        return decorators_1.AsnType;\n    }\n}));\nObject.defineProperty(exports, \"AsnChoiceType\", ({\n    enumerable: true,\n    get: function() {\n        return decorators_1.AsnChoiceType;\n    }\n}));\nObject.defineProperty(exports, \"AsnSequenceType\", ({\n    enumerable: true,\n    get: function() {\n        return decorators_1.AsnSequenceType;\n    }\n}));\nObject.defineProperty(exports, \"AsnSetType\", ({\n    enumerable: true,\n    get: function() {\n        return decorators_1.AsnSetType;\n    }\n}));\nvar enums_1 = __webpack_require__(/*! ./enums */ \"(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/enums.js\");\nObject.defineProperty(exports, \"AsnTypeTypes\", ({\n    enumerable: true,\n    get: function() {\n        return enums_1.AsnTypeTypes;\n    }\n}));\nObject.defineProperty(exports, \"AsnPropTypes\", ({\n    enumerable: true,\n    get: function() {\n        return enums_1.AsnPropTypes;\n    }\n}));\nvar parser_1 = __webpack_require__(/*! ./parser */ \"(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/parser.js\");\nObject.defineProperty(exports, \"AsnParser\", ({\n    enumerable: true,\n    get: function() {\n        return parser_1.AsnParser;\n    }\n}));\nvar serializer_1 = __webpack_require__(/*! ./serializer */ \"(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/serializer.js\");\nObject.defineProperty(exports, \"AsnSerializer\", ({\n    enumerable: true,\n    get: function() {\n        return serializer_1.AsnSerializer;\n    }\n}));\ntslib_1.__exportStar(__webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/errors/index.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./objects */ \"(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/objects.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./convert */ \"(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/convert.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQscUJBQXFCLEdBQUdBLGlCQUFpQixHQUFHQSxvQkFBb0IsR0FBR0Esb0JBQW9CLEdBQUdBLGtCQUFrQixHQUFHQSx1QkFBdUIsR0FBR0EscUJBQXFCLEdBQUdBLGVBQWUsR0FBR0EsZUFBZSxHQUFHLEtBQUs7QUFDMU0sTUFBTVcsVUFBVUMsbUJBQU9BLENBQUMsdURBQU87QUFDL0JELFFBQVFFLFlBQVksQ0FBQ0QsbUJBQU9BLENBQUMsd0ZBQWMsR0FBR1o7QUFDOUNXLFFBQVFFLFlBQVksQ0FBQ0QsbUJBQU9BLENBQUMsMEZBQWUsR0FBR1o7QUFDL0MsSUFBSWMsZUFBZUYsbUJBQU9BLENBQUMsd0ZBQWM7QUFDekNkLDJDQUEwQztJQUFFaUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0YsYUFBYUosT0FBTztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2xIWiwyQ0FBMEM7SUFBRWlCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9GLGFBQWFMLE9BQU87SUFBRTtBQUFFLENBQUMsRUFBQztBQUNsSFgsaURBQWdEO0lBQUVpQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRixhQUFhTixhQUFhO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDOUhWLG1EQUFrRDtJQUFFaUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0YsYUFBYVAsZUFBZTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2xJVCw4Q0FBNkM7SUFBRWlCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9GLGFBQWFSLFVBQVU7SUFBRTtBQUFFLENBQUMsRUFBQztBQUN4SCxJQUFJVyxVQUFVTCxtQkFBT0EsQ0FBQyw4RUFBUztBQUMvQmQsZ0RBQStDO0lBQUVpQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPQyxRQUFRWixZQUFZO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDdkhQLGdEQUErQztJQUFFaUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0MsUUFBUWIsWUFBWTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3ZILElBQUljLFdBQVdOLG1CQUFPQSxDQUFDLGdGQUFVO0FBQ2pDZCw2Q0FBNEM7SUFBRWlCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9FLFNBQVNmLFNBQVM7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNsSCxJQUFJZ0IsZUFBZVAsbUJBQU9BLENBQUMsd0ZBQWM7QUFDekNkLGlEQUFnRDtJQUFFaUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0csYUFBYWpCLGFBQWE7SUFBRTtBQUFFLENBQUMsRUFBQztBQUM5SFMsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyxzRkFBVSxHQUFHWjtBQUMxQ1csUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyxrRkFBVyxHQUFHWjtBQUMzQ1csUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyxrRkFBVyxHQUFHWiIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLW1ha2V0cGxhY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy9pbmRleC5qcz83Mjk3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Bc25TZXJpYWxpemVyID0gZXhwb3J0cy5Bc25QYXJzZXIgPSBleHBvcnRzLkFzblByb3BUeXBlcyA9IGV4cG9ydHMuQXNuVHlwZVR5cGVzID0gZXhwb3J0cy5Bc25TZXRUeXBlID0gZXhwb3J0cy5Bc25TZXF1ZW5jZVR5cGUgPSBleHBvcnRzLkFzbkNob2ljZVR5cGUgPSBleHBvcnRzLkFzblR5cGUgPSBleHBvcnRzLkFzblByb3AgPSB2b2lkIDA7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29udmVydGVyc1wiKSwgZXhwb3J0cyk7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90eXBlcy9pbmRleFwiKSwgZXhwb3J0cyk7XG52YXIgZGVjb3JhdG9yc18xID0gcmVxdWlyZShcIi4vZGVjb3JhdG9yc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFzblByb3BcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlY29yYXRvcnNfMS5Bc25Qcm9wOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQXNuVHlwZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVjb3JhdG9yc18xLkFzblR5cGU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBc25DaG9pY2VUeXBlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWNvcmF0b3JzXzEuQXNuQ2hvaWNlVHlwZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFzblNlcXVlbmNlVHlwZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVjb3JhdG9yc18xLkFzblNlcXVlbmNlVHlwZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFzblNldFR5cGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlY29yYXRvcnNfMS5Bc25TZXRUeXBlOyB9IH0pO1xudmFyIGVudW1zXzEgPSByZXF1aXJlKFwiLi9lbnVtc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFzblR5cGVUeXBlc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZW51bXNfMS5Bc25UeXBlVHlwZXM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBc25Qcm9wVHlwZXNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVudW1zXzEuQXNuUHJvcFR5cGVzOyB9IH0pO1xudmFyIHBhcnNlcl8xID0gcmVxdWlyZShcIi4vcGFyc2VyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQXNuUGFyc2VyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwYXJzZXJfMS5Bc25QYXJzZXI7IH0gfSk7XG52YXIgc2VyaWFsaXplcl8xID0gcmVxdWlyZShcIi4vc2VyaWFsaXplclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFzblNlcmlhbGl6ZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNlcmlhbGl6ZXJfMS5Bc25TZXJpYWxpemVyOyB9IH0pO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZXJyb3JzXCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL29iamVjdHNcIiksIGV4cG9ydHMpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29udmVydFwiKSwgZXhwb3J0cyk7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJBc25TZXJpYWxpemVyIiwiQXNuUGFyc2VyIiwiQXNuUHJvcFR5cGVzIiwiQXNuVHlwZVR5cGVzIiwiQXNuU2V0VHlwZSIsIkFzblNlcXVlbmNlVHlwZSIsIkFzbkNob2ljZVR5cGUiLCJBc25UeXBlIiwiQXNuUHJvcCIsInRzbGliXzEiLCJyZXF1aXJlIiwiX19leHBvcnRTdGFyIiwiZGVjb3JhdG9yc18xIiwiZW51bWVyYWJsZSIsImdldCIsImVudW1zXzEiLCJwYXJzZXJfMSIsInNlcmlhbGl6ZXJfMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/objects.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/objects.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AsnArray = void 0;\nclass AsnArray extends Array {\n    constructor(items = []){\n        if (typeof items === \"number\") {\n            super(items);\n        } else {\n            super();\n            for (const item of items){\n                this.push(item);\n            }\n        }\n    }\n}\nexports.AsnArray = AsnArray;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGVjdWxpYXIvYXNuMS1zY2hlbWEvYnVpbGQvY2pzL29iamVjdHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGdCQUFnQixHQUFHLEtBQUs7QUFDeEIsTUFBTUUsaUJBQWlCQztJQUNuQkMsWUFBWUMsUUFBUSxFQUFFLENBQUU7UUFDcEIsSUFBSSxPQUFPQSxVQUFVLFVBQVU7WUFDM0IsS0FBSyxDQUFDQTtRQUNWLE9BQ0s7WUFDRCxLQUFLO1lBQ0wsS0FBSyxNQUFNQyxRQUFRRCxNQUFPO2dCQUN0QixJQUFJLENBQUNFLElBQUksQ0FBQ0Q7WUFDZDtRQUNKO0lBQ0o7QUFDSjtBQUNBTixnQkFBZ0IsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1tYWtldHBsYWNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL0BwZWN1bGlhci9hc24xLXNjaGVtYS9idWlsZC9janMvb2JqZWN0cy5qcz9lZmU1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Bc25BcnJheSA9IHZvaWQgMDtcbmNsYXNzIEFzbkFycmF5IGV4dGVuZHMgQXJyYXkge1xuICAgIGNvbnN0cnVjdG9yKGl0ZW1zID0gW10pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtcyA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgc3VwZXIoaXRlbXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xuICAgICAgICAgICAgICAgIHRoaXMucHVzaChpdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQXNuQXJyYXkgPSBBc25BcnJheTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkFzbkFycmF5IiwiQXJyYXkiLCJjb25zdHJ1Y3RvciIsIml0ZW1zIiwiaXRlbSIsInB1c2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/objects.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/objects.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/objects.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AsnArray = void 0;\nclass AsnArray extends Array {\n    constructor(items = []){\n        if (typeof items === \"number\") {\n            super(items);\n        } else {\n            super();\n            for (const item of items){\n                this.push(item);\n            }\n        }\n    }\n}\nexports.AsnArray = AsnArray;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy9vYmplY3RzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxnQkFBZ0IsR0FBRyxLQUFLO0FBQ3hCLE1BQU1FLGlCQUFpQkM7SUFDbkJDLFlBQVlDLFFBQVEsRUFBRSxDQUFFO1FBQ3BCLElBQUksT0FBT0EsVUFBVSxVQUFVO1lBQzNCLEtBQUssQ0FBQ0E7UUFDVixPQUNLO1lBQ0QsS0FBSztZQUNMLEtBQUssTUFBTUMsUUFBUUQsTUFBTztnQkFDdEIsSUFBSSxDQUFDRSxJQUFJLENBQUNEO1lBQ2Q7UUFDSjtJQUNKO0FBQ0o7QUFDQU4sZ0JBQWdCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktbWFrZXRwbGFjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9AcGVjdWxpYXIvYXNuMS1zY2hlbWEvYnVpbGQvY2pzL29iamVjdHMuanM/ZWZlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXNuQXJyYXkgPSB2b2lkIDA7XG5jbGFzcyBBc25BcnJheSBleHRlbmRzIEFycmF5IHtcbiAgICBjb25zdHJ1Y3RvcihpdGVtcyA9IFtdKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbXMgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHN1cGVyKGl0ZW1zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN1cGVyKCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnB1c2goaXRlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkFzbkFycmF5ID0gQXNuQXJyYXk7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJBc25BcnJheSIsIkFycmF5IiwiY29uc3RydWN0b3IiLCJpdGVtcyIsIml0ZW0iLCJwdXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/objects.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/parser.js":
/*!****************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/parser.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AsnParser = void 0;\nconst asn1js = __webpack_require__(/*! asn1js */ \"(action-browser)/./node_modules/asn1js/build/index.js\");\nconst enums_1 = __webpack_require__(/*! ./enums */ \"(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/enums.js\");\nconst converters = __webpack_require__(/*! ./converters */ \"(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/converters.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/errors/index.js\");\nconst helper_1 = __webpack_require__(/*! ./helper */ \"(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/helper.js\");\nconst storage_1 = __webpack_require__(/*! ./storage */ \"(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/storage.js\");\nclass AsnParser {\n    static parse(data, target) {\n        const asn1Parsed = asn1js.fromBER(data);\n        if (asn1Parsed.result.error) {\n            throw new Error(asn1Parsed.result.error);\n        }\n        const res = this.fromASN(asn1Parsed.result, target);\n        return res;\n    }\n    static fromASN(asn1Schema, target) {\n        var _a;\n        try {\n            if ((0, helper_1.isConvertible)(target)) {\n                const value = new target();\n                return value.fromASN(asn1Schema);\n            }\n            const schema = storage_1.schemaStorage.get(target);\n            storage_1.schemaStorage.cache(target);\n            let targetSchema = schema.schema;\n            if (asn1Schema.constructor === asn1js.Constructed && schema.type !== enums_1.AsnTypeTypes.Choice) {\n                targetSchema = new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: asn1Schema.idBlock.tagNumber\n                    },\n                    value: schema.schema.valueBlock.value\n                });\n                for(const key in schema.items){\n                    delete asn1Schema[key];\n                }\n            }\n            const asn1ComparedSchema = asn1js.compareSchema({}, asn1Schema, targetSchema);\n            if (!asn1ComparedSchema.verified) {\n                throw new errors_1.AsnSchemaValidationError(`Data does not match to ${target.name} ASN1 schema. ${asn1ComparedSchema.result.error}`);\n            }\n            const res = new target();\n            if ((0, helper_1.isTypeOfArray)(target)) {\n                if (!(\"value\" in asn1Schema.valueBlock && Array.isArray(asn1Schema.valueBlock.value))) {\n                    throw new Error(`Cannot get items from the ASN.1 parsed value. ASN.1 object is not constructed.`);\n                }\n                const itemType = schema.itemType;\n                if (typeof itemType === \"number\") {\n                    const converter = converters.defaultConverter(itemType);\n                    if (!converter) {\n                        throw new Error(`Cannot get default converter for array item of ${target.name} ASN1 schema`);\n                    }\n                    return target.from(asn1Schema.valueBlock.value, (element)=>converter.fromASN(element));\n                } else {\n                    return target.from(asn1Schema.valueBlock.value, (element)=>this.fromASN(element, itemType));\n                }\n            }\n            for(const key in schema.items){\n                const asn1SchemaValue = asn1ComparedSchema.result[key];\n                if (!asn1SchemaValue) {\n                    continue;\n                }\n                const schemaItem = schema.items[key];\n                const schemaItemType = schemaItem.type;\n                if (typeof schemaItemType === \"number\" || (0, helper_1.isConvertible)(schemaItemType)) {\n                    const converter = (_a = schemaItem.converter) !== null && _a !== void 0 ? _a : (0, helper_1.isConvertible)(schemaItemType) ? new schemaItemType() : null;\n                    if (!converter) {\n                        throw new Error(\"Converter is empty\");\n                    }\n                    if (schemaItem.repeated) {\n                        if (schemaItem.implicit) {\n                            const Container = schemaItem.repeated === \"sequence\" ? asn1js.Sequence : asn1js.Set;\n                            const newItem = new Container();\n                            newItem.valueBlock = asn1SchemaValue.valueBlock;\n                            const newItemAsn = asn1js.fromBER(newItem.toBER(false));\n                            if (newItemAsn.offset === -1) {\n                                throw new Error(`Cannot parse the child item. ${newItemAsn.result.error}`);\n                            }\n                            if (!(\"value\" in newItemAsn.result.valueBlock && Array.isArray(newItemAsn.result.valueBlock.value))) {\n                                throw new Error(\"Cannot get items from the ASN.1 parsed value. ASN.1 object is not constructed.\");\n                            }\n                            const value = newItemAsn.result.valueBlock.value;\n                            res[key] = Array.from(value, (element)=>converter.fromASN(element));\n                        } else {\n                            res[key] = Array.from(asn1SchemaValue, (element)=>converter.fromASN(element));\n                        }\n                    } else {\n                        let value = asn1SchemaValue;\n                        if (schemaItem.implicit) {\n                            let newItem;\n                            if ((0, helper_1.isConvertible)(schemaItemType)) {\n                                newItem = new schemaItemType().toSchema(\"\");\n                            } else {\n                                const Asn1TypeName = enums_1.AsnPropTypes[schemaItemType];\n                                const Asn1Type = asn1js[Asn1TypeName];\n                                if (!Asn1Type) {\n                                    throw new Error(`Cannot get '${Asn1TypeName}' class from asn1js module`);\n                                }\n                                newItem = new Asn1Type();\n                            }\n                            newItem.valueBlock = value.valueBlock;\n                            value = asn1js.fromBER(newItem.toBER(false)).result;\n                        }\n                        res[key] = converter.fromASN(value);\n                    }\n                } else {\n                    if (schemaItem.repeated) {\n                        if (!Array.isArray(asn1SchemaValue)) {\n                            throw new Error(\"Cannot get list of items from the ASN.1 parsed value. ASN.1 value should be iterable.\");\n                        }\n                        res[key] = Array.from(asn1SchemaValue, (element)=>this.fromASN(element, schemaItemType));\n                    } else {\n                        res[key] = this.fromASN(asn1SchemaValue, schemaItemType);\n                    }\n                }\n            }\n            return res;\n        } catch (error) {\n            if (error instanceof errors_1.AsnSchemaValidationError) {\n                error.schemas.push(target.name);\n            }\n            throw error;\n        }\n    }\n}\nexports.AsnParser = AsnParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/parser.js":
/*!****************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/parser.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AsnParser = void 0;\nconst asn1js = __webpack_require__(/*! asn1js */ \"(rsc)/./node_modules/asn1js/build/index.js\");\nconst enums_1 = __webpack_require__(/*! ./enums */ \"(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/enums.js\");\nconst converters = __webpack_require__(/*! ./converters */ \"(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/converters.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/errors/index.js\");\nconst helper_1 = __webpack_require__(/*! ./helper */ \"(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/helper.js\");\nconst storage_1 = __webpack_require__(/*! ./storage */ \"(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/storage.js\");\nclass AsnParser {\n    static parse(data, target) {\n        const asn1Parsed = asn1js.fromBER(data);\n        if (asn1Parsed.result.error) {\n            throw new Error(asn1Parsed.result.error);\n        }\n        const res = this.fromASN(asn1Parsed.result, target);\n        return res;\n    }\n    static fromASN(asn1Schema, target) {\n        var _a;\n        try {\n            if ((0, helper_1.isConvertible)(target)) {\n                const value = new target();\n                return value.fromASN(asn1Schema);\n            }\n            const schema = storage_1.schemaStorage.get(target);\n            storage_1.schemaStorage.cache(target);\n            let targetSchema = schema.schema;\n            if (asn1Schema.constructor === asn1js.Constructed && schema.type !== enums_1.AsnTypeTypes.Choice) {\n                targetSchema = new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: asn1Schema.idBlock.tagNumber\n                    },\n                    value: schema.schema.valueBlock.value\n                });\n                for(const key in schema.items){\n                    delete asn1Schema[key];\n                }\n            }\n            const asn1ComparedSchema = asn1js.compareSchema({}, asn1Schema, targetSchema);\n            if (!asn1ComparedSchema.verified) {\n                throw new errors_1.AsnSchemaValidationError(`Data does not match to ${target.name} ASN1 schema. ${asn1ComparedSchema.result.error}`);\n            }\n            const res = new target();\n            if ((0, helper_1.isTypeOfArray)(target)) {\n                if (!(\"value\" in asn1Schema.valueBlock && Array.isArray(asn1Schema.valueBlock.value))) {\n                    throw new Error(`Cannot get items from the ASN.1 parsed value. ASN.1 object is not constructed.`);\n                }\n                const itemType = schema.itemType;\n                if (typeof itemType === \"number\") {\n                    const converter = converters.defaultConverter(itemType);\n                    if (!converter) {\n                        throw new Error(`Cannot get default converter for array item of ${target.name} ASN1 schema`);\n                    }\n                    return target.from(asn1Schema.valueBlock.value, (element)=>converter.fromASN(element));\n                } else {\n                    return target.from(asn1Schema.valueBlock.value, (element)=>this.fromASN(element, itemType));\n                }\n            }\n            for(const key in schema.items){\n                const asn1SchemaValue = asn1ComparedSchema.result[key];\n                if (!asn1SchemaValue) {\n                    continue;\n                }\n                const schemaItem = schema.items[key];\n                const schemaItemType = schemaItem.type;\n                if (typeof schemaItemType === \"number\" || (0, helper_1.isConvertible)(schemaItemType)) {\n                    const converter = (_a = schemaItem.converter) !== null && _a !== void 0 ? _a : (0, helper_1.isConvertible)(schemaItemType) ? new schemaItemType() : null;\n                    if (!converter) {\n                        throw new Error(\"Converter is empty\");\n                    }\n                    if (schemaItem.repeated) {\n                        if (schemaItem.implicit) {\n                            const Container = schemaItem.repeated === \"sequence\" ? asn1js.Sequence : asn1js.Set;\n                            const newItem = new Container();\n                            newItem.valueBlock = asn1SchemaValue.valueBlock;\n                            const newItemAsn = asn1js.fromBER(newItem.toBER(false));\n                            if (newItemAsn.offset === -1) {\n                                throw new Error(`Cannot parse the child item. ${newItemAsn.result.error}`);\n                            }\n                            if (!(\"value\" in newItemAsn.result.valueBlock && Array.isArray(newItemAsn.result.valueBlock.value))) {\n                                throw new Error(\"Cannot get items from the ASN.1 parsed value. ASN.1 object is not constructed.\");\n                            }\n                            const value = newItemAsn.result.valueBlock.value;\n                            res[key] = Array.from(value, (element)=>converter.fromASN(element));\n                        } else {\n                            res[key] = Array.from(asn1SchemaValue, (element)=>converter.fromASN(element));\n                        }\n                    } else {\n                        let value = asn1SchemaValue;\n                        if (schemaItem.implicit) {\n                            let newItem;\n                            if ((0, helper_1.isConvertible)(schemaItemType)) {\n                                newItem = new schemaItemType().toSchema(\"\");\n                            } else {\n                                const Asn1TypeName = enums_1.AsnPropTypes[schemaItemType];\n                                const Asn1Type = asn1js[Asn1TypeName];\n                                if (!Asn1Type) {\n                                    throw new Error(`Cannot get '${Asn1TypeName}' class from asn1js module`);\n                                }\n                                newItem = new Asn1Type();\n                            }\n                            newItem.valueBlock = value.valueBlock;\n                            value = asn1js.fromBER(newItem.toBER(false)).result;\n                        }\n                        res[key] = converter.fromASN(value);\n                    }\n                } else {\n                    if (schemaItem.repeated) {\n                        if (!Array.isArray(asn1SchemaValue)) {\n                            throw new Error(\"Cannot get list of items from the ASN.1 parsed value. ASN.1 value should be iterable.\");\n                        }\n                        res[key] = Array.from(asn1SchemaValue, (element)=>this.fromASN(element, schemaItemType));\n                    } else {\n                        res[key] = this.fromASN(asn1SchemaValue, schemaItemType);\n                    }\n                }\n            }\n            return res;\n        } catch (error) {\n            if (error instanceof errors_1.AsnSchemaValidationError) {\n                error.schemas.push(target.name);\n            }\n            throw error;\n        }\n    }\n}\nexports.AsnParser = AsnParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/parser.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/schema.js":
/*!****************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/schema.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AsnSchemaStorage = void 0;\nconst asn1js = __webpack_require__(/*! asn1js */ \"(action-browser)/./node_modules/asn1js/build/index.js\");\nconst enums_1 = __webpack_require__(/*! ./enums */ \"(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/enums.js\");\nconst helper_1 = __webpack_require__(/*! ./helper */ \"(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/helper.js\");\nclass AsnSchemaStorage {\n    constructor(){\n        this.items = new WeakMap();\n    }\n    has(target) {\n        return this.items.has(target);\n    }\n    get(target, checkSchema = false) {\n        const schema = this.items.get(target);\n        if (!schema) {\n            throw new Error(`Cannot get schema for '${target.prototype.constructor.name}' target`);\n        }\n        if (checkSchema && !schema.schema) {\n            throw new Error(`Schema '${target.prototype.constructor.name}' doesn't contain ASN.1 schema. Call 'AsnSchemaStorage.cache'.`);\n        }\n        return schema;\n    }\n    cache(target) {\n        const schema = this.get(target);\n        if (!schema.schema) {\n            schema.schema = this.create(target, true);\n        }\n    }\n    createDefault(target) {\n        const schema = {\n            type: enums_1.AsnTypeTypes.Sequence,\n            items: {}\n        };\n        const parentSchema = this.findParentSchema(target);\n        if (parentSchema) {\n            Object.assign(schema, parentSchema);\n            schema.items = Object.assign({}, schema.items, parentSchema.items);\n        }\n        return schema;\n    }\n    create(target, useNames) {\n        const schema = this.items.get(target) || this.createDefault(target);\n        const asn1Value = [];\n        for(const key in schema.items){\n            const item = schema.items[key];\n            const name = useNames ? key : \"\";\n            let asn1Item;\n            if (typeof item.type === \"number\") {\n                const Asn1TypeName = enums_1.AsnPropTypes[item.type];\n                const Asn1Type = asn1js[Asn1TypeName];\n                if (!Asn1Type) {\n                    throw new Error(`Cannot get ASN1 class by name '${Asn1TypeName}'`);\n                }\n                asn1Item = new Asn1Type({\n                    name\n                });\n            } else if ((0, helper_1.isConvertible)(item.type)) {\n                const instance = new item.type();\n                asn1Item = instance.toSchema(name);\n            } else if (item.optional) {\n                const itemSchema = this.get(item.type);\n                if (itemSchema.type === enums_1.AsnTypeTypes.Choice) {\n                    asn1Item = new asn1js.Any({\n                        name\n                    });\n                } else {\n                    asn1Item = this.create(item.type, false);\n                    asn1Item.name = name;\n                }\n            } else {\n                asn1Item = new asn1js.Any({\n                    name\n                });\n            }\n            const optional = !!item.optional || item.defaultValue !== undefined;\n            if (item.repeated) {\n                asn1Item.name = \"\";\n                const Container = item.repeated === \"set\" ? asn1js.Set : asn1js.Sequence;\n                asn1Item = new Container({\n                    name: \"\",\n                    value: [\n                        new asn1js.Repeated({\n                            name,\n                            value: asn1Item\n                        })\n                    ]\n                });\n            }\n            if (item.context !== null && item.context !== undefined) {\n                if (item.implicit) {\n                    if (typeof item.type === \"number\" || (0, helper_1.isConvertible)(item.type)) {\n                        const Container = item.repeated ? asn1js.Constructed : asn1js.Primitive;\n                        asn1Value.push(new Container({\n                            name,\n                            optional,\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: item.context\n                            }\n                        }));\n                    } else {\n                        this.cache(item.type);\n                        const isRepeated = !!item.repeated;\n                        let value = !isRepeated ? this.get(item.type, true).schema : asn1Item;\n                        value = \"valueBlock\" in value ? value.valueBlock.value : value.value;\n                        asn1Value.push(new asn1js.Constructed({\n                            name: !isRepeated ? name : \"\",\n                            optional,\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: item.context\n                            },\n                            value: value\n                        }));\n                    }\n                } else {\n                    asn1Value.push(new asn1js.Constructed({\n                        optional,\n                        idBlock: {\n                            tagClass: 3,\n                            tagNumber: item.context\n                        },\n                        value: [\n                            asn1Item\n                        ]\n                    }));\n                }\n            } else {\n                asn1Item.optional = optional;\n                asn1Value.push(asn1Item);\n            }\n        }\n        switch(schema.type){\n            case enums_1.AsnTypeTypes.Sequence:\n                return new asn1js.Sequence({\n                    value: asn1Value,\n                    name: \"\"\n                });\n            case enums_1.AsnTypeTypes.Set:\n                return new asn1js.Set({\n                    value: asn1Value,\n                    name: \"\"\n                });\n            case enums_1.AsnTypeTypes.Choice:\n                return new asn1js.Choice({\n                    value: asn1Value,\n                    name: \"\"\n                });\n            default:\n                throw new Error(`Unsupported ASN1 type in use`);\n        }\n    }\n    set(target, schema) {\n        this.items.set(target, schema);\n        return this;\n    }\n    findParentSchema(target) {\n        const parent = Object.getPrototypeOf(target);\n        if (parent) {\n            const schema = this.items.get(parent);\n            return schema || this.findParentSchema(parent);\n        }\n        return null;\n    }\n}\nexports.AsnSchemaStorage = AsnSchemaStorage;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/schema.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/schema.js":
/*!****************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/schema.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AsnSchemaStorage = void 0;\nconst asn1js = __webpack_require__(/*! asn1js */ \"(rsc)/./node_modules/asn1js/build/index.js\");\nconst enums_1 = __webpack_require__(/*! ./enums */ \"(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/enums.js\");\nconst helper_1 = __webpack_require__(/*! ./helper */ \"(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/helper.js\");\nclass AsnSchemaStorage {\n    constructor(){\n        this.items = new WeakMap();\n    }\n    has(target) {\n        return this.items.has(target);\n    }\n    get(target, checkSchema = false) {\n        const schema = this.items.get(target);\n        if (!schema) {\n            throw new Error(`Cannot get schema for '${target.prototype.constructor.name}' target`);\n        }\n        if (checkSchema && !schema.schema) {\n            throw new Error(`Schema '${target.prototype.constructor.name}' doesn't contain ASN.1 schema. Call 'AsnSchemaStorage.cache'.`);\n        }\n        return schema;\n    }\n    cache(target) {\n        const schema = this.get(target);\n        if (!schema.schema) {\n            schema.schema = this.create(target, true);\n        }\n    }\n    createDefault(target) {\n        const schema = {\n            type: enums_1.AsnTypeTypes.Sequence,\n            items: {}\n        };\n        const parentSchema = this.findParentSchema(target);\n        if (parentSchema) {\n            Object.assign(schema, parentSchema);\n            schema.items = Object.assign({}, schema.items, parentSchema.items);\n        }\n        return schema;\n    }\n    create(target, useNames) {\n        const schema = this.items.get(target) || this.createDefault(target);\n        const asn1Value = [];\n        for(const key in schema.items){\n            const item = schema.items[key];\n            const name = useNames ? key : \"\";\n            let asn1Item;\n            if (typeof item.type === \"number\") {\n                const Asn1TypeName = enums_1.AsnPropTypes[item.type];\n                const Asn1Type = asn1js[Asn1TypeName];\n                if (!Asn1Type) {\n                    throw new Error(`Cannot get ASN1 class by name '${Asn1TypeName}'`);\n                }\n                asn1Item = new Asn1Type({\n                    name\n                });\n            } else if ((0, helper_1.isConvertible)(item.type)) {\n                const instance = new item.type();\n                asn1Item = instance.toSchema(name);\n            } else if (item.optional) {\n                const itemSchema = this.get(item.type);\n                if (itemSchema.type === enums_1.AsnTypeTypes.Choice) {\n                    asn1Item = new asn1js.Any({\n                        name\n                    });\n                } else {\n                    asn1Item = this.create(item.type, false);\n                    asn1Item.name = name;\n                }\n            } else {\n                asn1Item = new asn1js.Any({\n                    name\n                });\n            }\n            const optional = !!item.optional || item.defaultValue !== undefined;\n            if (item.repeated) {\n                asn1Item.name = \"\";\n                const Container = item.repeated === \"set\" ? asn1js.Set : asn1js.Sequence;\n                asn1Item = new Container({\n                    name: \"\",\n                    value: [\n                        new asn1js.Repeated({\n                            name,\n                            value: asn1Item\n                        })\n                    ]\n                });\n            }\n            if (item.context !== null && item.context !== undefined) {\n                if (item.implicit) {\n                    if (typeof item.type === \"number\" || (0, helper_1.isConvertible)(item.type)) {\n                        const Container = item.repeated ? asn1js.Constructed : asn1js.Primitive;\n                        asn1Value.push(new Container({\n                            name,\n                            optional,\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: item.context\n                            }\n                        }));\n                    } else {\n                        this.cache(item.type);\n                        const isRepeated = !!item.repeated;\n                        let value = !isRepeated ? this.get(item.type, true).schema : asn1Item;\n                        value = \"valueBlock\" in value ? value.valueBlock.value : value.value;\n                        asn1Value.push(new asn1js.Constructed({\n                            name: !isRepeated ? name : \"\",\n                            optional,\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: item.context\n                            },\n                            value: value\n                        }));\n                    }\n                } else {\n                    asn1Value.push(new asn1js.Constructed({\n                        optional,\n                        idBlock: {\n                            tagClass: 3,\n                            tagNumber: item.context\n                        },\n                        value: [\n                            asn1Item\n                        ]\n                    }));\n                }\n            } else {\n                asn1Item.optional = optional;\n                asn1Value.push(asn1Item);\n            }\n        }\n        switch(schema.type){\n            case enums_1.AsnTypeTypes.Sequence:\n                return new asn1js.Sequence({\n                    value: asn1Value,\n                    name: \"\"\n                });\n            case enums_1.AsnTypeTypes.Set:\n                return new asn1js.Set({\n                    value: asn1Value,\n                    name: \"\"\n                });\n            case enums_1.AsnTypeTypes.Choice:\n                return new asn1js.Choice({\n                    value: asn1Value,\n                    name: \"\"\n                });\n            default:\n                throw new Error(`Unsupported ASN1 type in use`);\n        }\n    }\n    set(target, schema) {\n        this.items.set(target, schema);\n        return this;\n    }\n    findParentSchema(target) {\n        const parent = Object.getPrototypeOf(target);\n        if (parent) {\n            const schema = this.items.get(parent);\n            return schema || this.findParentSchema(parent);\n        }\n        return null;\n    }\n}\nexports.AsnSchemaStorage = AsnSchemaStorage;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/schema.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/serializer.js":
/*!********************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/serializer.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AsnSerializer = void 0;\nconst asn1js = __webpack_require__(/*! asn1js */ \"(action-browser)/./node_modules/asn1js/build/index.js\");\nconst converters = __webpack_require__(/*! ./converters */ \"(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/converters.js\");\nconst enums_1 = __webpack_require__(/*! ./enums */ \"(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/enums.js\");\nconst helper_1 = __webpack_require__(/*! ./helper */ \"(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/helper.js\");\nconst storage_1 = __webpack_require__(/*! ./storage */ \"(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/storage.js\");\nclass AsnSerializer {\n    static serialize(obj) {\n        if (obj instanceof asn1js.BaseBlock) {\n            return obj.toBER(false);\n        }\n        return this.toASN(obj).toBER(false);\n    }\n    static toASN(obj) {\n        if (obj && typeof obj === \"object\" && (0, helper_1.isConvertible)(obj)) {\n            return obj.toASN();\n        }\n        if (!(obj && typeof obj === \"object\")) {\n            throw new TypeError(\"Parameter 1 should be type of Object.\");\n        }\n        const target = obj.constructor;\n        const schema = storage_1.schemaStorage.get(target);\n        storage_1.schemaStorage.cache(target);\n        let asn1Value = [];\n        if (schema.itemType) {\n            if (!Array.isArray(obj)) {\n                throw new TypeError(\"Parameter 1 should be type of Array.\");\n            }\n            if (typeof schema.itemType === \"number\") {\n                const converter = converters.defaultConverter(schema.itemType);\n                if (!converter) {\n                    throw new Error(`Cannot get default converter for array item of ${target.name} ASN1 schema`);\n                }\n                asn1Value = obj.map((o)=>converter.toASN(o));\n            } else {\n                asn1Value = obj.map((o)=>this.toAsnItem({\n                        type: schema.itemType\n                    }, \"[]\", target, o));\n            }\n        } else {\n            for(const key in schema.items){\n                const schemaItem = schema.items[key];\n                const objProp = obj[key];\n                if (objProp === undefined || schemaItem.defaultValue === objProp || typeof schemaItem.defaultValue === \"object\" && typeof objProp === \"object\" && (0, helper_1.isArrayEqual)(this.serialize(schemaItem.defaultValue), this.serialize(objProp))) {\n                    continue;\n                }\n                const asn1Item = AsnSerializer.toAsnItem(schemaItem, key, target, objProp);\n                if (typeof schemaItem.context === \"number\") {\n                    if (schemaItem.implicit) {\n                        if (!schemaItem.repeated && (typeof schemaItem.type === \"number\" || (0, helper_1.isConvertible)(schemaItem.type))) {\n                            const value = {};\n                            value.valueHex = asn1Item instanceof asn1js.Null ? asn1Item.valueBeforeDecodeView : asn1Item.valueBlock.toBER();\n                            asn1Value.push(new asn1js.Primitive({\n                                optional: schemaItem.optional,\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: schemaItem.context\n                                },\n                                ...value\n                            }));\n                        } else {\n                            asn1Value.push(new asn1js.Constructed({\n                                optional: schemaItem.optional,\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: schemaItem.context\n                                },\n                                value: asn1Item.valueBlock.value\n                            }));\n                        }\n                    } else {\n                        asn1Value.push(new asn1js.Constructed({\n                            optional: schemaItem.optional,\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: schemaItem.context\n                            },\n                            value: [\n                                asn1Item\n                            ]\n                        }));\n                    }\n                } else if (schemaItem.repeated) {\n                    asn1Value = asn1Value.concat(asn1Item);\n                } else {\n                    asn1Value.push(asn1Item);\n                }\n            }\n        }\n        let asnSchema;\n        switch(schema.type){\n            case enums_1.AsnTypeTypes.Sequence:\n                asnSchema = new asn1js.Sequence({\n                    value: asn1Value\n                });\n                break;\n            case enums_1.AsnTypeTypes.Set:\n                asnSchema = new asn1js.Set({\n                    value: asn1Value\n                });\n                break;\n            case enums_1.AsnTypeTypes.Choice:\n                if (!asn1Value[0]) {\n                    throw new Error(`Schema '${target.name}' has wrong data. Choice cannot be empty.`);\n                }\n                asnSchema = asn1Value[0];\n                break;\n        }\n        return asnSchema;\n    }\n    static toAsnItem(schemaItem, key, target, objProp) {\n        let asn1Item;\n        if (typeof schemaItem.type === \"number\") {\n            const converter = schemaItem.converter;\n            if (!converter) {\n                throw new Error(`Property '${key}' doesn't have converter for type ${enums_1.AsnPropTypes[schemaItem.type]} in schema '${target.name}'`);\n            }\n            if (schemaItem.repeated) {\n                if (!Array.isArray(objProp)) {\n                    throw new TypeError(\"Parameter 'objProp' should be type of Array.\");\n                }\n                const items = Array.from(objProp, (element)=>converter.toASN(element));\n                const Container = schemaItem.repeated === \"sequence\" ? asn1js.Sequence : asn1js.Set;\n                asn1Item = new Container({\n                    value: items\n                });\n            } else {\n                asn1Item = converter.toASN(objProp);\n            }\n        } else {\n            if (schemaItem.repeated) {\n                if (!Array.isArray(objProp)) {\n                    throw new TypeError(\"Parameter 'objProp' should be type of Array.\");\n                }\n                const items = Array.from(objProp, (element)=>this.toASN(element));\n                const Container = schemaItem.repeated === \"sequence\" ? asn1js.Sequence : asn1js.Set;\n                asn1Item = new Container({\n                    value: items\n                });\n            } else {\n                asn1Item = this.toASN(objProp);\n            }\n        }\n        return asn1Item;\n    }\n}\nexports.AsnSerializer = AsnSerializer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/serializer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/serializer.js":
/*!********************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/serializer.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AsnSerializer = void 0;\nconst asn1js = __webpack_require__(/*! asn1js */ \"(rsc)/./node_modules/asn1js/build/index.js\");\nconst converters = __webpack_require__(/*! ./converters */ \"(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/converters.js\");\nconst enums_1 = __webpack_require__(/*! ./enums */ \"(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/enums.js\");\nconst helper_1 = __webpack_require__(/*! ./helper */ \"(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/helper.js\");\nconst storage_1 = __webpack_require__(/*! ./storage */ \"(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/storage.js\");\nclass AsnSerializer {\n    static serialize(obj) {\n        if (obj instanceof asn1js.BaseBlock) {\n            return obj.toBER(false);\n        }\n        return this.toASN(obj).toBER(false);\n    }\n    static toASN(obj) {\n        if (obj && typeof obj === \"object\" && (0, helper_1.isConvertible)(obj)) {\n            return obj.toASN();\n        }\n        if (!(obj && typeof obj === \"object\")) {\n            throw new TypeError(\"Parameter 1 should be type of Object.\");\n        }\n        const target = obj.constructor;\n        const schema = storage_1.schemaStorage.get(target);\n        storage_1.schemaStorage.cache(target);\n        let asn1Value = [];\n        if (schema.itemType) {\n            if (!Array.isArray(obj)) {\n                throw new TypeError(\"Parameter 1 should be type of Array.\");\n            }\n            if (typeof schema.itemType === \"number\") {\n                const converter = converters.defaultConverter(schema.itemType);\n                if (!converter) {\n                    throw new Error(`Cannot get default converter for array item of ${target.name} ASN1 schema`);\n                }\n                asn1Value = obj.map((o)=>converter.toASN(o));\n            } else {\n                asn1Value = obj.map((o)=>this.toAsnItem({\n                        type: schema.itemType\n                    }, \"[]\", target, o));\n            }\n        } else {\n            for(const key in schema.items){\n                const schemaItem = schema.items[key];\n                const objProp = obj[key];\n                if (objProp === undefined || schemaItem.defaultValue === objProp || typeof schemaItem.defaultValue === \"object\" && typeof objProp === \"object\" && (0, helper_1.isArrayEqual)(this.serialize(schemaItem.defaultValue), this.serialize(objProp))) {\n                    continue;\n                }\n                const asn1Item = AsnSerializer.toAsnItem(schemaItem, key, target, objProp);\n                if (typeof schemaItem.context === \"number\") {\n                    if (schemaItem.implicit) {\n                        if (!schemaItem.repeated && (typeof schemaItem.type === \"number\" || (0, helper_1.isConvertible)(schemaItem.type))) {\n                            const value = {};\n                            value.valueHex = asn1Item instanceof asn1js.Null ? asn1Item.valueBeforeDecodeView : asn1Item.valueBlock.toBER();\n                            asn1Value.push(new asn1js.Primitive({\n                                optional: schemaItem.optional,\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: schemaItem.context\n                                },\n                                ...value\n                            }));\n                        } else {\n                            asn1Value.push(new asn1js.Constructed({\n                                optional: schemaItem.optional,\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: schemaItem.context\n                                },\n                                value: asn1Item.valueBlock.value\n                            }));\n                        }\n                    } else {\n                        asn1Value.push(new asn1js.Constructed({\n                            optional: schemaItem.optional,\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: schemaItem.context\n                            },\n                            value: [\n                                asn1Item\n                            ]\n                        }));\n                    }\n                } else if (schemaItem.repeated) {\n                    asn1Value = asn1Value.concat(asn1Item);\n                } else {\n                    asn1Value.push(asn1Item);\n                }\n            }\n        }\n        let asnSchema;\n        switch(schema.type){\n            case enums_1.AsnTypeTypes.Sequence:\n                asnSchema = new asn1js.Sequence({\n                    value: asn1Value\n                });\n                break;\n            case enums_1.AsnTypeTypes.Set:\n                asnSchema = new asn1js.Set({\n                    value: asn1Value\n                });\n                break;\n            case enums_1.AsnTypeTypes.Choice:\n                if (!asn1Value[0]) {\n                    throw new Error(`Schema '${target.name}' has wrong data. Choice cannot be empty.`);\n                }\n                asnSchema = asn1Value[0];\n                break;\n        }\n        return asnSchema;\n    }\n    static toAsnItem(schemaItem, key, target, objProp) {\n        let asn1Item;\n        if (typeof schemaItem.type === \"number\") {\n            const converter = schemaItem.converter;\n            if (!converter) {\n                throw new Error(`Property '${key}' doesn't have converter for type ${enums_1.AsnPropTypes[schemaItem.type]} in schema '${target.name}'`);\n            }\n            if (schemaItem.repeated) {\n                if (!Array.isArray(objProp)) {\n                    throw new TypeError(\"Parameter 'objProp' should be type of Array.\");\n                }\n                const items = Array.from(objProp, (element)=>converter.toASN(element));\n                const Container = schemaItem.repeated === \"sequence\" ? asn1js.Sequence : asn1js.Set;\n                asn1Item = new Container({\n                    value: items\n                });\n            } else {\n                asn1Item = converter.toASN(objProp);\n            }\n        } else {\n            if (schemaItem.repeated) {\n                if (!Array.isArray(objProp)) {\n                    throw new TypeError(\"Parameter 'objProp' should be type of Array.\");\n                }\n                const items = Array.from(objProp, (element)=>this.toASN(element));\n                const Container = schemaItem.repeated === \"sequence\" ? asn1js.Sequence : asn1js.Set;\n                asn1Item = new Container({\n                    value: items\n                });\n            } else {\n                asn1Item = this.toASN(objProp);\n            }\n        }\n        return asn1Item;\n    }\n}\nexports.AsnSerializer = AsnSerializer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/serializer.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/storage.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/storage.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.schemaStorage = void 0;\nconst schema_1 = __webpack_require__(/*! ./schema */ \"(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/schema.js\");\nexports.schemaStorage = new schema_1.AsnSchemaStorage();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGVjdWxpYXIvYXNuMS1zY2hlbWEvYnVpbGQvY2pzL3N0b3JhZ2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHFCQUFxQixHQUFHLEtBQUs7QUFDN0IsTUFBTUcsV0FBV0MsbUJBQU9BLENBQUMsMkZBQVU7QUFDbkNKLHFCQUFxQixHQUFHLElBQUlHLFNBQVNFLGdCQUFnQiIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLW1ha2V0cGxhY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy9zdG9yYWdlLmpzP2RkMTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNjaGVtYVN0b3JhZ2UgPSB2b2lkIDA7XG5jb25zdCBzY2hlbWFfMSA9IHJlcXVpcmUoXCIuL3NjaGVtYVwiKTtcbmV4cG9ydHMuc2NoZW1hU3RvcmFnZSA9IG5ldyBzY2hlbWFfMS5Bc25TY2hlbWFTdG9yYWdlKCk7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzY2hlbWFTdG9yYWdlIiwic2NoZW1hXzEiLCJyZXF1aXJlIiwiQXNuU2NoZW1hU3RvcmFnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/storage.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/storage.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/storage.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.schemaStorage = void 0;\nconst schema_1 = __webpack_require__(/*! ./schema */ \"(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/schema.js\");\nexports.schemaStorage = new schema_1.AsnSchemaStorage();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy9zdG9yYWdlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxxQkFBcUIsR0FBRyxLQUFLO0FBQzdCLE1BQU1HLFdBQVdDLG1CQUFPQSxDQUFDLGdGQUFVO0FBQ25DSixxQkFBcUIsR0FBRyxJQUFJRyxTQUFTRSxnQkFBZ0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1tYWtldHBsYWNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL0BwZWN1bGlhci9hc24xLXNjaGVtYS9idWlsZC9janMvc3RvcmFnZS5qcz9kZDEwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zY2hlbWFTdG9yYWdlID0gdm9pZCAwO1xuY29uc3Qgc2NoZW1hXzEgPSByZXF1aXJlKFwiLi9zY2hlbWFcIik7XG5leHBvcnRzLnNjaGVtYVN0b3JhZ2UgPSBuZXcgc2NoZW1hXzEuQXNuU2NoZW1hU3RvcmFnZSgpO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwic2NoZW1hU3RvcmFnZSIsInNjaGVtYV8xIiwicmVxdWlyZSIsIkFzblNjaGVtYVN0b3JhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/storage.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/types/bit_string.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/types/bit_string.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BitString = void 0;\nconst asn1js = __webpack_require__(/*! asn1js */ \"(action-browser)/./node_modules/asn1js/build/index.js\");\nconst pvtsutils_1 = __webpack_require__(/*! pvtsutils */ \"(action-browser)/./node_modules/pvtsutils/build/index.js\");\nclass BitString {\n    constructor(params, unusedBits = 0){\n        this.unusedBits = 0;\n        this.value = new ArrayBuffer(0);\n        if (params) {\n            if (typeof params === \"number\") {\n                this.fromNumber(params);\n            } else if (pvtsutils_1.BufferSourceConverter.isBufferSource(params)) {\n                this.unusedBits = unusedBits;\n                this.value = pvtsutils_1.BufferSourceConverter.toArrayBuffer(params);\n            } else {\n                throw TypeError(\"Unsupported type of 'params' argument for BitString\");\n            }\n        }\n    }\n    fromASN(asn) {\n        if (!(asn instanceof asn1js.BitString)) {\n            throw new TypeError(\"Argument 'asn' is not instance of ASN.1 BitString\");\n        }\n        this.unusedBits = asn.valueBlock.unusedBits;\n        this.value = asn.valueBlock.valueHex;\n        return this;\n    }\n    toASN() {\n        return new asn1js.BitString({\n            unusedBits: this.unusedBits,\n            valueHex: this.value\n        });\n    }\n    toSchema(name) {\n        return new asn1js.BitString({\n            name\n        });\n    }\n    toNumber() {\n        let res = \"\";\n        const uintArray = new Uint8Array(this.value);\n        for (const octet of uintArray){\n            res += octet.toString(2).padStart(8, \"0\");\n        }\n        res = res.split(\"\").reverse().join(\"\");\n        if (this.unusedBits) {\n            res = res.slice(this.unusedBits).padStart(this.unusedBits, \"0\");\n        }\n        return parseInt(res, 2);\n    }\n    fromNumber(value) {\n        let bits = value.toString(2);\n        const octetSize = bits.length + 7 >> 3;\n        this.unusedBits = (octetSize << 3) - bits.length;\n        const octets = new Uint8Array(octetSize);\n        bits = bits.padStart(octetSize << 3, \"0\").split(\"\").reverse().join(\"\");\n        let index = 0;\n        while(index < octetSize){\n            octets[index] = parseInt(bits.slice(index << 3, (index << 3) + 8), 2);\n            index++;\n        }\n        this.value = octets.buffer;\n    }\n}\nexports.BitString = BitString;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGVjdWxpYXIvYXNuMS1zY2hlbWEvYnVpbGQvY2pzL3R5cGVzL2JpdF9zdHJpbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGlCQUFpQixHQUFHLEtBQUs7QUFDekIsTUFBTUcsU0FBU0MsbUJBQU9BLENBQUMscUVBQVE7QUFDL0IsTUFBTUMsY0FBY0QsbUJBQU9BLENBQUMsMkVBQVc7QUFDdkMsTUFBTUY7SUFDRkksWUFBWUMsTUFBTSxFQUFFQyxhQUFhLENBQUMsQ0FBRTtRQUNoQyxJQUFJLENBQUNBLFVBQVUsR0FBRztRQUNsQixJQUFJLENBQUNQLEtBQUssR0FBRyxJQUFJUSxZQUFZO1FBQzdCLElBQUlGLFFBQVE7WUFDUixJQUFJLE9BQU9BLFdBQVcsVUFBVTtnQkFDNUIsSUFBSSxDQUFDRyxVQUFVLENBQUNIO1lBQ3BCLE9BQ0ssSUFBSUYsWUFBWU0scUJBQXFCLENBQUNDLGNBQWMsQ0FBQ0wsU0FBUztnQkFDL0QsSUFBSSxDQUFDQyxVQUFVLEdBQUdBO2dCQUNsQixJQUFJLENBQUNQLEtBQUssR0FBR0ksWUFBWU0scUJBQXFCLENBQUNFLGFBQWEsQ0FBQ047WUFDakUsT0FDSztnQkFDRCxNQUFNTyxVQUFVO1lBQ3BCO1FBQ0o7SUFDSjtJQUNBQyxRQUFRQyxHQUFHLEVBQUU7UUFDVCxJQUFJLENBQUVBLENBQUFBLGVBQWViLE9BQU9ELFNBQVMsR0FBRztZQUNwQyxNQUFNLElBQUlZLFVBQVU7UUFDeEI7UUFDQSxJQUFJLENBQUNOLFVBQVUsR0FBR1EsSUFBSUMsVUFBVSxDQUFDVCxVQUFVO1FBQzNDLElBQUksQ0FBQ1AsS0FBSyxHQUFHZSxJQUFJQyxVQUFVLENBQUNDLFFBQVE7UUFDcEMsT0FBTyxJQUFJO0lBQ2Y7SUFDQUMsUUFBUTtRQUNKLE9BQU8sSUFBSWhCLE9BQU9ELFNBQVMsQ0FBQztZQUFFTSxZQUFZLElBQUksQ0FBQ0EsVUFBVTtZQUFFVSxVQUFVLElBQUksQ0FBQ2pCLEtBQUs7UUFBQztJQUNwRjtJQUNBbUIsU0FBU0MsSUFBSSxFQUFFO1FBQ1gsT0FBTyxJQUFJbEIsT0FBT0QsU0FBUyxDQUFDO1lBQUVtQjtRQUFLO0lBQ3ZDO0lBQ0FDLFdBQVc7UUFDUCxJQUFJQyxNQUFNO1FBQ1YsTUFBTUMsWUFBWSxJQUFJQyxXQUFXLElBQUksQ0FBQ3hCLEtBQUs7UUFDM0MsS0FBSyxNQUFNeUIsU0FBU0YsVUFBVztZQUMzQkQsT0FBT0csTUFBTUMsUUFBUSxDQUFDLEdBQUdDLFFBQVEsQ0FBQyxHQUFHO1FBQ3pDO1FBQ0FMLE1BQU1BLElBQUlNLEtBQUssQ0FBQyxJQUFJQyxPQUFPLEdBQUdDLElBQUksQ0FBQztRQUNuQyxJQUFJLElBQUksQ0FBQ3ZCLFVBQVUsRUFBRTtZQUNqQmUsTUFBTUEsSUFBSVMsS0FBSyxDQUFDLElBQUksQ0FBQ3hCLFVBQVUsRUFBRW9CLFFBQVEsQ0FBQyxJQUFJLENBQUNwQixVQUFVLEVBQUU7UUFDL0Q7UUFDQSxPQUFPeUIsU0FBU1YsS0FBSztJQUN6QjtJQUNBYixXQUFXVCxLQUFLLEVBQUU7UUFDZCxJQUFJaUMsT0FBT2pDLE1BQU0wQixRQUFRLENBQUM7UUFDMUIsTUFBTVEsWUFBWSxLQUFNQyxNQUFNLEdBQUcsS0FBTTtRQUN2QyxJQUFJLENBQUM1QixVQUFVLEdBQUcsQ0FBQzJCLGFBQWEsS0FBS0QsS0FBS0UsTUFBTTtRQUNoRCxNQUFNQyxTQUFTLElBQUlaLFdBQVdVO1FBQzlCRCxPQUFPQSxLQUFLTixRQUFRLENBQUNPLGFBQWEsR0FBRyxLQUFLTixLQUFLLENBQUMsSUFBSUMsT0FBTyxHQUFHQyxJQUFJLENBQUM7UUFDbkUsSUFBSU8sUUFBUTtRQUNaLE1BQU9BLFFBQVFILFVBQVc7WUFDdEJFLE1BQU0sQ0FBQ0MsTUFBTSxHQUFHTCxTQUFTQyxLQUFLRixLQUFLLENBQUNNLFNBQVMsR0FBRyxDQUFDQSxTQUFTLEtBQUssSUFBSTtZQUNuRUE7UUFDSjtRQUNBLElBQUksQ0FBQ3JDLEtBQUssR0FBR29DLE9BQU9FLE1BQU07SUFDOUI7QUFDSjtBQUNBdkMsaUJBQWlCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktbWFrZXRwbGFjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9AcGVjdWxpYXIvYXNuMS1zY2hlbWEvYnVpbGQvY2pzL3R5cGVzL2JpdF9zdHJpbmcuanM/MzdkOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQml0U3RyaW5nID0gdm9pZCAwO1xuY29uc3QgYXNuMWpzID0gcmVxdWlyZShcImFzbjFqc1wiKTtcbmNvbnN0IHB2dHN1dGlsc18xID0gcmVxdWlyZShcInB2dHN1dGlsc1wiKTtcbmNsYXNzIEJpdFN0cmluZyB7XG4gICAgY29uc3RydWN0b3IocGFyYW1zLCB1bnVzZWRCaXRzID0gMCkge1xuICAgICAgICB0aGlzLnVudXNlZEJpdHMgPSAwO1xuICAgICAgICB0aGlzLnZhbHVlID0gbmV3IEFycmF5QnVmZmVyKDApO1xuICAgICAgICBpZiAocGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhcmFtcyA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgIHRoaXMuZnJvbU51bWJlcihwYXJhbXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocHZ0c3V0aWxzXzEuQnVmZmVyU291cmNlQ29udmVydGVyLmlzQnVmZmVyU291cmNlKHBhcmFtcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVudXNlZEJpdHMgPSB1bnVzZWRCaXRzO1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSBwdnRzdXRpbHNfMS5CdWZmZXJTb3VyY2VDb252ZXJ0ZXIudG9BcnJheUJ1ZmZlcihwYXJhbXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiVW5zdXBwb3J0ZWQgdHlwZSBvZiAncGFyYW1zJyBhcmd1bWVudCBmb3IgQml0U3RyaW5nXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZyb21BU04oYXNuKSB7XG4gICAgICAgIGlmICghKGFzbiBpbnN0YW5jZW9mIGFzbjFqcy5CaXRTdHJpbmcpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnQgJ2FzbicgaXMgbm90IGluc3RhbmNlIG9mIEFTTi4xIEJpdFN0cmluZ1wiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVudXNlZEJpdHMgPSBhc24udmFsdWVCbG9jay51bnVzZWRCaXRzO1xuICAgICAgICB0aGlzLnZhbHVlID0gYXNuLnZhbHVlQmxvY2sudmFsdWVIZXg7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB0b0FTTigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBhc24xanMuQml0U3RyaW5nKHsgdW51c2VkQml0czogdGhpcy51bnVzZWRCaXRzLCB2YWx1ZUhleDogdGhpcy52YWx1ZSB9KTtcbiAgICB9XG4gICAgdG9TY2hlbWEobmFtZSkge1xuICAgICAgICByZXR1cm4gbmV3IGFzbjFqcy5CaXRTdHJpbmcoeyBuYW1lIH0pO1xuICAgIH1cbiAgICB0b051bWJlcigpIHtcbiAgICAgICAgbGV0IHJlcyA9IFwiXCI7XG4gICAgICAgIGNvbnN0IHVpbnRBcnJheSA9IG5ldyBVaW50OEFycmF5KHRoaXMudmFsdWUpO1xuICAgICAgICBmb3IgKGNvbnN0IG9jdGV0IG9mIHVpbnRBcnJheSkge1xuICAgICAgICAgICAgcmVzICs9IG9jdGV0LnRvU3RyaW5nKDIpLnBhZFN0YXJ0KDgsIFwiMFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXMgPSByZXMuc3BsaXQoXCJcIikucmV2ZXJzZSgpLmpvaW4oXCJcIik7XG4gICAgICAgIGlmICh0aGlzLnVudXNlZEJpdHMpIHtcbiAgICAgICAgICAgIHJlcyA9IHJlcy5zbGljZSh0aGlzLnVudXNlZEJpdHMpLnBhZFN0YXJ0KHRoaXMudW51c2VkQml0cywgXCIwXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZUludChyZXMsIDIpO1xuICAgIH1cbiAgICBmcm9tTnVtYmVyKHZhbHVlKSB7XG4gICAgICAgIGxldCBiaXRzID0gdmFsdWUudG9TdHJpbmcoMik7XG4gICAgICAgIGNvbnN0IG9jdGV0U2l6ZSA9IChiaXRzLmxlbmd0aCArIDcpID4+IDM7XG4gICAgICAgIHRoaXMudW51c2VkQml0cyA9IChvY3RldFNpemUgPDwgMykgLSBiaXRzLmxlbmd0aDtcbiAgICAgICAgY29uc3Qgb2N0ZXRzID0gbmV3IFVpbnQ4QXJyYXkob2N0ZXRTaXplKTtcbiAgICAgICAgYml0cyA9IGJpdHMucGFkU3RhcnQob2N0ZXRTaXplIDw8IDMsIFwiMFwiKS5zcGxpdChcIlwiKS5yZXZlcnNlKCkuam9pbihcIlwiKTtcbiAgICAgICAgbGV0IGluZGV4ID0gMDtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgb2N0ZXRTaXplKSB7XG4gICAgICAgICAgICBvY3RldHNbaW5kZXhdID0gcGFyc2VJbnQoYml0cy5zbGljZShpbmRleCA8PCAzLCAoaW5kZXggPDwgMykgKyA4KSwgMik7XG4gICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudmFsdWUgPSBvY3RldHMuYnVmZmVyO1xuICAgIH1cbn1cbmV4cG9ydHMuQml0U3RyaW5nID0gQml0U3RyaW5nO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQml0U3RyaW5nIiwiYXNuMWpzIiwicmVxdWlyZSIsInB2dHN1dGlsc18xIiwiY29uc3RydWN0b3IiLCJwYXJhbXMiLCJ1bnVzZWRCaXRzIiwiQXJyYXlCdWZmZXIiLCJmcm9tTnVtYmVyIiwiQnVmZmVyU291cmNlQ29udmVydGVyIiwiaXNCdWZmZXJTb3VyY2UiLCJ0b0FycmF5QnVmZmVyIiwiVHlwZUVycm9yIiwiZnJvbUFTTiIsImFzbiIsInZhbHVlQmxvY2siLCJ2YWx1ZUhleCIsInRvQVNOIiwidG9TY2hlbWEiLCJuYW1lIiwidG9OdW1iZXIiLCJyZXMiLCJ1aW50QXJyYXkiLCJVaW50OEFycmF5Iiwib2N0ZXQiLCJ0b1N0cmluZyIsInBhZFN0YXJ0Iiwic3BsaXQiLCJyZXZlcnNlIiwiam9pbiIsInNsaWNlIiwicGFyc2VJbnQiLCJiaXRzIiwib2N0ZXRTaXplIiwibGVuZ3RoIiwib2N0ZXRzIiwiaW5kZXgiLCJidWZmZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/types/bit_string.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/types/bit_string.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/types/bit_string.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BitString = void 0;\nconst asn1js = __webpack_require__(/*! asn1js */ \"(rsc)/./node_modules/asn1js/build/index.js\");\nconst pvtsutils_1 = __webpack_require__(/*! pvtsutils */ \"(rsc)/./node_modules/pvtsutils/build/index.js\");\nclass BitString {\n    constructor(params, unusedBits = 0){\n        this.unusedBits = 0;\n        this.value = new ArrayBuffer(0);\n        if (params) {\n            if (typeof params === \"number\") {\n                this.fromNumber(params);\n            } else if (pvtsutils_1.BufferSourceConverter.isBufferSource(params)) {\n                this.unusedBits = unusedBits;\n                this.value = pvtsutils_1.BufferSourceConverter.toArrayBuffer(params);\n            } else {\n                throw TypeError(\"Unsupported type of 'params' argument for BitString\");\n            }\n        }\n    }\n    fromASN(asn) {\n        if (!(asn instanceof asn1js.BitString)) {\n            throw new TypeError(\"Argument 'asn' is not instance of ASN.1 BitString\");\n        }\n        this.unusedBits = asn.valueBlock.unusedBits;\n        this.value = asn.valueBlock.valueHex;\n        return this;\n    }\n    toASN() {\n        return new asn1js.BitString({\n            unusedBits: this.unusedBits,\n            valueHex: this.value\n        });\n    }\n    toSchema(name) {\n        return new asn1js.BitString({\n            name\n        });\n    }\n    toNumber() {\n        let res = \"\";\n        const uintArray = new Uint8Array(this.value);\n        for (const octet of uintArray){\n            res += octet.toString(2).padStart(8, \"0\");\n        }\n        res = res.split(\"\").reverse().join(\"\");\n        if (this.unusedBits) {\n            res = res.slice(this.unusedBits).padStart(this.unusedBits, \"0\");\n        }\n        return parseInt(res, 2);\n    }\n    fromNumber(value) {\n        let bits = value.toString(2);\n        const octetSize = bits.length + 7 >> 3;\n        this.unusedBits = (octetSize << 3) - bits.length;\n        const octets = new Uint8Array(octetSize);\n        bits = bits.padStart(octetSize << 3, \"0\").split(\"\").reverse().join(\"\");\n        let index = 0;\n        while(index < octetSize){\n            octets[index] = parseInt(bits.slice(index << 3, (index << 3) + 8), 2);\n            index++;\n        }\n        this.value = octets.buffer;\n    }\n}\nexports.BitString = BitString;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy90eXBlcy9iaXRfc3RyaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxpQkFBaUIsR0FBRyxLQUFLO0FBQ3pCLE1BQU1HLFNBQVNDLG1CQUFPQSxDQUFDLDBEQUFRO0FBQy9CLE1BQU1DLGNBQWNELG1CQUFPQSxDQUFDLGdFQUFXO0FBQ3ZDLE1BQU1GO0lBQ0ZJLFlBQVlDLE1BQU0sRUFBRUMsYUFBYSxDQUFDLENBQUU7UUFDaEMsSUFBSSxDQUFDQSxVQUFVLEdBQUc7UUFDbEIsSUFBSSxDQUFDUCxLQUFLLEdBQUcsSUFBSVEsWUFBWTtRQUM3QixJQUFJRixRQUFRO1lBQ1IsSUFBSSxPQUFPQSxXQUFXLFVBQVU7Z0JBQzVCLElBQUksQ0FBQ0csVUFBVSxDQUFDSDtZQUNwQixPQUNLLElBQUlGLFlBQVlNLHFCQUFxQixDQUFDQyxjQUFjLENBQUNMLFNBQVM7Z0JBQy9ELElBQUksQ0FBQ0MsVUFBVSxHQUFHQTtnQkFDbEIsSUFBSSxDQUFDUCxLQUFLLEdBQUdJLFlBQVlNLHFCQUFxQixDQUFDRSxhQUFhLENBQUNOO1lBQ2pFLE9BQ0s7Z0JBQ0QsTUFBTU8sVUFBVTtZQUNwQjtRQUNKO0lBQ0o7SUFDQUMsUUFBUUMsR0FBRyxFQUFFO1FBQ1QsSUFBSSxDQUFFQSxDQUFBQSxlQUFlYixPQUFPRCxTQUFTLEdBQUc7WUFDcEMsTUFBTSxJQUFJWSxVQUFVO1FBQ3hCO1FBQ0EsSUFBSSxDQUFDTixVQUFVLEdBQUdRLElBQUlDLFVBQVUsQ0FBQ1QsVUFBVTtRQUMzQyxJQUFJLENBQUNQLEtBQUssR0FBR2UsSUFBSUMsVUFBVSxDQUFDQyxRQUFRO1FBQ3BDLE9BQU8sSUFBSTtJQUNmO0lBQ0FDLFFBQVE7UUFDSixPQUFPLElBQUloQixPQUFPRCxTQUFTLENBQUM7WUFBRU0sWUFBWSxJQUFJLENBQUNBLFVBQVU7WUFBRVUsVUFBVSxJQUFJLENBQUNqQixLQUFLO1FBQUM7SUFDcEY7SUFDQW1CLFNBQVNDLElBQUksRUFBRTtRQUNYLE9BQU8sSUFBSWxCLE9BQU9ELFNBQVMsQ0FBQztZQUFFbUI7UUFBSztJQUN2QztJQUNBQyxXQUFXO1FBQ1AsSUFBSUMsTUFBTTtRQUNWLE1BQU1DLFlBQVksSUFBSUMsV0FBVyxJQUFJLENBQUN4QixLQUFLO1FBQzNDLEtBQUssTUFBTXlCLFNBQVNGLFVBQVc7WUFDM0JELE9BQU9HLE1BQU1DLFFBQVEsQ0FBQyxHQUFHQyxRQUFRLENBQUMsR0FBRztRQUN6QztRQUNBTCxNQUFNQSxJQUFJTSxLQUFLLENBQUMsSUFBSUMsT0FBTyxHQUFHQyxJQUFJLENBQUM7UUFDbkMsSUFBSSxJQUFJLENBQUN2QixVQUFVLEVBQUU7WUFDakJlLE1BQU1BLElBQUlTLEtBQUssQ0FBQyxJQUFJLENBQUN4QixVQUFVLEVBQUVvQixRQUFRLENBQUMsSUFBSSxDQUFDcEIsVUFBVSxFQUFFO1FBQy9EO1FBQ0EsT0FBT3lCLFNBQVNWLEtBQUs7SUFDekI7SUFDQWIsV0FBV1QsS0FBSyxFQUFFO1FBQ2QsSUFBSWlDLE9BQU9qQyxNQUFNMEIsUUFBUSxDQUFDO1FBQzFCLE1BQU1RLFlBQVksS0FBTUMsTUFBTSxHQUFHLEtBQU07UUFDdkMsSUFBSSxDQUFDNUIsVUFBVSxHQUFHLENBQUMyQixhQUFhLEtBQUtELEtBQUtFLE1BQU07UUFDaEQsTUFBTUMsU0FBUyxJQUFJWixXQUFXVTtRQUM5QkQsT0FBT0EsS0FBS04sUUFBUSxDQUFDTyxhQUFhLEdBQUcsS0FBS04sS0FBSyxDQUFDLElBQUlDLE9BQU8sR0FBR0MsSUFBSSxDQUFDO1FBQ25FLElBQUlPLFFBQVE7UUFDWixNQUFPQSxRQUFRSCxVQUFXO1lBQ3RCRSxNQUFNLENBQUNDLE1BQU0sR0FBR0wsU0FBU0MsS0FBS0YsS0FBSyxDQUFDTSxTQUFTLEdBQUcsQ0FBQ0EsU0FBUyxLQUFLLElBQUk7WUFDbkVBO1FBQ0o7UUFDQSxJQUFJLENBQUNyQyxLQUFLLEdBQUdvQyxPQUFPRSxNQUFNO0lBQzlCO0FBQ0o7QUFDQXZDLGlCQUFpQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLW1ha2V0cGxhY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy90eXBlcy9iaXRfc3RyaW5nLmpzPzM3ZDkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJpdFN0cmluZyA9IHZvaWQgMDtcbmNvbnN0IGFzbjFqcyA9IHJlcXVpcmUoXCJhc24xanNcIik7XG5jb25zdCBwdnRzdXRpbHNfMSA9IHJlcXVpcmUoXCJwdnRzdXRpbHNcIik7XG5jbGFzcyBCaXRTdHJpbmcge1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtcywgdW51c2VkQml0cyA9IDApIHtcbiAgICAgICAgdGhpcy51bnVzZWRCaXRzID0gMDtcbiAgICAgICAgdGhpcy52YWx1ZSA9IG5ldyBBcnJheUJ1ZmZlcigwKTtcbiAgICAgICAgaWYgKHBhcmFtcykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXMgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZyb21OdW1iZXIocGFyYW1zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHB2dHN1dGlsc18xLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci5pc0J1ZmZlclNvdXJjZShwYXJhbXMpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51bnVzZWRCaXRzID0gdW51c2VkQml0cztcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gcHZ0c3V0aWxzXzEuQnVmZmVyU291cmNlQ29udmVydGVyLnRvQXJyYXlCdWZmZXIocGFyYW1zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIlVuc3VwcG9ydGVkIHR5cGUgb2YgJ3BhcmFtcycgYXJndW1lbnQgZm9yIEJpdFN0cmluZ1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmcm9tQVNOKGFzbikge1xuICAgICAgICBpZiAoIShhc24gaW5zdGFuY2VvZiBhc24xanMuQml0U3RyaW5nKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50ICdhc24nIGlzIG5vdCBpbnN0YW5jZSBvZiBBU04uMSBCaXRTdHJpbmdcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51bnVzZWRCaXRzID0gYXNuLnZhbHVlQmxvY2sudW51c2VkQml0cztcbiAgICAgICAgdGhpcy52YWx1ZSA9IGFzbi52YWx1ZUJsb2NrLnZhbHVlSGV4O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgdG9BU04oKSB7XG4gICAgICAgIHJldHVybiBuZXcgYXNuMWpzLkJpdFN0cmluZyh7IHVudXNlZEJpdHM6IHRoaXMudW51c2VkQml0cywgdmFsdWVIZXg6IHRoaXMudmFsdWUgfSk7XG4gICAgfVxuICAgIHRvU2NoZW1hKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBhc24xanMuQml0U3RyaW5nKHsgbmFtZSB9KTtcbiAgICB9XG4gICAgdG9OdW1iZXIoKSB7XG4gICAgICAgIGxldCByZXMgPSBcIlwiO1xuICAgICAgICBjb25zdCB1aW50QXJyYXkgPSBuZXcgVWludDhBcnJheSh0aGlzLnZhbHVlKTtcbiAgICAgICAgZm9yIChjb25zdCBvY3RldCBvZiB1aW50QXJyYXkpIHtcbiAgICAgICAgICAgIHJlcyArPSBvY3RldC50b1N0cmluZygyKS5wYWRTdGFydCg4LCBcIjBcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmVzID0gcmVzLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpO1xuICAgICAgICBpZiAodGhpcy51bnVzZWRCaXRzKSB7XG4gICAgICAgICAgICByZXMgPSByZXMuc2xpY2UodGhpcy51bnVzZWRCaXRzKS5wYWRTdGFydCh0aGlzLnVudXNlZEJpdHMsIFwiMFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyc2VJbnQocmVzLCAyKTtcbiAgICB9XG4gICAgZnJvbU51bWJlcih2YWx1ZSkge1xuICAgICAgICBsZXQgYml0cyA9IHZhbHVlLnRvU3RyaW5nKDIpO1xuICAgICAgICBjb25zdCBvY3RldFNpemUgPSAoYml0cy5sZW5ndGggKyA3KSA+PiAzO1xuICAgICAgICB0aGlzLnVudXNlZEJpdHMgPSAob2N0ZXRTaXplIDw8IDMpIC0gYml0cy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IG9jdGV0cyA9IG5ldyBVaW50OEFycmF5KG9jdGV0U2l6ZSk7XG4gICAgICAgIGJpdHMgPSBiaXRzLnBhZFN0YXJ0KG9jdGV0U2l6ZSA8PCAzLCBcIjBcIikuc3BsaXQoXCJcIikucmV2ZXJzZSgpLmpvaW4oXCJcIik7XG4gICAgICAgIGxldCBpbmRleCA9IDA7XG4gICAgICAgIHdoaWxlIChpbmRleCA8IG9jdGV0U2l6ZSkge1xuICAgICAgICAgICAgb2N0ZXRzW2luZGV4XSA9IHBhcnNlSW50KGJpdHMuc2xpY2UoaW5kZXggPDwgMywgKGluZGV4IDw8IDMpICsgOCksIDIpO1xuICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZhbHVlID0gb2N0ZXRzLmJ1ZmZlcjtcbiAgICB9XG59XG5leHBvcnRzLkJpdFN0cmluZyA9IEJpdFN0cmluZztcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkJpdFN0cmluZyIsImFzbjFqcyIsInJlcXVpcmUiLCJwdnRzdXRpbHNfMSIsImNvbnN0cnVjdG9yIiwicGFyYW1zIiwidW51c2VkQml0cyIsIkFycmF5QnVmZmVyIiwiZnJvbU51bWJlciIsIkJ1ZmZlclNvdXJjZUNvbnZlcnRlciIsImlzQnVmZmVyU291cmNlIiwidG9BcnJheUJ1ZmZlciIsIlR5cGVFcnJvciIsImZyb21BU04iLCJhc24iLCJ2YWx1ZUJsb2NrIiwidmFsdWVIZXgiLCJ0b0FTTiIsInRvU2NoZW1hIiwibmFtZSIsInRvTnVtYmVyIiwicmVzIiwidWludEFycmF5IiwiVWludDhBcnJheSIsIm9jdGV0IiwidG9TdHJpbmciLCJwYWRTdGFydCIsInNwbGl0IiwicmV2ZXJzZSIsImpvaW4iLCJzbGljZSIsInBhcnNlSW50IiwiYml0cyIsIm9jdGV0U2l6ZSIsImxlbmd0aCIsIm9jdGV0cyIsImluZGV4IiwiYnVmZmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/types/bit_string.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/types/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/types/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(action-browser)/./node_modules/tslib/tslib.es6.mjs\");\ntslib_1.__exportStar(__webpack_require__(/*! ./bit_string */ \"(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/types/bit_string.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./octet_string */ \"(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/types/octet_string.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGVjdWxpYXIvYXNuMS1zY2hlbWEvYnVpbGQvY2pzL3R5cGVzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLFVBQVVDLG1CQUFPQSxDQUFDLGtFQUFPO0FBQy9CRCxRQUFRRSxZQUFZLENBQUNELG1CQUFPQSxDQUFDLHlHQUFjLEdBQUdIO0FBQzlDRSxRQUFRRSxZQUFZLENBQUNELG1CQUFPQSxDQUFDLDZHQUFnQixHQUFHSCIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLW1ha2V0cGxhY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy90eXBlcy9pbmRleC5qcz81YjVlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2JpdF9zdHJpbmdcIiksIGV4cG9ydHMpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vb2N0ZXRfc3RyaW5nXCIpLCBleHBvcnRzKTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRzbGliXzEiLCJyZXF1aXJlIiwiX19leHBvcnRTdGFyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/types/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/types/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/types/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\ntslib_1.__exportStar(__webpack_require__(/*! ./bit_string */ \"(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/types/bit_string.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./octet_string */ \"(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/types/octet_string.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy90eXBlcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxVQUFVQyxtQkFBT0EsQ0FBQyx1REFBTztBQUMvQkQsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyw4RkFBYyxHQUFHSDtBQUM5Q0UsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyxrR0FBZ0IsR0FBR0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1tYWtldHBsYWNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL0BwZWN1bGlhci9hc24xLXNjaGVtYS9idWlsZC9janMvdHlwZXMvaW5kZXguanM/NWI1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9iaXRfc3RyaW5nXCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL29jdGV0X3N0cmluZ1wiKSwgZXhwb3J0cyk7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0c2xpYl8xIiwicmVxdWlyZSIsIl9fZXhwb3J0U3RhciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/types/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/types/octet_string.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/types/octet_string.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.OctetString = void 0;\nconst asn1js = __webpack_require__(/*! asn1js */ \"(action-browser)/./node_modules/asn1js/build/index.js\");\nconst pvtsutils_1 = __webpack_require__(/*! pvtsutils */ \"(action-browser)/./node_modules/pvtsutils/build/index.js\");\nclass OctetString {\n    constructor(param){\n        if (typeof param === \"number\") {\n            this.buffer = new ArrayBuffer(param);\n        } else {\n            if (pvtsutils_1.BufferSourceConverter.isBufferSource(param)) {\n                this.buffer = pvtsutils_1.BufferSourceConverter.toArrayBuffer(param);\n            } else if (Array.isArray(param)) {\n                this.buffer = new Uint8Array(param);\n            } else {\n                this.buffer = new ArrayBuffer(0);\n            }\n        }\n    }\n    get byteLength() {\n        return this.buffer.byteLength;\n    }\n    get byteOffset() {\n        return 0;\n    }\n    fromASN(asn) {\n        if (!(asn instanceof asn1js.OctetString)) {\n            throw new TypeError(\"Argument 'asn' is not instance of ASN.1 OctetString\");\n        }\n        this.buffer = asn.valueBlock.valueHex;\n        return this;\n    }\n    toASN() {\n        return new asn1js.OctetString({\n            valueHex: this.buffer\n        });\n    }\n    toSchema(name) {\n        return new asn1js.OctetString({\n            name\n        });\n    }\n}\nexports.OctetString = OctetString;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGVjdWxpYXIvYXNuMS1zY2hlbWEvYnVpbGQvY2pzL3R5cGVzL29jdGV0X3N0cmluZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsbUJBQW1CLEdBQUcsS0FBSztBQUMzQixNQUFNRyxTQUFTQyxtQkFBT0EsQ0FBQyxxRUFBUTtBQUMvQixNQUFNQyxjQUFjRCxtQkFBT0EsQ0FBQywyRUFBVztBQUN2QyxNQUFNRjtJQUNGSSxZQUFZQyxLQUFLLENBQUU7UUFDZixJQUFJLE9BQU9BLFVBQVUsVUFBVTtZQUMzQixJQUFJLENBQUNDLE1BQU0sR0FBRyxJQUFJQyxZQUFZRjtRQUNsQyxPQUNLO1lBQ0QsSUFBSUYsWUFBWUsscUJBQXFCLENBQUNDLGNBQWMsQ0FBQ0osUUFBUTtnQkFDekQsSUFBSSxDQUFDQyxNQUFNLEdBQUdILFlBQVlLLHFCQUFxQixDQUFDRSxhQUFhLENBQUNMO1lBQ2xFLE9BQ0ssSUFBSU0sTUFBTUMsT0FBTyxDQUFDUCxRQUFRO2dCQUMzQixJQUFJLENBQUNDLE1BQU0sR0FBRyxJQUFJTyxXQUFXUjtZQUNqQyxPQUNLO2dCQUNELElBQUksQ0FBQ0MsTUFBTSxHQUFHLElBQUlDLFlBQVk7WUFDbEM7UUFDSjtJQUNKO0lBQ0EsSUFBSU8sYUFBYTtRQUNiLE9BQU8sSUFBSSxDQUFDUixNQUFNLENBQUNRLFVBQVU7SUFDakM7SUFDQSxJQUFJQyxhQUFhO1FBQ2IsT0FBTztJQUNYO0lBQ0FDLFFBQVFDLEdBQUcsRUFBRTtRQUNULElBQUksQ0FBRUEsQ0FBQUEsZUFBZWhCLE9BQU9ELFdBQVcsR0FBRztZQUN0QyxNQUFNLElBQUlrQixVQUFVO1FBQ3hCO1FBQ0EsSUFBSSxDQUFDWixNQUFNLEdBQUdXLElBQUlFLFVBQVUsQ0FBQ0MsUUFBUTtRQUNyQyxPQUFPLElBQUk7SUFDZjtJQUNBQyxRQUFRO1FBQ0osT0FBTyxJQUFJcEIsT0FBT0QsV0FBVyxDQUFDO1lBQUVvQixVQUFVLElBQUksQ0FBQ2QsTUFBTTtRQUFDO0lBQzFEO0lBQ0FnQixTQUFTQyxJQUFJLEVBQUU7UUFDWCxPQUFPLElBQUl0QixPQUFPRCxXQUFXLENBQUM7WUFBRXVCO1FBQUs7SUFDekM7QUFDSjtBQUNBekIsbUJBQW1CLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktbWFrZXRwbGFjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9AcGVjdWxpYXIvYXNuMS1zY2hlbWEvYnVpbGQvY2pzL3R5cGVzL29jdGV0X3N0cmluZy5qcz9hYTA1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PY3RldFN0cmluZyA9IHZvaWQgMDtcbmNvbnN0IGFzbjFqcyA9IHJlcXVpcmUoXCJhc24xanNcIik7XG5jb25zdCBwdnRzdXRpbHNfMSA9IHJlcXVpcmUoXCJwdnRzdXRpbHNcIik7XG5jbGFzcyBPY3RldFN0cmluZyB7XG4gICAgY29uc3RydWN0b3IocGFyYW0pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdGhpcy5idWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIocGFyYW0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHB2dHN1dGlsc18xLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci5pc0J1ZmZlclNvdXJjZShwYXJhbSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IHB2dHN1dGlsc18xLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci50b0FycmF5QnVmZmVyKHBhcmFtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocGFyYW0pKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5idWZmZXIgPSBuZXcgVWludDhBcnJheShwYXJhbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcigwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgYnl0ZUxlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgfVxuICAgIGdldCBieXRlT2Zmc2V0KCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgZnJvbUFTTihhc24pIHtcbiAgICAgICAgaWYgKCEoYXNuIGluc3RhbmNlb2YgYXNuMWpzLk9jdGV0U3RyaW5nKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50ICdhc24nIGlzIG5vdCBpbnN0YW5jZSBvZiBBU04uMSBPY3RldFN0cmluZ1wiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJ1ZmZlciA9IGFzbi52YWx1ZUJsb2NrLnZhbHVlSGV4O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgdG9BU04oKSB7XG4gICAgICAgIHJldHVybiBuZXcgYXNuMWpzLk9jdGV0U3RyaW5nKHsgdmFsdWVIZXg6IHRoaXMuYnVmZmVyIH0pO1xuICAgIH1cbiAgICB0b1NjaGVtYShuYW1lKSB7XG4gICAgICAgIHJldHVybiBuZXcgYXNuMWpzLk9jdGV0U3RyaW5nKHsgbmFtZSB9KTtcbiAgICB9XG59XG5leHBvcnRzLk9jdGV0U3RyaW5nID0gT2N0ZXRTdHJpbmc7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJPY3RldFN0cmluZyIsImFzbjFqcyIsInJlcXVpcmUiLCJwdnRzdXRpbHNfMSIsImNvbnN0cnVjdG9yIiwicGFyYW0iLCJidWZmZXIiLCJBcnJheUJ1ZmZlciIsIkJ1ZmZlclNvdXJjZUNvbnZlcnRlciIsImlzQnVmZmVyU291cmNlIiwidG9BcnJheUJ1ZmZlciIsIkFycmF5IiwiaXNBcnJheSIsIlVpbnQ4QXJyYXkiLCJieXRlTGVuZ3RoIiwiYnl0ZU9mZnNldCIsImZyb21BU04iLCJhc24iLCJUeXBlRXJyb3IiLCJ2YWx1ZUJsb2NrIiwidmFsdWVIZXgiLCJ0b0FTTiIsInRvU2NoZW1hIiwibmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/types/octet_string.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/types/octet_string.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/types/octet_string.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.OctetString = void 0;\nconst asn1js = __webpack_require__(/*! asn1js */ \"(rsc)/./node_modules/asn1js/build/index.js\");\nconst pvtsutils_1 = __webpack_require__(/*! pvtsutils */ \"(rsc)/./node_modules/pvtsutils/build/index.js\");\nclass OctetString {\n    constructor(param){\n        if (typeof param === \"number\") {\n            this.buffer = new ArrayBuffer(param);\n        } else {\n            if (pvtsutils_1.BufferSourceConverter.isBufferSource(param)) {\n                this.buffer = pvtsutils_1.BufferSourceConverter.toArrayBuffer(param);\n            } else if (Array.isArray(param)) {\n                this.buffer = new Uint8Array(param);\n            } else {\n                this.buffer = new ArrayBuffer(0);\n            }\n        }\n    }\n    get byteLength() {\n        return this.buffer.byteLength;\n    }\n    get byteOffset() {\n        return 0;\n    }\n    fromASN(asn) {\n        if (!(asn instanceof asn1js.OctetString)) {\n            throw new TypeError(\"Argument 'asn' is not instance of ASN.1 OctetString\");\n        }\n        this.buffer = asn.valueBlock.valueHex;\n        return this;\n    }\n    toASN() {\n        return new asn1js.OctetString({\n            valueHex: this.buffer\n        });\n    }\n    toSchema(name) {\n        return new asn1js.OctetString({\n            name\n        });\n    }\n}\nexports.OctetString = OctetString;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy90eXBlcy9vY3RldF9zdHJpbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG1CQUFtQixHQUFHLEtBQUs7QUFDM0IsTUFBTUcsU0FBU0MsbUJBQU9BLENBQUMsMERBQVE7QUFDL0IsTUFBTUMsY0FBY0QsbUJBQU9BLENBQUMsZ0VBQVc7QUFDdkMsTUFBTUY7SUFDRkksWUFBWUMsS0FBSyxDQUFFO1FBQ2YsSUFBSSxPQUFPQSxVQUFVLFVBQVU7WUFDM0IsSUFBSSxDQUFDQyxNQUFNLEdBQUcsSUFBSUMsWUFBWUY7UUFDbEMsT0FDSztZQUNELElBQUlGLFlBQVlLLHFCQUFxQixDQUFDQyxjQUFjLENBQUNKLFFBQVE7Z0JBQ3pELElBQUksQ0FBQ0MsTUFBTSxHQUFHSCxZQUFZSyxxQkFBcUIsQ0FBQ0UsYUFBYSxDQUFDTDtZQUNsRSxPQUNLLElBQUlNLE1BQU1DLE9BQU8sQ0FBQ1AsUUFBUTtnQkFDM0IsSUFBSSxDQUFDQyxNQUFNLEdBQUcsSUFBSU8sV0FBV1I7WUFDakMsT0FDSztnQkFDRCxJQUFJLENBQUNDLE1BQU0sR0FBRyxJQUFJQyxZQUFZO1lBQ2xDO1FBQ0o7SUFDSjtJQUNBLElBQUlPLGFBQWE7UUFDYixPQUFPLElBQUksQ0FBQ1IsTUFBTSxDQUFDUSxVQUFVO0lBQ2pDO0lBQ0EsSUFBSUMsYUFBYTtRQUNiLE9BQU87SUFDWDtJQUNBQyxRQUFRQyxHQUFHLEVBQUU7UUFDVCxJQUFJLENBQUVBLENBQUFBLGVBQWVoQixPQUFPRCxXQUFXLEdBQUc7WUFDdEMsTUFBTSxJQUFJa0IsVUFBVTtRQUN4QjtRQUNBLElBQUksQ0FBQ1osTUFBTSxHQUFHVyxJQUFJRSxVQUFVLENBQUNDLFFBQVE7UUFDckMsT0FBTyxJQUFJO0lBQ2Y7SUFDQUMsUUFBUTtRQUNKLE9BQU8sSUFBSXBCLE9BQU9ELFdBQVcsQ0FBQztZQUFFb0IsVUFBVSxJQUFJLENBQUNkLE1BQU07UUFBQztJQUMxRDtJQUNBZ0IsU0FBU0MsSUFBSSxFQUFFO1FBQ1gsT0FBTyxJQUFJdEIsT0FBT0QsV0FBVyxDQUFDO1lBQUV1QjtRQUFLO0lBQ3pDO0FBQ0o7QUFDQXpCLG1CQUFtQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLW1ha2V0cGxhY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy90eXBlcy9vY3RldF9zdHJpbmcuanM/YWEwNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuT2N0ZXRTdHJpbmcgPSB2b2lkIDA7XG5jb25zdCBhc24xanMgPSByZXF1aXJlKFwiYXNuMWpzXCIpO1xuY29uc3QgcHZ0c3V0aWxzXzEgPSByZXF1aXJlKFwicHZ0c3V0aWxzXCIpO1xuY2xhc3MgT2N0ZXRTdHJpbmcge1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcGFyYW0gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKHBhcmFtKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChwdnRzdXRpbHNfMS5CdWZmZXJTb3VyY2VDb252ZXJ0ZXIuaXNCdWZmZXJTb3VyY2UocGFyYW0pKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5idWZmZXIgPSBwdnRzdXRpbHNfMS5CdWZmZXJTb3VyY2VDb252ZXJ0ZXIudG9BcnJheUJ1ZmZlcihwYXJhbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHBhcmFtKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkocGFyYW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5idWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGJ5dGVMZW5ndGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xuICAgIH1cbiAgICBnZXQgYnl0ZU9mZnNldCgpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGZyb21BU04oYXNuKSB7XG4gICAgICAgIGlmICghKGFzbiBpbnN0YW5jZW9mIGFzbjFqcy5PY3RldFN0cmluZykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudCAnYXNuJyBpcyBub3QgaW5zdGFuY2Ugb2YgQVNOLjEgT2N0ZXRTdHJpbmdcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5idWZmZXIgPSBhc24udmFsdWVCbG9jay52YWx1ZUhleDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHRvQVNOKCkge1xuICAgICAgICByZXR1cm4gbmV3IGFzbjFqcy5PY3RldFN0cmluZyh7IHZhbHVlSGV4OiB0aGlzLmJ1ZmZlciB9KTtcbiAgICB9XG4gICAgdG9TY2hlbWEobmFtZSkge1xuICAgICAgICByZXR1cm4gbmV3IGFzbjFqcy5PY3RldFN0cmluZyh7IG5hbWUgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5PY3RldFN0cmluZyA9IE9jdGV0U3RyaW5nO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiT2N0ZXRTdHJpbmciLCJhc24xanMiLCJyZXF1aXJlIiwicHZ0c3V0aWxzXzEiLCJjb25zdHJ1Y3RvciIsInBhcmFtIiwiYnVmZmVyIiwiQXJyYXlCdWZmZXIiLCJCdWZmZXJTb3VyY2VDb252ZXJ0ZXIiLCJpc0J1ZmZlclNvdXJjZSIsInRvQXJyYXlCdWZmZXIiLCJBcnJheSIsImlzQXJyYXkiLCJVaW50OEFycmF5IiwiYnl0ZUxlbmd0aCIsImJ5dGVPZmZzZXQiLCJmcm9tQVNOIiwiYXNuIiwiVHlwZUVycm9yIiwidmFsdWVCbG9jayIsInZhbHVlSGV4IiwidG9BU04iLCJ0b1NjaGVtYSIsIm5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/types/octet_string.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@peculiar/json-schema/build/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@peculiar/json-schema/build/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * Copyright (c) 2020, Peculiar Ventures, All rights reserved.\n */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nclass JsonError extends Error {\n    constructor(message, innerError){\n        super(innerError ? `${message}. See the inner exception for more details.` : message);\n        this.message = message;\n        this.innerError = innerError;\n    }\n}\nclass TransformError extends JsonError {\n    constructor(schema, message, innerError){\n        super(message, innerError);\n        this.schema = schema;\n    }\n}\nclass ParserError extends TransformError {\n    constructor(schema, message, innerError){\n        super(schema, `JSON doesn't match to '${schema.target.name}' schema. ${message}`, innerError);\n    }\n}\nclass ValidationError extends JsonError {\n}\nclass SerializerError extends JsonError {\n    constructor(schemaName, message, innerError){\n        super(`Cannot serialize by '${schemaName}' schema. ${message}`, innerError);\n        this.schemaName = schemaName;\n    }\n}\nclass KeyError extends ParserError {\n    constructor(schema, keys, errors = {}){\n        super(schema, \"Some keys doesn't match to schema\");\n        this.keys = keys;\n        this.errors = errors;\n    }\n}\n(function(JsonPropTypes) {\n    JsonPropTypes[JsonPropTypes[\"Any\"] = 0] = \"Any\";\n    JsonPropTypes[JsonPropTypes[\"Boolean\"] = 1] = \"Boolean\";\n    JsonPropTypes[JsonPropTypes[\"Number\"] = 2] = \"Number\";\n    JsonPropTypes[JsonPropTypes[\"String\"] = 3] = \"String\";\n})(exports.JsonPropTypes || (exports.JsonPropTypes = {}));\nfunction checkType(value, type) {\n    switch(type){\n        case exports.JsonPropTypes.Boolean:\n            return typeof value === \"boolean\";\n        case exports.JsonPropTypes.Number:\n            return typeof value === \"number\";\n        case exports.JsonPropTypes.String:\n            return typeof value === \"string\";\n    }\n    return true;\n}\nfunction throwIfTypeIsWrong(value, type) {\n    if (!checkType(value, type)) {\n        throw new TypeError(`Value must be ${exports.JsonPropTypes[type]}`);\n    }\n}\nfunction isConvertible(target) {\n    if (target && target.prototype) {\n        if (target.prototype.toJSON && target.prototype.fromJSON) {\n            return true;\n        } else {\n            return isConvertible(target.prototype);\n        }\n    } else {\n        return !!(target && target.toJSON && target.fromJSON);\n    }\n}\nclass JsonSchemaStorage {\n    constructor(){\n        this.items = new Map();\n    }\n    has(target) {\n        return this.items.has(target) || !!this.findParentSchema(target);\n    }\n    get(target) {\n        const schema = this.items.get(target) || this.findParentSchema(target);\n        if (!schema) {\n            throw new Error(\"Cannot get schema for current target\");\n        }\n        return schema;\n    }\n    create(target) {\n        const schema = {\n            names: {}\n        };\n        const parentSchema = this.findParentSchema(target);\n        if (parentSchema) {\n            Object.assign(schema, parentSchema);\n            schema.names = {};\n            for(const name in parentSchema.names){\n                schema.names[name] = Object.assign({}, parentSchema.names[name]);\n            }\n        }\n        schema.target = target;\n        return schema;\n    }\n    set(target, schema) {\n        this.items.set(target, schema);\n        return this;\n    }\n    findParentSchema(target) {\n        const parent = target.__proto__;\n        if (parent) {\n            const schema = this.items.get(parent);\n            return schema || this.findParentSchema(parent);\n        }\n        return null;\n    }\n}\nconst DEFAULT_SCHEMA = \"default\";\nconst schemaStorage = new JsonSchemaStorage();\nclass PatternValidation {\n    constructor(pattern){\n        this.pattern = new RegExp(pattern);\n    }\n    validate(value) {\n        const pattern = new RegExp(this.pattern.source, this.pattern.flags);\n        if (typeof value !== \"string\") {\n            throw new ValidationError(\"Incoming value must be string\");\n        }\n        if (!pattern.exec(value)) {\n            throw new ValidationError(`Value doesn't match to pattern '${pattern.toString()}'`);\n        }\n    }\n}\nclass InclusiveValidation {\n    constructor(min = Number.MIN_VALUE, max = Number.MAX_VALUE){\n        this.min = min;\n        this.max = max;\n    }\n    validate(value) {\n        throwIfTypeIsWrong(value, exports.JsonPropTypes.Number);\n        if (!(this.min <= value && value <= this.max)) {\n            const min = this.min === Number.MIN_VALUE ? \"MIN\" : this.min;\n            const max = this.max === Number.MAX_VALUE ? \"MAX\" : this.max;\n            throw new ValidationError(`Value doesn't match to diapason [${min},${max}]`);\n        }\n    }\n}\nclass ExclusiveValidation {\n    constructor(min = Number.MIN_VALUE, max = Number.MAX_VALUE){\n        this.min = min;\n        this.max = max;\n    }\n    validate(value) {\n        throwIfTypeIsWrong(value, exports.JsonPropTypes.Number);\n        if (!(this.min < value && value < this.max)) {\n            const min = this.min === Number.MIN_VALUE ? \"MIN\" : this.min;\n            const max = this.max === Number.MAX_VALUE ? \"MAX\" : this.max;\n            throw new ValidationError(`Value doesn't match to diapason (${min},${max})`);\n        }\n    }\n}\nclass LengthValidation {\n    constructor(length, minLength, maxLength){\n        this.length = length;\n        this.minLength = minLength;\n        this.maxLength = maxLength;\n    }\n    validate(value) {\n        if (this.length !== undefined) {\n            if (value.length !== this.length) {\n                throw new ValidationError(`Value length must be exactly ${this.length}.`);\n            }\n            return;\n        }\n        if (this.minLength !== undefined) {\n            if (value.length < this.minLength) {\n                throw new ValidationError(`Value length must be more than ${this.minLength}.`);\n            }\n        }\n        if (this.maxLength !== undefined) {\n            if (value.length > this.maxLength) {\n                throw new ValidationError(`Value length must be less than ${this.maxLength}.`);\n            }\n        }\n    }\n}\nclass EnumerationValidation {\n    constructor(enumeration){\n        this.enumeration = enumeration;\n    }\n    validate(value) {\n        throwIfTypeIsWrong(value, exports.JsonPropTypes.String);\n        if (!this.enumeration.includes(value)) {\n            throw new ValidationError(`Value must be one of ${this.enumeration.map((v)=>`'${v}'`).join(\", \")}`);\n        }\n    }\n}\nclass JsonTransform {\n    static checkValues(data, schemaItem) {\n        const values = Array.isArray(data) ? data : [\n            data\n        ];\n        for (const value of values){\n            for (const validation of schemaItem.validations){\n                if (validation instanceof LengthValidation && schemaItem.repeated) {\n                    validation.validate(data);\n                } else {\n                    validation.validate(value);\n                }\n            }\n        }\n    }\n    static checkTypes(value, schemaItem) {\n        if (schemaItem.repeated && !Array.isArray(value)) {\n            throw new TypeError(\"Value must be Array\");\n        }\n        if (typeof schemaItem.type === \"number\") {\n            const values = Array.isArray(value) ? value : [\n                value\n            ];\n            for (const v of values){\n                throwIfTypeIsWrong(v, schemaItem.type);\n            }\n        }\n    }\n    static getSchemaByName(schema, name = DEFAULT_SCHEMA) {\n        return {\n            ...schema.names[DEFAULT_SCHEMA],\n            ...schema.names[name]\n        };\n    }\n}\nclass JsonSerializer extends JsonTransform {\n    static serialize(obj, options, replacer, space) {\n        const json = this.toJSON(obj, options);\n        return JSON.stringify(json, replacer, space);\n    }\n    static toJSON(obj, options = {}) {\n        let res;\n        let targetSchema = options.targetSchema;\n        const schemaName = options.schemaName || DEFAULT_SCHEMA;\n        if (isConvertible(obj)) {\n            return obj.toJSON();\n        }\n        if (Array.isArray(obj)) {\n            res = [];\n            for (const item of obj){\n                res.push(this.toJSON(item, options));\n            }\n        } else if (typeof obj === \"object\") {\n            if (targetSchema && !schemaStorage.has(targetSchema)) {\n                throw new JsonError(\"Cannot get schema for `targetSchema` param\");\n            }\n            targetSchema = targetSchema || obj.constructor;\n            if (schemaStorage.has(targetSchema)) {\n                const schema = schemaStorage.get(targetSchema);\n                res = {};\n                const namedSchema = this.getSchemaByName(schema, schemaName);\n                for(const key in namedSchema){\n                    try {\n                        const item = namedSchema[key];\n                        const objItem = obj[key];\n                        let value;\n                        if (item.optional && objItem === undefined || item.defaultValue !== undefined && objItem === item.defaultValue) {\n                            continue;\n                        }\n                        if (!item.optional && objItem === undefined) {\n                            throw new SerializerError(targetSchema.name, `Property '${key}' is required.`);\n                        }\n                        if (typeof item.type === \"number\") {\n                            if (item.converter) {\n                                if (item.repeated) {\n                                    value = objItem.map((el)=>item.converter.toJSON(el, obj));\n                                } else {\n                                    value = item.converter.toJSON(objItem, obj);\n                                }\n                            } else {\n                                value = objItem;\n                            }\n                        } else {\n                            if (item.repeated) {\n                                value = objItem.map((el)=>this.toJSON(el, {\n                                        schemaName\n                                    }));\n                            } else {\n                                value = this.toJSON(objItem, {\n                                    schemaName\n                                });\n                            }\n                        }\n                        this.checkTypes(value, item);\n                        this.checkValues(value, item);\n                        res[item.name || key] = value;\n                    } catch (e) {\n                        if (e instanceof SerializerError) {\n                            throw e;\n                        } else {\n                            throw new SerializerError(schema.target.name, `Property '${key}' is wrong. ${e.message}`, e);\n                        }\n                    }\n                }\n            } else {\n                res = {};\n                for(const key in obj){\n                    res[key] = this.toJSON(obj[key], {\n                        schemaName\n                    });\n                }\n            }\n        } else {\n            res = obj;\n        }\n        return res;\n    }\n}\nclass JsonParser extends JsonTransform {\n    static parse(data, options) {\n        const obj = JSON.parse(data);\n        return this.fromJSON(obj, options);\n    }\n    static fromJSON(target, options) {\n        const targetSchema = options.targetSchema;\n        const schemaName = options.schemaName || DEFAULT_SCHEMA;\n        const obj = new targetSchema();\n        if (isConvertible(obj)) {\n            return obj.fromJSON(target);\n        }\n        const schema = schemaStorage.get(targetSchema);\n        const namedSchema = this.getSchemaByName(schema, schemaName);\n        const keyErrors = {};\n        if (options.strictProperty && !Array.isArray(target)) {\n            JsonParser.checkStrictProperty(target, namedSchema, schema);\n        }\n        for(const key in namedSchema){\n            try {\n                const item = namedSchema[key];\n                const name = item.name || key;\n                const value = target[name];\n                if (value === undefined && (item.optional || item.defaultValue !== undefined)) {\n                    continue;\n                }\n                if (!item.optional && value === undefined) {\n                    throw new ParserError(schema, `Property '${name}' is required.`);\n                }\n                this.checkTypes(value, item);\n                this.checkValues(value, item);\n                if (typeof item.type === \"number\") {\n                    if (item.converter) {\n                        if (item.repeated) {\n                            obj[key] = value.map((el)=>item.converter.fromJSON(el, obj));\n                        } else {\n                            obj[key] = item.converter.fromJSON(value, obj);\n                        }\n                    } else {\n                        obj[key] = value;\n                    }\n                } else {\n                    const newOptions = {\n                        ...options,\n                        targetSchema: item.type,\n                        schemaName\n                    };\n                    if (item.repeated) {\n                        obj[key] = value.map((el)=>this.fromJSON(el, newOptions));\n                    } else {\n                        obj[key] = this.fromJSON(value, newOptions);\n                    }\n                }\n            } catch (e) {\n                if (!(e instanceof ParserError)) {\n                    e = new ParserError(schema, `Property '${key}' is wrong. ${e.message}`, e);\n                }\n                if (options.strictAllKeys) {\n                    keyErrors[key] = e;\n                } else {\n                    throw e;\n                }\n            }\n        }\n        const keys = Object.keys(keyErrors);\n        if (keys.length) {\n            throw new KeyError(schema, keys, keyErrors);\n        }\n        return obj;\n    }\n    static checkStrictProperty(target, namedSchema, schema) {\n        const jsonProps = Object.keys(target);\n        const schemaProps = Object.keys(namedSchema);\n        const keys = [];\n        for (const key of jsonProps){\n            if (schemaProps.indexOf(key) === -1) {\n                keys.push(key);\n            }\n        }\n        if (keys.length) {\n            throw new KeyError(schema, keys);\n        }\n    }\n}\nfunction getValidations(item) {\n    const validations = [];\n    if (item.pattern) {\n        validations.push(new PatternValidation(item.pattern));\n    }\n    if (item.type === exports.JsonPropTypes.Number || item.type === exports.JsonPropTypes.Any) {\n        if (item.minInclusive !== undefined || item.maxInclusive !== undefined) {\n            validations.push(new InclusiveValidation(item.minInclusive, item.maxInclusive));\n        }\n        if (item.minExclusive !== undefined || item.maxExclusive !== undefined) {\n            validations.push(new ExclusiveValidation(item.minExclusive, item.maxExclusive));\n        }\n        if (item.enumeration !== undefined) {\n            validations.push(new EnumerationValidation(item.enumeration));\n        }\n    }\n    if (item.type === exports.JsonPropTypes.String || item.repeated || item.type === exports.JsonPropTypes.Any) {\n        if (item.length !== undefined || item.minLength !== undefined || item.maxLength !== undefined) {\n            validations.push(new LengthValidation(item.length, item.minLength, item.maxLength));\n        }\n    }\n    return validations;\n}\nconst JsonProp = (options = {})=>(target, propertyKey)=>{\n        const errorMessage = `Cannot set type for ${propertyKey} property of ${target.constructor.name} schema`;\n        let schema;\n        if (!schemaStorage.has(target.constructor)) {\n            schema = schemaStorage.create(target.constructor);\n            schemaStorage.set(target.constructor, schema);\n        } else {\n            schema = schemaStorage.get(target.constructor);\n            if (schema.target !== target.constructor) {\n                schema = schemaStorage.create(target.constructor);\n                schemaStorage.set(target.constructor, schema);\n            }\n        }\n        const defaultSchema = {\n            type: exports.JsonPropTypes.Any,\n            validations: []\n        };\n        const copyOptions = Object.assign(defaultSchema, options);\n        copyOptions.validations = getValidations(copyOptions);\n        if (typeof copyOptions.type !== \"number\") {\n            if (!schemaStorage.has(copyOptions.type) && !isConvertible(copyOptions.type)) {\n                throw new Error(`${errorMessage}. Assigning type doesn't have schema.`);\n            }\n        }\n        let schemaNames;\n        if (Array.isArray(options.schema)) {\n            schemaNames = options.schema;\n        } else {\n            schemaNames = [\n                options.schema || DEFAULT_SCHEMA\n            ];\n        }\n        for (const schemaName of schemaNames){\n            if (!schema.names[schemaName]) {\n                schema.names[schemaName] = {};\n            }\n            const namedSchema = schema.names[schemaName];\n            namedSchema[propertyKey] = copyOptions;\n        }\n    };\nexports.JsonError = JsonError;\nexports.JsonParser = JsonParser;\nexports.JsonProp = JsonProp;\nexports.JsonSerializer = JsonSerializer;\nexports.KeyError = KeyError;\nexports.ParserError = ParserError;\nexports.SerializerError = SerializerError;\nexports.TransformError = TransformError;\nexports.ValidationError = ValidationError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@peculiar/json-schema/build/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@peculiar/json-schema/build/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@peculiar/json-schema/build/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * Copyright (c) 2020, Peculiar Ventures, All rights reserved.\n */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nclass JsonError extends Error {\n    constructor(message, innerError){\n        super(innerError ? `${message}. See the inner exception for more details.` : message);\n        this.message = message;\n        this.innerError = innerError;\n    }\n}\nclass TransformError extends JsonError {\n    constructor(schema, message, innerError){\n        super(message, innerError);\n        this.schema = schema;\n    }\n}\nclass ParserError extends TransformError {\n    constructor(schema, message, innerError){\n        super(schema, `JSON doesn't match to '${schema.target.name}' schema. ${message}`, innerError);\n    }\n}\nclass ValidationError extends JsonError {\n}\nclass SerializerError extends JsonError {\n    constructor(schemaName, message, innerError){\n        super(`Cannot serialize by '${schemaName}' schema. ${message}`, innerError);\n        this.schemaName = schemaName;\n    }\n}\nclass KeyError extends ParserError {\n    constructor(schema, keys, errors = {}){\n        super(schema, \"Some keys doesn't match to schema\");\n        this.keys = keys;\n        this.errors = errors;\n    }\n}\n(function(JsonPropTypes) {\n    JsonPropTypes[JsonPropTypes[\"Any\"] = 0] = \"Any\";\n    JsonPropTypes[JsonPropTypes[\"Boolean\"] = 1] = \"Boolean\";\n    JsonPropTypes[JsonPropTypes[\"Number\"] = 2] = \"Number\";\n    JsonPropTypes[JsonPropTypes[\"String\"] = 3] = \"String\";\n})(exports.JsonPropTypes || (exports.JsonPropTypes = {}));\nfunction checkType(value, type) {\n    switch(type){\n        case exports.JsonPropTypes.Boolean:\n            return typeof value === \"boolean\";\n        case exports.JsonPropTypes.Number:\n            return typeof value === \"number\";\n        case exports.JsonPropTypes.String:\n            return typeof value === \"string\";\n    }\n    return true;\n}\nfunction throwIfTypeIsWrong(value, type) {\n    if (!checkType(value, type)) {\n        throw new TypeError(`Value must be ${exports.JsonPropTypes[type]}`);\n    }\n}\nfunction isConvertible(target) {\n    if (target && target.prototype) {\n        if (target.prototype.toJSON && target.prototype.fromJSON) {\n            return true;\n        } else {\n            return isConvertible(target.prototype);\n        }\n    } else {\n        return !!(target && target.toJSON && target.fromJSON);\n    }\n}\nclass JsonSchemaStorage {\n    constructor(){\n        this.items = new Map();\n    }\n    has(target) {\n        return this.items.has(target) || !!this.findParentSchema(target);\n    }\n    get(target) {\n        const schema = this.items.get(target) || this.findParentSchema(target);\n        if (!schema) {\n            throw new Error(\"Cannot get schema for current target\");\n        }\n        return schema;\n    }\n    create(target) {\n        const schema = {\n            names: {}\n        };\n        const parentSchema = this.findParentSchema(target);\n        if (parentSchema) {\n            Object.assign(schema, parentSchema);\n            schema.names = {};\n            for(const name in parentSchema.names){\n                schema.names[name] = Object.assign({}, parentSchema.names[name]);\n            }\n        }\n        schema.target = target;\n        return schema;\n    }\n    set(target, schema) {\n        this.items.set(target, schema);\n        return this;\n    }\n    findParentSchema(target) {\n        const parent = target.__proto__;\n        if (parent) {\n            const schema = this.items.get(parent);\n            return schema || this.findParentSchema(parent);\n        }\n        return null;\n    }\n}\nconst DEFAULT_SCHEMA = \"default\";\nconst schemaStorage = new JsonSchemaStorage();\nclass PatternValidation {\n    constructor(pattern){\n        this.pattern = new RegExp(pattern);\n    }\n    validate(value) {\n        const pattern = new RegExp(this.pattern.source, this.pattern.flags);\n        if (typeof value !== \"string\") {\n            throw new ValidationError(\"Incoming value must be string\");\n        }\n        if (!pattern.exec(value)) {\n            throw new ValidationError(`Value doesn't match to pattern '${pattern.toString()}'`);\n        }\n    }\n}\nclass InclusiveValidation {\n    constructor(min = Number.MIN_VALUE, max = Number.MAX_VALUE){\n        this.min = min;\n        this.max = max;\n    }\n    validate(value) {\n        throwIfTypeIsWrong(value, exports.JsonPropTypes.Number);\n        if (!(this.min <= value && value <= this.max)) {\n            const min = this.min === Number.MIN_VALUE ? \"MIN\" : this.min;\n            const max = this.max === Number.MAX_VALUE ? \"MAX\" : this.max;\n            throw new ValidationError(`Value doesn't match to diapason [${min},${max}]`);\n        }\n    }\n}\nclass ExclusiveValidation {\n    constructor(min = Number.MIN_VALUE, max = Number.MAX_VALUE){\n        this.min = min;\n        this.max = max;\n    }\n    validate(value) {\n        throwIfTypeIsWrong(value, exports.JsonPropTypes.Number);\n        if (!(this.min < value && value < this.max)) {\n            const min = this.min === Number.MIN_VALUE ? \"MIN\" : this.min;\n            const max = this.max === Number.MAX_VALUE ? \"MAX\" : this.max;\n            throw new ValidationError(`Value doesn't match to diapason (${min},${max})`);\n        }\n    }\n}\nclass LengthValidation {\n    constructor(length, minLength, maxLength){\n        this.length = length;\n        this.minLength = minLength;\n        this.maxLength = maxLength;\n    }\n    validate(value) {\n        if (this.length !== undefined) {\n            if (value.length !== this.length) {\n                throw new ValidationError(`Value length must be exactly ${this.length}.`);\n            }\n            return;\n        }\n        if (this.minLength !== undefined) {\n            if (value.length < this.minLength) {\n                throw new ValidationError(`Value length must be more than ${this.minLength}.`);\n            }\n        }\n        if (this.maxLength !== undefined) {\n            if (value.length > this.maxLength) {\n                throw new ValidationError(`Value length must be less than ${this.maxLength}.`);\n            }\n        }\n    }\n}\nclass EnumerationValidation {\n    constructor(enumeration){\n        this.enumeration = enumeration;\n    }\n    validate(value) {\n        throwIfTypeIsWrong(value, exports.JsonPropTypes.String);\n        if (!this.enumeration.includes(value)) {\n            throw new ValidationError(`Value must be one of ${this.enumeration.map((v)=>`'${v}'`).join(\", \")}`);\n        }\n    }\n}\nclass JsonTransform {\n    static checkValues(data, schemaItem) {\n        const values = Array.isArray(data) ? data : [\n            data\n        ];\n        for (const value of values){\n            for (const validation of schemaItem.validations){\n                if (validation instanceof LengthValidation && schemaItem.repeated) {\n                    validation.validate(data);\n                } else {\n                    validation.validate(value);\n                }\n            }\n        }\n    }\n    static checkTypes(value, schemaItem) {\n        if (schemaItem.repeated && !Array.isArray(value)) {\n            throw new TypeError(\"Value must be Array\");\n        }\n        if (typeof schemaItem.type === \"number\") {\n            const values = Array.isArray(value) ? value : [\n                value\n            ];\n            for (const v of values){\n                throwIfTypeIsWrong(v, schemaItem.type);\n            }\n        }\n    }\n    static getSchemaByName(schema, name = DEFAULT_SCHEMA) {\n        return {\n            ...schema.names[DEFAULT_SCHEMA],\n            ...schema.names[name]\n        };\n    }\n}\nclass JsonSerializer extends JsonTransform {\n    static serialize(obj, options, replacer, space) {\n        const json = this.toJSON(obj, options);\n        return JSON.stringify(json, replacer, space);\n    }\n    static toJSON(obj, options = {}) {\n        let res;\n        let targetSchema = options.targetSchema;\n        const schemaName = options.schemaName || DEFAULT_SCHEMA;\n        if (isConvertible(obj)) {\n            return obj.toJSON();\n        }\n        if (Array.isArray(obj)) {\n            res = [];\n            for (const item of obj){\n                res.push(this.toJSON(item, options));\n            }\n        } else if (typeof obj === \"object\") {\n            if (targetSchema && !schemaStorage.has(targetSchema)) {\n                throw new JsonError(\"Cannot get schema for `targetSchema` param\");\n            }\n            targetSchema = targetSchema || obj.constructor;\n            if (schemaStorage.has(targetSchema)) {\n                const schema = schemaStorage.get(targetSchema);\n                res = {};\n                const namedSchema = this.getSchemaByName(schema, schemaName);\n                for(const key in namedSchema){\n                    try {\n                        const item = namedSchema[key];\n                        const objItem = obj[key];\n                        let value;\n                        if (item.optional && objItem === undefined || item.defaultValue !== undefined && objItem === item.defaultValue) {\n                            continue;\n                        }\n                        if (!item.optional && objItem === undefined) {\n                            throw new SerializerError(targetSchema.name, `Property '${key}' is required.`);\n                        }\n                        if (typeof item.type === \"number\") {\n                            if (item.converter) {\n                                if (item.repeated) {\n                                    value = objItem.map((el)=>item.converter.toJSON(el, obj));\n                                } else {\n                                    value = item.converter.toJSON(objItem, obj);\n                                }\n                            } else {\n                                value = objItem;\n                            }\n                        } else {\n                            if (item.repeated) {\n                                value = objItem.map((el)=>this.toJSON(el, {\n                                        schemaName\n                                    }));\n                            } else {\n                                value = this.toJSON(objItem, {\n                                    schemaName\n                                });\n                            }\n                        }\n                        this.checkTypes(value, item);\n                        this.checkValues(value, item);\n                        res[item.name || key] = value;\n                    } catch (e) {\n                        if (e instanceof SerializerError) {\n                            throw e;\n                        } else {\n                            throw new SerializerError(schema.target.name, `Property '${key}' is wrong. ${e.message}`, e);\n                        }\n                    }\n                }\n            } else {\n                res = {};\n                for(const key in obj){\n                    res[key] = this.toJSON(obj[key], {\n                        schemaName\n                    });\n                }\n            }\n        } else {\n            res = obj;\n        }\n        return res;\n    }\n}\nclass JsonParser extends JsonTransform {\n    static parse(data, options) {\n        const obj = JSON.parse(data);\n        return this.fromJSON(obj, options);\n    }\n    static fromJSON(target, options) {\n        const targetSchema = options.targetSchema;\n        const schemaName = options.schemaName || DEFAULT_SCHEMA;\n        const obj = new targetSchema();\n        if (isConvertible(obj)) {\n            return obj.fromJSON(target);\n        }\n        const schema = schemaStorage.get(targetSchema);\n        const namedSchema = this.getSchemaByName(schema, schemaName);\n        const keyErrors = {};\n        if (options.strictProperty && !Array.isArray(target)) {\n            JsonParser.checkStrictProperty(target, namedSchema, schema);\n        }\n        for(const key in namedSchema){\n            try {\n                const item = namedSchema[key];\n                const name = item.name || key;\n                const value = target[name];\n                if (value === undefined && (item.optional || item.defaultValue !== undefined)) {\n                    continue;\n                }\n                if (!item.optional && value === undefined) {\n                    throw new ParserError(schema, `Property '${name}' is required.`);\n                }\n                this.checkTypes(value, item);\n                this.checkValues(value, item);\n                if (typeof item.type === \"number\") {\n                    if (item.converter) {\n                        if (item.repeated) {\n                            obj[key] = value.map((el)=>item.converter.fromJSON(el, obj));\n                        } else {\n                            obj[key] = item.converter.fromJSON(value, obj);\n                        }\n                    } else {\n                        obj[key] = value;\n                    }\n                } else {\n                    const newOptions = {\n                        ...options,\n                        targetSchema: item.type,\n                        schemaName\n                    };\n                    if (item.repeated) {\n                        obj[key] = value.map((el)=>this.fromJSON(el, newOptions));\n                    } else {\n                        obj[key] = this.fromJSON(value, newOptions);\n                    }\n                }\n            } catch (e) {\n                if (!(e instanceof ParserError)) {\n                    e = new ParserError(schema, `Property '${key}' is wrong. ${e.message}`, e);\n                }\n                if (options.strictAllKeys) {\n                    keyErrors[key] = e;\n                } else {\n                    throw e;\n                }\n            }\n        }\n        const keys = Object.keys(keyErrors);\n        if (keys.length) {\n            throw new KeyError(schema, keys, keyErrors);\n        }\n        return obj;\n    }\n    static checkStrictProperty(target, namedSchema, schema) {\n        const jsonProps = Object.keys(target);\n        const schemaProps = Object.keys(namedSchema);\n        const keys = [];\n        for (const key of jsonProps){\n            if (schemaProps.indexOf(key) === -1) {\n                keys.push(key);\n            }\n        }\n        if (keys.length) {\n            throw new KeyError(schema, keys);\n        }\n    }\n}\nfunction getValidations(item) {\n    const validations = [];\n    if (item.pattern) {\n        validations.push(new PatternValidation(item.pattern));\n    }\n    if (item.type === exports.JsonPropTypes.Number || item.type === exports.JsonPropTypes.Any) {\n        if (item.minInclusive !== undefined || item.maxInclusive !== undefined) {\n            validations.push(new InclusiveValidation(item.minInclusive, item.maxInclusive));\n        }\n        if (item.minExclusive !== undefined || item.maxExclusive !== undefined) {\n            validations.push(new ExclusiveValidation(item.minExclusive, item.maxExclusive));\n        }\n        if (item.enumeration !== undefined) {\n            validations.push(new EnumerationValidation(item.enumeration));\n        }\n    }\n    if (item.type === exports.JsonPropTypes.String || item.repeated || item.type === exports.JsonPropTypes.Any) {\n        if (item.length !== undefined || item.minLength !== undefined || item.maxLength !== undefined) {\n            validations.push(new LengthValidation(item.length, item.minLength, item.maxLength));\n        }\n    }\n    return validations;\n}\nconst JsonProp = (options = {})=>(target, propertyKey)=>{\n        const errorMessage = `Cannot set type for ${propertyKey} property of ${target.constructor.name} schema`;\n        let schema;\n        if (!schemaStorage.has(target.constructor)) {\n            schema = schemaStorage.create(target.constructor);\n            schemaStorage.set(target.constructor, schema);\n        } else {\n            schema = schemaStorage.get(target.constructor);\n            if (schema.target !== target.constructor) {\n                schema = schemaStorage.create(target.constructor);\n                schemaStorage.set(target.constructor, schema);\n            }\n        }\n        const defaultSchema = {\n            type: exports.JsonPropTypes.Any,\n            validations: []\n        };\n        const copyOptions = Object.assign(defaultSchema, options);\n        copyOptions.validations = getValidations(copyOptions);\n        if (typeof copyOptions.type !== \"number\") {\n            if (!schemaStorage.has(copyOptions.type) && !isConvertible(copyOptions.type)) {\n                throw new Error(`${errorMessage}. Assigning type doesn't have schema.`);\n            }\n        }\n        let schemaNames;\n        if (Array.isArray(options.schema)) {\n            schemaNames = options.schema;\n        } else {\n            schemaNames = [\n                options.schema || DEFAULT_SCHEMA\n            ];\n        }\n        for (const schemaName of schemaNames){\n            if (!schema.names[schemaName]) {\n                schema.names[schemaName] = {};\n            }\n            const namedSchema = schema.names[schemaName];\n            namedSchema[propertyKey] = copyOptions;\n        }\n    };\nexports.JsonError = JsonError;\nexports.JsonParser = JsonParser;\nexports.JsonProp = JsonProp;\nexports.JsonSerializer = JsonSerializer;\nexports.KeyError = KeyError;\nexports.ParserError = ParserError;\nexports.SerializerError = SerializerError;\nexports.TransformError = TransformError;\nexports.ValidationError = ValidationError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2pzb24tc2NoZW1hL2J1aWxkL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBOztDQUVDLEdBRUQ7QUFFQUEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsa0JBQWtCQztJQUNwQkMsWUFBWUMsT0FBTyxFQUFFQyxVQUFVLENBQUU7UUFDN0IsS0FBSyxDQUFDQSxhQUNBLENBQUMsRUFBRUQsUUFBUSwyQ0FBMkMsQ0FBQyxHQUN2REE7UUFDTixJQUFJLENBQUNBLE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNDLFVBQVUsR0FBR0E7SUFDdEI7QUFDSjtBQUVBLE1BQU1DLHVCQUF1Qkw7SUFDekJFLFlBQVlJLE1BQU0sRUFBRUgsT0FBTyxFQUFFQyxVQUFVLENBQUU7UUFDckMsS0FBSyxDQUFDRCxTQUFTQztRQUNmLElBQUksQ0FBQ0UsTUFBTSxHQUFHQTtJQUNsQjtBQUNKO0FBRUEsTUFBTUMsb0JBQW9CRjtJQUN0QkgsWUFBWUksTUFBTSxFQUFFSCxPQUFPLEVBQUVDLFVBQVUsQ0FBRTtRQUNyQyxLQUFLLENBQUNFLFFBQVEsQ0FBQyx1QkFBdUIsRUFBRUEsT0FBT0UsTUFBTSxDQUFDQyxJQUFJLENBQUMsVUFBVSxFQUFFTixRQUFRLENBQUMsRUFBRUM7SUFDdEY7QUFDSjtBQUVBLE1BQU1NLHdCQUF3QlY7QUFDOUI7QUFFQSxNQUFNVyx3QkFBd0JYO0lBQzFCRSxZQUFZVSxVQUFVLEVBQUVULE9BQU8sRUFBRUMsVUFBVSxDQUFFO1FBQ3pDLEtBQUssQ0FBQyxDQUFDLHFCQUFxQixFQUFFUSxXQUFXLFVBQVUsRUFBRVQsUUFBUSxDQUFDLEVBQUVDO1FBQ2hFLElBQUksQ0FBQ1EsVUFBVSxHQUFHQTtJQUN0QjtBQUNKO0FBRUEsTUFBTUMsaUJBQWlCTjtJQUNuQkwsWUFBWUksTUFBTSxFQUFFUSxJQUFJLEVBQUVDLFNBQVMsQ0FBQyxDQUFDLENBQUU7UUFDbkMsS0FBSyxDQUFDVCxRQUFRO1FBQ2QsSUFBSSxDQUFDUSxJQUFJLEdBQUdBO1FBQ1osSUFBSSxDQUFDQyxNQUFNLEdBQUdBO0lBQ2xCO0FBQ0o7QUFFQyxVQUFVQyxhQUFhO0lBQ3BCQSxhQUFhLENBQUNBLGFBQWEsQ0FBQyxNQUFNLEdBQUcsRUFBRSxHQUFHO0lBQzFDQSxhQUFhLENBQUNBLGFBQWEsQ0FBQyxVQUFVLEdBQUcsRUFBRSxHQUFHO0lBQzlDQSxhQUFhLENBQUNBLGFBQWEsQ0FBQyxTQUFTLEdBQUcsRUFBRSxHQUFHO0lBQzdDQSxhQUFhLENBQUNBLGFBQWEsQ0FBQyxTQUFTLEdBQUcsRUFBRSxHQUFHO0FBQ2pELEdBQUdsQixRQUFRa0IsYUFBYSxJQUFLbEIsQ0FBQUEscUJBQXFCLEdBQUcsQ0FBQztBQUV0RCxTQUFTbUIsVUFBVWxCLEtBQUssRUFBRW1CLElBQUk7SUFDMUIsT0FBUUE7UUFDSixLQUFLcEIsUUFBUWtCLGFBQWEsQ0FBQ0csT0FBTztZQUM5QixPQUFPLE9BQU9wQixVQUFVO1FBQzVCLEtBQUtELFFBQVFrQixhQUFhLENBQUNJLE1BQU07WUFDN0IsT0FBTyxPQUFPckIsVUFBVTtRQUM1QixLQUFLRCxRQUFRa0IsYUFBYSxDQUFDSyxNQUFNO1lBQzdCLE9BQU8sT0FBT3RCLFVBQVU7SUFDaEM7SUFDQSxPQUFPO0FBQ1g7QUFDQSxTQUFTdUIsbUJBQW1CdkIsS0FBSyxFQUFFbUIsSUFBSTtJQUNuQyxJQUFJLENBQUNELFVBQVVsQixPQUFPbUIsT0FBTztRQUN6QixNQUFNLElBQUlLLFVBQVUsQ0FBQyxjQUFjLEVBQUV6QixRQUFRa0IsYUFBYSxDQUFDRSxLQUFLLENBQUMsQ0FBQztJQUN0RTtBQUNKO0FBQ0EsU0FBU00sY0FBY2hCLE1BQU07SUFDekIsSUFBSUEsVUFBVUEsT0FBT2lCLFNBQVMsRUFBRTtRQUM1QixJQUFJakIsT0FBT2lCLFNBQVMsQ0FBQ0MsTUFBTSxJQUFJbEIsT0FBT2lCLFNBQVMsQ0FBQ0UsUUFBUSxFQUFFO1lBQ3RELE9BQU87UUFDWCxPQUNLO1lBQ0QsT0FBT0gsY0FBY2hCLE9BQU9pQixTQUFTO1FBQ3pDO0lBQ0osT0FDSztRQUNELE9BQU8sQ0FBQyxDQUFFakIsQ0FBQUEsVUFBVUEsT0FBT2tCLE1BQU0sSUFBSWxCLE9BQU9tQixRQUFRO0lBQ3hEO0FBQ0o7QUFFQSxNQUFNQztJQUNGMUIsYUFBYztRQUNWLElBQUksQ0FBQzJCLEtBQUssR0FBRyxJQUFJQztJQUNyQjtJQUNBQyxJQUFJdkIsTUFBTSxFQUFFO1FBQ1IsT0FBTyxJQUFJLENBQUNxQixLQUFLLENBQUNFLEdBQUcsQ0FBQ3ZCLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQ3dCLGdCQUFnQixDQUFDeEI7SUFDN0Q7SUFDQXlCLElBQUl6QixNQUFNLEVBQUU7UUFDUixNQUFNRixTQUFTLElBQUksQ0FBQ3VCLEtBQUssQ0FBQ0ksR0FBRyxDQUFDekIsV0FBVyxJQUFJLENBQUN3QixnQkFBZ0IsQ0FBQ3hCO1FBQy9ELElBQUksQ0FBQ0YsUUFBUTtZQUNULE1BQU0sSUFBSUwsTUFBTTtRQUNwQjtRQUNBLE9BQU9LO0lBQ1g7SUFDQTRCLE9BQU8xQixNQUFNLEVBQUU7UUFDWCxNQUFNRixTQUFTO1lBQUU2QixPQUFPLENBQUM7UUFBRTtRQUMzQixNQUFNQyxlQUFlLElBQUksQ0FBQ0osZ0JBQWdCLENBQUN4QjtRQUMzQyxJQUFJNEIsY0FBYztZQUNkeEMsT0FBT3lDLE1BQU0sQ0FBQy9CLFFBQVE4QjtZQUN0QjlCLE9BQU82QixLQUFLLEdBQUcsQ0FBQztZQUNoQixJQUFLLE1BQU0xQixRQUFRMkIsYUFBYUQsS0FBSyxDQUFFO2dCQUNuQzdCLE9BQU82QixLQUFLLENBQUMxQixLQUFLLEdBQUdiLE9BQU95QyxNQUFNLENBQUMsQ0FBQyxHQUFHRCxhQUFhRCxLQUFLLENBQUMxQixLQUFLO1lBQ25FO1FBQ0o7UUFDQUgsT0FBT0UsTUFBTSxHQUFHQTtRQUNoQixPQUFPRjtJQUNYO0lBQ0FnQyxJQUFJOUIsTUFBTSxFQUFFRixNQUFNLEVBQUU7UUFDaEIsSUFBSSxDQUFDdUIsS0FBSyxDQUFDUyxHQUFHLENBQUM5QixRQUFRRjtRQUN2QixPQUFPLElBQUk7SUFDZjtJQUNBMEIsaUJBQWlCeEIsTUFBTSxFQUFFO1FBQ3JCLE1BQU0rQixTQUFTL0IsT0FBT2dDLFNBQVM7UUFDL0IsSUFBSUQsUUFBUTtZQUNSLE1BQU1qQyxTQUFTLElBQUksQ0FBQ3VCLEtBQUssQ0FBQ0ksR0FBRyxDQUFDTTtZQUM5QixPQUFPakMsVUFBVSxJQUFJLENBQUMwQixnQkFBZ0IsQ0FBQ087UUFDM0M7UUFDQSxPQUFPO0lBQ1g7QUFDSjtBQUVBLE1BQU1FLGlCQUFpQjtBQUN2QixNQUFNQyxnQkFBZ0IsSUFBSWQ7QUFFMUIsTUFBTWU7SUFDRnpDLFlBQVkwQyxPQUFPLENBQUU7UUFDakIsSUFBSSxDQUFDQSxPQUFPLEdBQUcsSUFBSUMsT0FBT0Q7SUFDOUI7SUFDQUUsU0FBUy9DLEtBQUssRUFBRTtRQUNaLE1BQU02QyxVQUFVLElBQUlDLE9BQU8sSUFBSSxDQUFDRCxPQUFPLENBQUNHLE1BQU0sRUFBRSxJQUFJLENBQUNILE9BQU8sQ0FBQ0ksS0FBSztRQUNsRSxJQUFJLE9BQU9qRCxVQUFVLFVBQVU7WUFDM0IsTUFBTSxJQUFJVyxnQkFBZ0I7UUFDOUI7UUFDQSxJQUFJLENBQUNrQyxRQUFRSyxJQUFJLENBQUNsRCxRQUFRO1lBQ3RCLE1BQU0sSUFBSVcsZ0JBQWdCLENBQUMsZ0NBQWdDLEVBQUVrQyxRQUFRTSxRQUFRLEdBQUcsQ0FBQyxDQUFDO1FBQ3RGO0lBQ0o7QUFDSjtBQUVBLE1BQU1DO0lBQ0ZqRCxZQUFZa0QsTUFBTWhDLE9BQU9pQyxTQUFTLEVBQUVDLE1BQU1sQyxPQUFPbUMsU0FBUyxDQUFFO1FBQ3hELElBQUksQ0FBQ0gsR0FBRyxHQUFHQTtRQUNYLElBQUksQ0FBQ0UsR0FBRyxHQUFHQTtJQUNmO0lBQ0FSLFNBQVMvQyxLQUFLLEVBQUU7UUFDWnVCLG1CQUFtQnZCLE9BQU9ELFFBQVFrQixhQUFhLENBQUNJLE1BQU07UUFDdEQsSUFBSSxDQUFFLEtBQUksQ0FBQ2dDLEdBQUcsSUFBSXJELFNBQVNBLFNBQVMsSUFBSSxDQUFDdUQsR0FBRyxHQUFHO1lBQzNDLE1BQU1GLE1BQU0sSUFBSSxDQUFDQSxHQUFHLEtBQUtoQyxPQUFPaUMsU0FBUyxHQUFHLFFBQVEsSUFBSSxDQUFDRCxHQUFHO1lBQzVELE1BQU1FLE1BQU0sSUFBSSxDQUFDQSxHQUFHLEtBQUtsQyxPQUFPbUMsU0FBUyxHQUFHLFFBQVEsSUFBSSxDQUFDRCxHQUFHO1lBQzVELE1BQU0sSUFBSTVDLGdCQUFnQixDQUFDLGlDQUFpQyxFQUFFMEMsSUFBSSxDQUFDLEVBQUVFLElBQUksQ0FBQyxDQUFDO1FBQy9FO0lBQ0o7QUFDSjtBQUVBLE1BQU1FO0lBQ0Z0RCxZQUFZa0QsTUFBTWhDLE9BQU9pQyxTQUFTLEVBQUVDLE1BQU1sQyxPQUFPbUMsU0FBUyxDQUFFO1FBQ3hELElBQUksQ0FBQ0gsR0FBRyxHQUFHQTtRQUNYLElBQUksQ0FBQ0UsR0FBRyxHQUFHQTtJQUNmO0lBQ0FSLFNBQVMvQyxLQUFLLEVBQUU7UUFDWnVCLG1CQUFtQnZCLE9BQU9ELFFBQVFrQixhQUFhLENBQUNJLE1BQU07UUFDdEQsSUFBSSxDQUFFLEtBQUksQ0FBQ2dDLEdBQUcsR0FBR3JELFNBQVNBLFFBQVEsSUFBSSxDQUFDdUQsR0FBRyxHQUFHO1lBQ3pDLE1BQU1GLE1BQU0sSUFBSSxDQUFDQSxHQUFHLEtBQUtoQyxPQUFPaUMsU0FBUyxHQUFHLFFBQVEsSUFBSSxDQUFDRCxHQUFHO1lBQzVELE1BQU1FLE1BQU0sSUFBSSxDQUFDQSxHQUFHLEtBQUtsQyxPQUFPbUMsU0FBUyxHQUFHLFFBQVEsSUFBSSxDQUFDRCxHQUFHO1lBQzVELE1BQU0sSUFBSTVDLGdCQUFnQixDQUFDLGlDQUFpQyxFQUFFMEMsSUFBSSxDQUFDLEVBQUVFLElBQUksQ0FBQyxDQUFDO1FBQy9FO0lBQ0o7QUFDSjtBQUVBLE1BQU1HO0lBQ0Z2RCxZQUFZd0QsTUFBTSxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsQ0FBRTtRQUN0QyxJQUFJLENBQUNGLE1BQU0sR0FBR0E7UUFDZCxJQUFJLENBQUNDLFNBQVMsR0FBR0E7UUFDakIsSUFBSSxDQUFDQyxTQUFTLEdBQUdBO0lBQ3JCO0lBQ0FkLFNBQVMvQyxLQUFLLEVBQUU7UUFDWixJQUFJLElBQUksQ0FBQzJELE1BQU0sS0FBS0csV0FBVztZQUMzQixJQUFJOUQsTUFBTTJELE1BQU0sS0FBSyxJQUFJLENBQUNBLE1BQU0sRUFBRTtnQkFDOUIsTUFBTSxJQUFJaEQsZ0JBQWdCLENBQUMsNkJBQTZCLEVBQUUsSUFBSSxDQUFDZ0QsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUM1RTtZQUNBO1FBQ0o7UUFDQSxJQUFJLElBQUksQ0FBQ0MsU0FBUyxLQUFLRSxXQUFXO1lBQzlCLElBQUk5RCxNQUFNMkQsTUFBTSxHQUFHLElBQUksQ0FBQ0MsU0FBUyxFQUFFO2dCQUMvQixNQUFNLElBQUlqRCxnQkFBZ0IsQ0FBQywrQkFBK0IsRUFBRSxJQUFJLENBQUNpRCxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ2pGO1FBQ0o7UUFDQSxJQUFJLElBQUksQ0FBQ0MsU0FBUyxLQUFLQyxXQUFXO1lBQzlCLElBQUk5RCxNQUFNMkQsTUFBTSxHQUFHLElBQUksQ0FBQ0UsU0FBUyxFQUFFO2dCQUMvQixNQUFNLElBQUlsRCxnQkFBZ0IsQ0FBQywrQkFBK0IsRUFBRSxJQUFJLENBQUNrRCxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ2pGO1FBQ0o7SUFDSjtBQUNKO0FBRUEsTUFBTUU7SUFDRjVELFlBQVk2RCxXQUFXLENBQUU7UUFDckIsSUFBSSxDQUFDQSxXQUFXLEdBQUdBO0lBQ3ZCO0lBQ0FqQixTQUFTL0MsS0FBSyxFQUFFO1FBQ1p1QixtQkFBbUJ2QixPQUFPRCxRQUFRa0IsYUFBYSxDQUFDSyxNQUFNO1FBQ3RELElBQUksQ0FBQyxJQUFJLENBQUMwQyxXQUFXLENBQUNDLFFBQVEsQ0FBQ2pFLFFBQVE7WUFDbkMsTUFBTSxJQUFJVyxnQkFBZ0IsQ0FBQyxxQkFBcUIsRUFBRSxJQUFJLENBQUNxRCxXQUFXLENBQUNFLEdBQUcsQ0FBQyxDQUFDQyxJQUFNLENBQUMsQ0FBQyxFQUFFQSxFQUFFLENBQUMsQ0FBQyxFQUFFQyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3hHO0lBQ0o7QUFDSjtBQUVBLE1BQU1DO0lBQ0YsT0FBT0MsWUFBWUMsSUFBSSxFQUFFQyxVQUFVLEVBQUU7UUFDakMsTUFBTUMsU0FBU0MsTUFBTUMsT0FBTyxDQUFDSixRQUFRQSxPQUFPO1lBQUNBO1NBQUs7UUFDbEQsS0FBSyxNQUFNdkUsU0FBU3lFLE9BQVE7WUFDeEIsS0FBSyxNQUFNRyxjQUFjSixXQUFXSyxXQUFXLENBQUU7Z0JBQzdDLElBQUlELHNCQUFzQmxCLG9CQUFvQmMsV0FBV00sUUFBUSxFQUFFO29CQUMvREYsV0FBVzdCLFFBQVEsQ0FBQ3dCO2dCQUN4QixPQUNLO29CQUNESyxXQUFXN0IsUUFBUSxDQUFDL0M7Z0JBQ3hCO1lBQ0o7UUFDSjtJQUNKO0lBQ0EsT0FBTytFLFdBQVcvRSxLQUFLLEVBQUV3RSxVQUFVLEVBQUU7UUFDakMsSUFBSUEsV0FBV00sUUFBUSxJQUFJLENBQUNKLE1BQU1DLE9BQU8sQ0FBQzNFLFFBQVE7WUFDOUMsTUFBTSxJQUFJd0IsVUFBVTtRQUN4QjtRQUNBLElBQUksT0FBT2dELFdBQVdyRCxJQUFJLEtBQUssVUFBVTtZQUNyQyxNQUFNc0QsU0FBU0MsTUFBTUMsT0FBTyxDQUFDM0UsU0FBU0EsUUFBUTtnQkFBQ0E7YUFBTTtZQUNyRCxLQUFLLE1BQU1tRSxLQUFLTSxPQUFRO2dCQUNwQmxELG1CQUFtQjRDLEdBQUdLLFdBQVdyRCxJQUFJO1lBQ3pDO1FBQ0o7SUFDSjtJQUNBLE9BQU82RCxnQkFBZ0J6RSxNQUFNLEVBQUVHLE9BQU9nQyxjQUFjLEVBQUU7UUFDbEQsT0FBTztZQUFFLEdBQUduQyxPQUFPNkIsS0FBSyxDQUFDTSxlQUFlO1lBQUUsR0FBR25DLE9BQU82QixLQUFLLENBQUMxQixLQUFLO1FBQUM7SUFDcEU7QUFDSjtBQUVBLE1BQU11RSx1QkFBdUJaO0lBQ3pCLE9BQU9hLFVBQVVDLEdBQUcsRUFBRUMsT0FBTyxFQUFFQyxRQUFRLEVBQUVDLEtBQUssRUFBRTtRQUM1QyxNQUFNQyxPQUFPLElBQUksQ0FBQzVELE1BQU0sQ0FBQ3dELEtBQUtDO1FBQzlCLE9BQU9JLEtBQUtDLFNBQVMsQ0FBQ0YsTUFBTUYsVUFBVUM7SUFDMUM7SUFDQSxPQUFPM0QsT0FBT3dELEdBQUcsRUFBRUMsVUFBVSxDQUFDLENBQUMsRUFBRTtRQUM3QixJQUFJTTtRQUNKLElBQUlDLGVBQWVQLFFBQVFPLFlBQVk7UUFDdkMsTUFBTTlFLGFBQWF1RSxRQUFRdkUsVUFBVSxJQUFJNkI7UUFDekMsSUFBSWpCLGNBQWMwRCxNQUFNO1lBQ3BCLE9BQU9BLElBQUl4RCxNQUFNO1FBQ3JCO1FBQ0EsSUFBSStDLE1BQU1DLE9BQU8sQ0FBQ1EsTUFBTTtZQUNwQk8sTUFBTSxFQUFFO1lBQ1IsS0FBSyxNQUFNRSxRQUFRVCxJQUFLO2dCQUNwQk8sSUFBSUcsSUFBSSxDQUFDLElBQUksQ0FBQ2xFLE1BQU0sQ0FBQ2lFLE1BQU1SO1lBQy9CO1FBQ0osT0FDSyxJQUFJLE9BQU9ELFFBQVEsVUFBVTtZQUM5QixJQUFJUSxnQkFBZ0IsQ0FBQ2hELGNBQWNYLEdBQUcsQ0FBQzJELGVBQWU7Z0JBQ2xELE1BQU0sSUFBSTFGLFVBQVU7WUFDeEI7WUFDQTBGLGVBQWdCQSxnQkFBZ0JSLElBQUloRixXQUFXO1lBQy9DLElBQUl3QyxjQUFjWCxHQUFHLENBQUMyRCxlQUFlO2dCQUNqQyxNQUFNcEYsU0FBU29DLGNBQWNULEdBQUcsQ0FBQ3lEO2dCQUNqQ0QsTUFBTSxDQUFDO2dCQUNQLE1BQU1JLGNBQWMsSUFBSSxDQUFDZCxlQUFlLENBQUN6RSxRQUFRTTtnQkFDakQsSUFBSyxNQUFNa0YsT0FBT0QsWUFBYTtvQkFDM0IsSUFBSTt3QkFDQSxNQUFNRixPQUFPRSxXQUFXLENBQUNDLElBQUk7d0JBQzdCLE1BQU1DLFVBQVViLEdBQUcsQ0FBQ1ksSUFBSTt3QkFDeEIsSUFBSS9GO3dCQUNKLElBQUksS0FBTWlHLFFBQVEsSUFBSUQsWUFBWWxDLGFBQzFCOEIsS0FBS00sWUFBWSxLQUFLcEMsYUFBYWtDLFlBQVlKLEtBQUtNLFlBQVksRUFBRzs0QkFDdkU7d0JBQ0o7d0JBQ0EsSUFBSSxDQUFDTixLQUFLSyxRQUFRLElBQUlELFlBQVlsQyxXQUFXOzRCQUN6QyxNQUFNLElBQUlsRCxnQkFBZ0IrRSxhQUFhakYsSUFBSSxFQUFFLENBQUMsVUFBVSxFQUFFcUYsSUFBSSxjQUFjLENBQUM7d0JBQ2pGO3dCQUNBLElBQUksT0FBT0gsS0FBS3pFLElBQUksS0FBSyxVQUFVOzRCQUMvQixJQUFJeUUsS0FBS08sU0FBUyxFQUFFO2dDQUNoQixJQUFJUCxLQUFLZCxRQUFRLEVBQUU7b0NBQ2Y5RSxRQUFRZ0csUUFBUTlCLEdBQUcsQ0FBQyxDQUFDa0MsS0FBT1IsS0FBS08sU0FBUyxDQUFDeEUsTUFBTSxDQUFDeUUsSUFBSWpCO2dDQUMxRCxPQUNLO29DQUNEbkYsUUFBUTRGLEtBQUtPLFNBQVMsQ0FBQ3hFLE1BQU0sQ0FBQ3FFLFNBQVNiO2dDQUMzQzs0QkFDSixPQUNLO2dDQUNEbkYsUUFBUWdHOzRCQUNaO3dCQUNKLE9BQ0s7NEJBQ0QsSUFBSUosS0FBS2QsUUFBUSxFQUFFO2dDQUNmOUUsUUFBUWdHLFFBQVE5QixHQUFHLENBQUMsQ0FBQ2tDLEtBQU8sSUFBSSxDQUFDekUsTUFBTSxDQUFDeUUsSUFBSTt3Q0FBRXZGO29DQUFXOzRCQUM3RCxPQUNLO2dDQUNEYixRQUFRLElBQUksQ0FBQzJCLE1BQU0sQ0FBQ3FFLFNBQVM7b0NBQUVuRjtnQ0FBVzs0QkFDOUM7d0JBQ0o7d0JBQ0EsSUFBSSxDQUFDa0UsVUFBVSxDQUFDL0UsT0FBTzRGO3dCQUN2QixJQUFJLENBQUN0QixXQUFXLENBQUN0RSxPQUFPNEY7d0JBQ3hCRixHQUFHLENBQUNFLEtBQUtsRixJQUFJLElBQUlxRixJQUFJLEdBQUcvRjtvQkFDNUIsRUFDQSxPQUFPcUcsR0FBRzt3QkFDTixJQUFJQSxhQUFhekYsaUJBQWlCOzRCQUM5QixNQUFNeUY7d0JBQ1YsT0FDSzs0QkFDRCxNQUFNLElBQUl6RixnQkFBZ0JMLE9BQU9FLE1BQU0sQ0FBQ0MsSUFBSSxFQUFFLENBQUMsVUFBVSxFQUFFcUYsSUFBSSxZQUFZLEVBQUVNLEVBQUVqRyxPQUFPLENBQUMsQ0FBQyxFQUFFaUc7d0JBQzlGO29CQUNKO2dCQUNKO1lBQ0osT0FDSztnQkFDRFgsTUFBTSxDQUFDO2dCQUNQLElBQUssTUFBTUssT0FBT1osSUFBSztvQkFDbkJPLEdBQUcsQ0FBQ0ssSUFBSSxHQUFHLElBQUksQ0FBQ3BFLE1BQU0sQ0FBQ3dELEdBQUcsQ0FBQ1ksSUFBSSxFQUFFO3dCQUFFbEY7b0JBQVc7Z0JBQ2xEO1lBQ0o7UUFDSixPQUNLO1lBQ0Q2RSxNQUFNUDtRQUNWO1FBQ0EsT0FBT087SUFDWDtBQUNKO0FBRUEsTUFBTVksbUJBQW1CakM7SUFDckIsT0FBT2tDLE1BQU1oQyxJQUFJLEVBQUVhLE9BQU8sRUFBRTtRQUN4QixNQUFNRCxNQUFNSyxLQUFLZSxLQUFLLENBQUNoQztRQUN2QixPQUFPLElBQUksQ0FBQzNDLFFBQVEsQ0FBQ3VELEtBQUtDO0lBQzlCO0lBQ0EsT0FBT3hELFNBQVNuQixNQUFNLEVBQUUyRSxPQUFPLEVBQUU7UUFDN0IsTUFBTU8sZUFBZVAsUUFBUU8sWUFBWTtRQUN6QyxNQUFNOUUsYUFBYXVFLFFBQVF2RSxVQUFVLElBQUk2QjtRQUN6QyxNQUFNeUMsTUFBTSxJQUFJUTtRQUNoQixJQUFJbEUsY0FBYzBELE1BQU07WUFDcEIsT0FBT0EsSUFBSXZELFFBQVEsQ0FBQ25CO1FBQ3hCO1FBQ0EsTUFBTUYsU0FBU29DLGNBQWNULEdBQUcsQ0FBQ3lEO1FBQ2pDLE1BQU1HLGNBQWMsSUFBSSxDQUFDZCxlQUFlLENBQUN6RSxRQUFRTTtRQUNqRCxNQUFNMkYsWUFBWSxDQUFDO1FBQ25CLElBQUlwQixRQUFRcUIsY0FBYyxJQUFJLENBQUMvQixNQUFNQyxPQUFPLENBQUNsRSxTQUFTO1lBQ2xENkYsV0FBV0ksbUJBQW1CLENBQUNqRyxRQUFRcUYsYUFBYXZGO1FBQ3hEO1FBQ0EsSUFBSyxNQUFNd0YsT0FBT0QsWUFBYTtZQUMzQixJQUFJO2dCQUNBLE1BQU1GLE9BQU9FLFdBQVcsQ0FBQ0MsSUFBSTtnQkFDN0IsTUFBTXJGLE9BQU9rRixLQUFLbEYsSUFBSSxJQUFJcUY7Z0JBQzFCLE1BQU0vRixRQUFRUyxNQUFNLENBQUNDLEtBQUs7Z0JBQzFCLElBQUlWLFVBQVU4RCxhQUFjOEIsQ0FBQUEsS0FBS0ssUUFBUSxJQUFJTCxLQUFLTSxZQUFZLEtBQUtwQyxTQUFRLEdBQUk7b0JBQzNFO2dCQUNKO2dCQUNBLElBQUksQ0FBQzhCLEtBQUtLLFFBQVEsSUFBSWpHLFVBQVU4RCxXQUFXO29CQUN2QyxNQUFNLElBQUl0RCxZQUFZRCxRQUFRLENBQUMsVUFBVSxFQUFFRyxLQUFLLGNBQWMsQ0FBQztnQkFDbkU7Z0JBQ0EsSUFBSSxDQUFDcUUsVUFBVSxDQUFDL0UsT0FBTzRGO2dCQUN2QixJQUFJLENBQUN0QixXQUFXLENBQUN0RSxPQUFPNEY7Z0JBQ3hCLElBQUksT0FBUUEsS0FBS3pFLElBQUksS0FBTSxVQUFVO29CQUNqQyxJQUFJeUUsS0FBS08sU0FBUyxFQUFFO3dCQUNoQixJQUFJUCxLQUFLZCxRQUFRLEVBQUU7NEJBQ2ZLLEdBQUcsQ0FBQ1ksSUFBSSxHQUFHL0YsTUFBTWtFLEdBQUcsQ0FBQyxDQUFDa0MsS0FBT1IsS0FBS08sU0FBUyxDQUFDdkUsUUFBUSxDQUFDd0UsSUFBSWpCO3dCQUM3RCxPQUNLOzRCQUNEQSxHQUFHLENBQUNZLElBQUksR0FBR0gsS0FBS08sU0FBUyxDQUFDdkUsUUFBUSxDQUFDNUIsT0FBT21GO3dCQUM5QztvQkFDSixPQUNLO3dCQUNEQSxHQUFHLENBQUNZLElBQUksR0FBRy9GO29CQUNmO2dCQUNKLE9BQ0s7b0JBQ0QsTUFBTTJHLGFBQWE7d0JBQ2YsR0FBR3ZCLE9BQU87d0JBQ1ZPLGNBQWNDLEtBQUt6RSxJQUFJO3dCQUN2Qk47b0JBQ0o7b0JBQ0EsSUFBSStFLEtBQUtkLFFBQVEsRUFBRTt3QkFDZkssR0FBRyxDQUFDWSxJQUFJLEdBQUcvRixNQUFNa0UsR0FBRyxDQUFDLENBQUNrQyxLQUFPLElBQUksQ0FBQ3hFLFFBQVEsQ0FBQ3dFLElBQUlPO29CQUNuRCxPQUNLO3dCQUNEeEIsR0FBRyxDQUFDWSxJQUFJLEdBQUcsSUFBSSxDQUFDbkUsUUFBUSxDQUFDNUIsT0FBTzJHO29CQUNwQztnQkFDSjtZQUNKLEVBQ0EsT0FBT04sR0FBRztnQkFDTixJQUFJLENBQUVBLENBQUFBLGFBQWE3RixXQUFVLEdBQUk7b0JBQzdCNkYsSUFBSSxJQUFJN0YsWUFBWUQsUUFBUSxDQUFDLFVBQVUsRUFBRXdGLElBQUksWUFBWSxFQUFFTSxFQUFFakcsT0FBTyxDQUFDLENBQUMsRUFBRWlHO2dCQUM1RTtnQkFDQSxJQUFJakIsUUFBUXdCLGFBQWEsRUFBRTtvQkFDdkJKLFNBQVMsQ0FBQ1QsSUFBSSxHQUFHTTtnQkFDckIsT0FDSztvQkFDRCxNQUFNQTtnQkFDVjtZQUNKO1FBQ0o7UUFDQSxNQUFNdEYsT0FBT2xCLE9BQU9rQixJQUFJLENBQUN5RjtRQUN6QixJQUFJekYsS0FBSzRDLE1BQU0sRUFBRTtZQUNiLE1BQU0sSUFBSTdDLFNBQVNQLFFBQVFRLE1BQU15RjtRQUNyQztRQUNBLE9BQU9yQjtJQUNYO0lBQ0EsT0FBT3VCLG9CQUFvQmpHLE1BQU0sRUFBRXFGLFdBQVcsRUFBRXZGLE1BQU0sRUFBRTtRQUNwRCxNQUFNc0csWUFBWWhILE9BQU9rQixJQUFJLENBQUNOO1FBQzlCLE1BQU1xRyxjQUFjakgsT0FBT2tCLElBQUksQ0FBQytFO1FBQ2hDLE1BQU0vRSxPQUFPLEVBQUU7UUFDZixLQUFLLE1BQU1nRixPQUFPYyxVQUFXO1lBQ3pCLElBQUlDLFlBQVlDLE9BQU8sQ0FBQ2hCLFNBQVMsQ0FBQyxHQUFHO2dCQUNqQ2hGLEtBQUs4RSxJQUFJLENBQUNFO1lBQ2Q7UUFDSjtRQUNBLElBQUloRixLQUFLNEMsTUFBTSxFQUFFO1lBQ2IsTUFBTSxJQUFJN0MsU0FBU1AsUUFBUVE7UUFDL0I7SUFDSjtBQUNKO0FBRUEsU0FBU2lHLGVBQWVwQixJQUFJO0lBQ3hCLE1BQU1mLGNBQWMsRUFBRTtJQUN0QixJQUFJZSxLQUFLL0MsT0FBTyxFQUFFO1FBQ2RnQyxZQUFZZ0IsSUFBSSxDQUFDLElBQUlqRCxrQkFBa0JnRCxLQUFLL0MsT0FBTztJQUN2RDtJQUNBLElBQUkrQyxLQUFLekUsSUFBSSxLQUFLcEIsUUFBUWtCLGFBQWEsQ0FBQ0ksTUFBTSxJQUFJdUUsS0FBS3pFLElBQUksS0FBS3BCLFFBQVFrQixhQUFhLENBQUNnRyxHQUFHLEVBQUU7UUFDdkYsSUFBSXJCLEtBQUtzQixZQUFZLEtBQUtwRCxhQUFhOEIsS0FBS3VCLFlBQVksS0FBS3JELFdBQVc7WUFDcEVlLFlBQVlnQixJQUFJLENBQUMsSUFBSXpDLG9CQUFvQndDLEtBQUtzQixZQUFZLEVBQUV0QixLQUFLdUIsWUFBWTtRQUNqRjtRQUNBLElBQUl2QixLQUFLd0IsWUFBWSxLQUFLdEQsYUFBYThCLEtBQUt5QixZQUFZLEtBQUt2RCxXQUFXO1lBQ3BFZSxZQUFZZ0IsSUFBSSxDQUFDLElBQUlwQyxvQkFBb0JtQyxLQUFLd0IsWUFBWSxFQUFFeEIsS0FBS3lCLFlBQVk7UUFDakY7UUFDQSxJQUFJekIsS0FBSzVCLFdBQVcsS0FBS0YsV0FBVztZQUNoQ2UsWUFBWWdCLElBQUksQ0FBQyxJQUFJOUIsc0JBQXNCNkIsS0FBSzVCLFdBQVc7UUFDL0Q7SUFDSjtJQUNBLElBQUk0QixLQUFLekUsSUFBSSxLQUFLcEIsUUFBUWtCLGFBQWEsQ0FBQ0ssTUFBTSxJQUFJc0UsS0FBS2QsUUFBUSxJQUFJYyxLQUFLekUsSUFBSSxLQUFLcEIsUUFBUWtCLGFBQWEsQ0FBQ2dHLEdBQUcsRUFBRTtRQUN4RyxJQUFJckIsS0FBS2pDLE1BQU0sS0FBS0csYUFBYThCLEtBQUtoQyxTQUFTLEtBQUtFLGFBQWE4QixLQUFLL0IsU0FBUyxLQUFLQyxXQUFXO1lBQzNGZSxZQUFZZ0IsSUFBSSxDQUFDLElBQUluQyxpQkFBaUJrQyxLQUFLakMsTUFBTSxFQUFFaUMsS0FBS2hDLFNBQVMsRUFBRWdDLEtBQUsvQixTQUFTO1FBQ3JGO0lBQ0o7SUFDQSxPQUFPZ0I7QUFDWDtBQUNBLE1BQU15QyxXQUFXLENBQUNsQyxVQUFVLENBQUMsQ0FBQyxHQUFLLENBQUMzRSxRQUFROEc7UUFDeEMsTUFBTUMsZUFBZSxDQUFDLG9CQUFvQixFQUFFRCxZQUFZLGFBQWEsRUFBRTlHLE9BQU9OLFdBQVcsQ0FBQ08sSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN2RyxJQUFJSDtRQUNKLElBQUksQ0FBQ29DLGNBQWNYLEdBQUcsQ0FBQ3ZCLE9BQU9OLFdBQVcsR0FBRztZQUN4Q0ksU0FBU29DLGNBQWNSLE1BQU0sQ0FBQzFCLE9BQU9OLFdBQVc7WUFDaER3QyxjQUFjSixHQUFHLENBQUM5QixPQUFPTixXQUFXLEVBQUVJO1FBQzFDLE9BQ0s7WUFDREEsU0FBU29DLGNBQWNULEdBQUcsQ0FBQ3pCLE9BQU9OLFdBQVc7WUFDN0MsSUFBSUksT0FBT0UsTUFBTSxLQUFLQSxPQUFPTixXQUFXLEVBQUU7Z0JBQ3RDSSxTQUFTb0MsY0FBY1IsTUFBTSxDQUFDMUIsT0FBT04sV0FBVztnQkFDaER3QyxjQUFjSixHQUFHLENBQUM5QixPQUFPTixXQUFXLEVBQUVJO1lBQzFDO1FBQ0o7UUFDQSxNQUFNa0gsZ0JBQWdCO1lBQ2xCdEcsTUFBTXBCLFFBQVFrQixhQUFhLENBQUNnRyxHQUFHO1lBQy9CcEMsYUFBYSxFQUFFO1FBQ25CO1FBQ0EsTUFBTTZDLGNBQWM3SCxPQUFPeUMsTUFBTSxDQUFDbUYsZUFBZXJDO1FBQ2pEc0MsWUFBWTdDLFdBQVcsR0FBR21DLGVBQWVVO1FBQ3pDLElBQUksT0FBT0EsWUFBWXZHLElBQUksS0FBSyxVQUFVO1lBQ3RDLElBQUksQ0FBQ3dCLGNBQWNYLEdBQUcsQ0FBQzBGLFlBQVl2RyxJQUFJLEtBQUssQ0FBQ00sY0FBY2lHLFlBQVl2RyxJQUFJLEdBQUc7Z0JBQzFFLE1BQU0sSUFBSWpCLE1BQU0sQ0FBQyxFQUFFc0gsYUFBYSxxQ0FBcUMsQ0FBQztZQUMxRTtRQUNKO1FBQ0EsSUFBSUc7UUFDSixJQUFJakQsTUFBTUMsT0FBTyxDQUFDUyxRQUFRN0UsTUFBTSxHQUFHO1lBQy9Cb0gsY0FBY3ZDLFFBQVE3RSxNQUFNO1FBQ2hDLE9BQ0s7WUFDRG9ILGNBQWM7Z0JBQUN2QyxRQUFRN0UsTUFBTSxJQUFJbUM7YUFBZTtRQUNwRDtRQUNBLEtBQUssTUFBTTdCLGNBQWM4RyxZQUFhO1lBQ2xDLElBQUksQ0FBQ3BILE9BQU82QixLQUFLLENBQUN2QixXQUFXLEVBQUU7Z0JBQzNCTixPQUFPNkIsS0FBSyxDQUFDdkIsV0FBVyxHQUFHLENBQUM7WUFDaEM7WUFDQSxNQUFNaUYsY0FBY3ZGLE9BQU82QixLQUFLLENBQUN2QixXQUFXO1lBQzVDaUYsV0FBVyxDQUFDeUIsWUFBWSxHQUFHRztRQUMvQjtJQUNKO0FBRUEzSCxpQkFBaUIsR0FBR0U7QUFDcEJGLGtCQUFrQixHQUFHdUc7QUFDckJ2RyxnQkFBZ0IsR0FBR3VIO0FBQ25Cdkgsc0JBQXNCLEdBQUdrRjtBQUN6QmxGLGdCQUFnQixHQUFHZTtBQUNuQmYsbUJBQW1CLEdBQUdTO0FBQ3RCVCx1QkFBdUIsR0FBR2E7QUFDMUJiLHNCQUFzQixHQUFHTztBQUN6QlAsdUJBQXVCLEdBQUdZIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktbWFrZXRwbGFjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9AcGVjdWxpYXIvanNvbi1zY2hlbWEvYnVpbGQvaW5kZXguanM/OTE3OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAyMCwgUGVjdWxpYXIgVmVudHVyZXMsIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jbGFzcyBKc29uRXJyb3IgZXh0ZW5kcyBFcnJvciB7XHJcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBpbm5lckVycm9yKSB7XHJcbiAgICAgICAgc3VwZXIoaW5uZXJFcnJvclxyXG4gICAgICAgICAgICA/IGAke21lc3NhZ2V9LiBTZWUgdGhlIGlubmVyIGV4Y2VwdGlvbiBmb3IgbW9yZSBkZXRhaWxzLmBcclxuICAgICAgICAgICAgOiBtZXNzYWdlKTtcclxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xyXG4gICAgICAgIHRoaXMuaW5uZXJFcnJvciA9IGlubmVyRXJyb3I7XHJcbiAgICB9XHJcbn1cblxuY2xhc3MgVHJhbnNmb3JtRXJyb3IgZXh0ZW5kcyBKc29uRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3Ioc2NoZW1hLCBtZXNzYWdlLCBpbm5lckVycm9yKSB7XHJcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgaW5uZXJFcnJvcik7XHJcbiAgICAgICAgdGhpcy5zY2hlbWEgPSBzY2hlbWE7XHJcbiAgICB9XHJcbn1cblxuY2xhc3MgUGFyc2VyRXJyb3IgZXh0ZW5kcyBUcmFuc2Zvcm1FcnJvciB7XHJcbiAgICBjb25zdHJ1Y3RvcihzY2hlbWEsIG1lc3NhZ2UsIGlubmVyRXJyb3IpIHtcclxuICAgICAgICBzdXBlcihzY2hlbWEsIGBKU09OIGRvZXNuJ3QgbWF0Y2ggdG8gJyR7c2NoZW1hLnRhcmdldC5uYW1lfScgc2NoZW1hLiAke21lc3NhZ2V9YCwgaW5uZXJFcnJvcik7XHJcbiAgICB9XHJcbn1cblxuY2xhc3MgVmFsaWRhdGlvbkVycm9yIGV4dGVuZHMgSnNvbkVycm9yIHtcclxufVxuXG5jbGFzcyBTZXJpYWxpemVyRXJyb3IgZXh0ZW5kcyBKc29uRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3Ioc2NoZW1hTmFtZSwgbWVzc2FnZSwgaW5uZXJFcnJvcikge1xyXG4gICAgICAgIHN1cGVyKGBDYW5ub3Qgc2VyaWFsaXplIGJ5ICcke3NjaGVtYU5hbWV9JyBzY2hlbWEuICR7bWVzc2FnZX1gLCBpbm5lckVycm9yKTtcclxuICAgICAgICB0aGlzLnNjaGVtYU5hbWUgPSBzY2hlbWFOYW1lO1xyXG4gICAgfVxyXG59XG5cbmNsYXNzIEtleUVycm9yIGV4dGVuZHMgUGFyc2VyRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3Ioc2NoZW1hLCBrZXlzLCBlcnJvcnMgPSB7fSkge1xyXG4gICAgICAgIHN1cGVyKHNjaGVtYSwgXCJTb21lIGtleXMgZG9lc24ndCBtYXRjaCB0byBzY2hlbWFcIik7XHJcbiAgICAgICAgdGhpcy5rZXlzID0ga2V5cztcclxuICAgICAgICB0aGlzLmVycm9ycyA9IGVycm9ycztcclxuICAgIH1cclxufVxuXG4oZnVuY3Rpb24gKEpzb25Qcm9wVHlwZXMpIHtcclxuICAgIEpzb25Qcm9wVHlwZXNbSnNvblByb3BUeXBlc1tcIkFueVwiXSA9IDBdID0gXCJBbnlcIjtcclxuICAgIEpzb25Qcm9wVHlwZXNbSnNvblByb3BUeXBlc1tcIkJvb2xlYW5cIl0gPSAxXSA9IFwiQm9vbGVhblwiO1xyXG4gICAgSnNvblByb3BUeXBlc1tKc29uUHJvcFR5cGVzW1wiTnVtYmVyXCJdID0gMl0gPSBcIk51bWJlclwiO1xyXG4gICAgSnNvblByb3BUeXBlc1tKc29uUHJvcFR5cGVzW1wiU3RyaW5nXCJdID0gM10gPSBcIlN0cmluZ1wiO1xyXG59KShleHBvcnRzLkpzb25Qcm9wVHlwZXMgfHwgKGV4cG9ydHMuSnNvblByb3BUeXBlcyA9IHt9KSk7XG5cbmZ1bmN0aW9uIGNoZWNrVHlwZSh2YWx1ZSwgdHlwZSkge1xyXG4gICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgY2FzZSBleHBvcnRzLkpzb25Qcm9wVHlwZXMuQm9vbGVhbjpcclxuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJib29sZWFuXCI7XHJcbiAgICAgICAgY2FzZSBleHBvcnRzLkpzb25Qcm9wVHlwZXMuTnVtYmVyOlxyXG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiO1xyXG4gICAgICAgIGNhc2UgZXhwb3J0cy5Kc29uUHJvcFR5cGVzLlN0cmluZzpcclxuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIjtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbmZ1bmN0aW9uIHRocm93SWZUeXBlSXNXcm9uZyh2YWx1ZSwgdHlwZSkge1xyXG4gICAgaWYgKCFjaGVja1R5cGUodmFsdWUsIHR5cGUpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgVmFsdWUgbXVzdCBiZSAke2V4cG9ydHMuSnNvblByb3BUeXBlc1t0eXBlXX1gKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBpc0NvbnZlcnRpYmxlKHRhcmdldCkge1xyXG4gICAgaWYgKHRhcmdldCAmJiB0YXJnZXQucHJvdG90eXBlKSB7XHJcbiAgICAgICAgaWYgKHRhcmdldC5wcm90b3R5cGUudG9KU09OICYmIHRhcmdldC5wcm90b3R5cGUuZnJvbUpTT04pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gaXNDb252ZXJ0aWJsZSh0YXJnZXQucHJvdG90eXBlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gISEodGFyZ2V0ICYmIHRhcmdldC50b0pTT04gJiYgdGFyZ2V0LmZyb21KU09OKTtcclxuICAgIH1cclxufVxuXG5jbGFzcyBKc29uU2NoZW1hU3RvcmFnZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLml0ZW1zID0gbmV3IE1hcCgpO1xyXG4gICAgfVxyXG4gICAgaGFzKHRhcmdldCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLml0ZW1zLmhhcyh0YXJnZXQpIHx8ICEhdGhpcy5maW5kUGFyZW50U2NoZW1hKHRhcmdldCk7XHJcbiAgICB9XHJcbiAgICBnZXQodGFyZ2V0KSB7XHJcbiAgICAgICAgY29uc3Qgc2NoZW1hID0gdGhpcy5pdGVtcy5nZXQodGFyZ2V0KSB8fCB0aGlzLmZpbmRQYXJlbnRTY2hlbWEodGFyZ2V0KTtcclxuICAgICAgICBpZiAoIXNjaGVtYSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZ2V0IHNjaGVtYSBmb3IgY3VycmVudCB0YXJnZXRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzY2hlbWE7XHJcbiAgICB9XHJcbiAgICBjcmVhdGUodGFyZ2V0KSB7XHJcbiAgICAgICAgY29uc3Qgc2NoZW1hID0geyBuYW1lczoge30gfTtcclxuICAgICAgICBjb25zdCBwYXJlbnRTY2hlbWEgPSB0aGlzLmZpbmRQYXJlbnRTY2hlbWEodGFyZ2V0KTtcclxuICAgICAgICBpZiAocGFyZW50U2NoZW1hKSB7XHJcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oc2NoZW1hLCBwYXJlbnRTY2hlbWEpO1xyXG4gICAgICAgICAgICBzY2hlbWEubmFtZXMgPSB7fTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIHBhcmVudFNjaGVtYS5uYW1lcykge1xyXG4gICAgICAgICAgICAgICAgc2NoZW1hLm5hbWVzW25hbWVdID0gT2JqZWN0LmFzc2lnbih7fSwgcGFyZW50U2NoZW1hLm5hbWVzW25hbWVdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBzY2hlbWEudGFyZ2V0ID0gdGFyZ2V0O1xyXG4gICAgICAgIHJldHVybiBzY2hlbWE7XHJcbiAgICB9XHJcbiAgICBzZXQodGFyZ2V0LCBzY2hlbWEpIHtcclxuICAgICAgICB0aGlzLml0ZW1zLnNldCh0YXJnZXQsIHNjaGVtYSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBmaW5kUGFyZW50U2NoZW1hKHRhcmdldCkge1xyXG4gICAgICAgIGNvbnN0IHBhcmVudCA9IHRhcmdldC5fX3Byb3RvX187XHJcbiAgICAgICAgaWYgKHBhcmVudCkge1xyXG4gICAgICAgICAgICBjb25zdCBzY2hlbWEgPSB0aGlzLml0ZW1zLmdldChwYXJlbnQpO1xyXG4gICAgICAgICAgICByZXR1cm4gc2NoZW1hIHx8IHRoaXMuZmluZFBhcmVudFNjaGVtYShwYXJlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxufVxuXG5jb25zdCBERUZBVUxUX1NDSEVNQSA9IFwiZGVmYXVsdFwiO1xyXG5jb25zdCBzY2hlbWFTdG9yYWdlID0gbmV3IEpzb25TY2hlbWFTdG9yYWdlKCk7XG5cbmNsYXNzIFBhdHRlcm5WYWxpZGF0aW9uIHtcclxuICAgIGNvbnN0cnVjdG9yKHBhdHRlcm4pIHtcclxuICAgICAgICB0aGlzLnBhdHRlcm4gPSBuZXcgUmVnRXhwKHBhdHRlcm4pO1xyXG4gICAgfVxyXG4gICAgdmFsaWRhdGUodmFsdWUpIHtcclxuICAgICAgICBjb25zdCBwYXR0ZXJuID0gbmV3IFJlZ0V4cCh0aGlzLnBhdHRlcm4uc291cmNlLCB0aGlzLnBhdHRlcm4uZmxhZ3MpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihcIkluY29taW5nIHZhbHVlIG11c3QgYmUgc3RyaW5nXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXBhdHRlcm4uZXhlYyh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihgVmFsdWUgZG9lc24ndCBtYXRjaCB0byBwYXR0ZXJuICcke3BhdHRlcm4udG9TdHJpbmcoKX0nYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbmNsYXNzIEluY2x1c2l2ZVZhbGlkYXRpb24ge1xyXG4gICAgY29uc3RydWN0b3IobWluID0gTnVtYmVyLk1JTl9WQUxVRSwgbWF4ID0gTnVtYmVyLk1BWF9WQUxVRSkge1xyXG4gICAgICAgIHRoaXMubWluID0gbWluO1xyXG4gICAgICAgIHRoaXMubWF4ID0gbWF4O1xyXG4gICAgfVxyXG4gICAgdmFsaWRhdGUodmFsdWUpIHtcclxuICAgICAgICB0aHJvd0lmVHlwZUlzV3JvbmcodmFsdWUsIGV4cG9ydHMuSnNvblByb3BUeXBlcy5OdW1iZXIpO1xyXG4gICAgICAgIGlmICghKHRoaXMubWluIDw9IHZhbHVlICYmIHZhbHVlIDw9IHRoaXMubWF4KSkge1xyXG4gICAgICAgICAgICBjb25zdCBtaW4gPSB0aGlzLm1pbiA9PT0gTnVtYmVyLk1JTl9WQUxVRSA/IFwiTUlOXCIgOiB0aGlzLm1pbjtcclxuICAgICAgICAgICAgY29uc3QgbWF4ID0gdGhpcy5tYXggPT09IE51bWJlci5NQVhfVkFMVUUgPyBcIk1BWFwiIDogdGhpcy5tYXg7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoYFZhbHVlIGRvZXNuJ3QgbWF0Y2ggdG8gZGlhcGFzb24gWyR7bWlufSwke21heH1dYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbmNsYXNzIEV4Y2x1c2l2ZVZhbGlkYXRpb24ge1xyXG4gICAgY29uc3RydWN0b3IobWluID0gTnVtYmVyLk1JTl9WQUxVRSwgbWF4ID0gTnVtYmVyLk1BWF9WQUxVRSkge1xyXG4gICAgICAgIHRoaXMubWluID0gbWluO1xyXG4gICAgICAgIHRoaXMubWF4ID0gbWF4O1xyXG4gICAgfVxyXG4gICAgdmFsaWRhdGUodmFsdWUpIHtcclxuICAgICAgICB0aHJvd0lmVHlwZUlzV3JvbmcodmFsdWUsIGV4cG9ydHMuSnNvblByb3BUeXBlcy5OdW1iZXIpO1xyXG4gICAgICAgIGlmICghKHRoaXMubWluIDwgdmFsdWUgJiYgdmFsdWUgPCB0aGlzLm1heCkpIHtcclxuICAgICAgICAgICAgY29uc3QgbWluID0gdGhpcy5taW4gPT09IE51bWJlci5NSU5fVkFMVUUgPyBcIk1JTlwiIDogdGhpcy5taW47XHJcbiAgICAgICAgICAgIGNvbnN0IG1heCA9IHRoaXMubWF4ID09PSBOdW1iZXIuTUFYX1ZBTFVFID8gXCJNQVhcIiA6IHRoaXMubWF4O1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKGBWYWx1ZSBkb2Vzbid0IG1hdGNoIHRvIGRpYXBhc29uICgke21pbn0sJHttYXh9KWApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxuXG5jbGFzcyBMZW5ndGhWYWxpZGF0aW9uIHtcclxuICAgIGNvbnN0cnVjdG9yKGxlbmd0aCwgbWluTGVuZ3RoLCBtYXhMZW5ndGgpIHtcclxuICAgICAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcclxuICAgICAgICB0aGlzLm1pbkxlbmd0aCA9IG1pbkxlbmd0aDtcclxuICAgICAgICB0aGlzLm1heExlbmd0aCA9IG1heExlbmd0aDtcclxuICAgIH1cclxuICAgIHZhbGlkYXRlKHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCAhPT0gdGhpcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoYFZhbHVlIGxlbmd0aCBtdXN0IGJlIGV4YWN0bHkgJHt0aGlzLmxlbmd0aH0uYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5taW5MZW5ndGggIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoIDwgdGhpcy5taW5MZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoYFZhbHVlIGxlbmd0aCBtdXN0IGJlIG1vcmUgdGhhbiAke3RoaXMubWluTGVuZ3RofS5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5tYXhMZW5ndGggIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID4gdGhpcy5tYXhMZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoYFZhbHVlIGxlbmd0aCBtdXN0IGJlIGxlc3MgdGhhbiAke3RoaXMubWF4TGVuZ3RofS5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxuXG5jbGFzcyBFbnVtZXJhdGlvblZhbGlkYXRpb24ge1xyXG4gICAgY29uc3RydWN0b3IoZW51bWVyYXRpb24pIHtcclxuICAgICAgICB0aGlzLmVudW1lcmF0aW9uID0gZW51bWVyYXRpb247XHJcbiAgICB9XHJcbiAgICB2YWxpZGF0ZSh2YWx1ZSkge1xyXG4gICAgICAgIHRocm93SWZUeXBlSXNXcm9uZyh2YWx1ZSwgZXhwb3J0cy5Kc29uUHJvcFR5cGVzLlN0cmluZyk7XHJcbiAgICAgICAgaWYgKCF0aGlzLmVudW1lcmF0aW9uLmluY2x1ZGVzKHZhbHVlKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKGBWYWx1ZSBtdXN0IGJlIG9uZSBvZiAke3RoaXMuZW51bWVyYXRpb24ubWFwKCh2KSA9PiBgJyR7dn0nYCkuam9pbihcIiwgXCIpfWApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxuXG5jbGFzcyBKc29uVHJhbnNmb3JtIHtcclxuICAgIHN0YXRpYyBjaGVja1ZhbHVlcyhkYXRhLCBzY2hlbWFJdGVtKSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWVzID0gQXJyYXkuaXNBcnJheShkYXRhKSA/IGRhdGEgOiBbZGF0YV07XHJcbiAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiB2YWx1ZXMpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCB2YWxpZGF0aW9uIG9mIHNjaGVtYUl0ZW0udmFsaWRhdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWxpZGF0aW9uIGluc3RhbmNlb2YgTGVuZ3RoVmFsaWRhdGlvbiAmJiBzY2hlbWFJdGVtLnJlcGVhdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbi52YWxpZGF0ZShkYXRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb24udmFsaWRhdGUodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc3RhdGljIGNoZWNrVHlwZXModmFsdWUsIHNjaGVtYUl0ZW0pIHtcclxuICAgICAgICBpZiAoc2NoZW1hSXRlbS5yZXBlYXRlZCAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlZhbHVlIG11c3QgYmUgQXJyYXlcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hSXRlbS50eXBlID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbdmFsdWVdO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHYgb2YgdmFsdWVzKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvd0lmVHlwZUlzV3Jvbmcodiwgc2NoZW1hSXRlbS50eXBlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0YXRpYyBnZXRTY2hlbWFCeU5hbWUoc2NoZW1hLCBuYW1lID0gREVGQVVMVF9TQ0hFTUEpIHtcclxuICAgICAgICByZXR1cm4geyAuLi5zY2hlbWEubmFtZXNbREVGQVVMVF9TQ0hFTUFdLCAuLi5zY2hlbWEubmFtZXNbbmFtZV0gfTtcclxuICAgIH1cclxufVxuXG5jbGFzcyBKc29uU2VyaWFsaXplciBleHRlbmRzIEpzb25UcmFuc2Zvcm0ge1xyXG4gICAgc3RhdGljIHNlcmlhbGl6ZShvYmosIG9wdGlvbnMsIHJlcGxhY2VyLCBzcGFjZSkge1xyXG4gICAgICAgIGNvbnN0IGpzb24gPSB0aGlzLnRvSlNPTihvYmosIG9wdGlvbnMpO1xyXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShqc29uLCByZXBsYWNlciwgc3BhY2UpO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIHRvSlNPTihvYmosIG9wdGlvbnMgPSB7fSkge1xyXG4gICAgICAgIGxldCByZXM7XHJcbiAgICAgICAgbGV0IHRhcmdldFNjaGVtYSA9IG9wdGlvbnMudGFyZ2V0U2NoZW1hO1xyXG4gICAgICAgIGNvbnN0IHNjaGVtYU5hbWUgPSBvcHRpb25zLnNjaGVtYU5hbWUgfHwgREVGQVVMVF9TQ0hFTUE7XHJcbiAgICAgICAgaWYgKGlzQ29udmVydGlibGUob2JqKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gb2JqLnRvSlNPTigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XHJcbiAgICAgICAgICAgIHJlcyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2Ygb2JqKSB7XHJcbiAgICAgICAgICAgICAgICByZXMucHVzaCh0aGlzLnRvSlNPTihpdGVtLCBvcHRpb25zKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICBpZiAodGFyZ2V0U2NoZW1hICYmICFzY2hlbWFTdG9yYWdlLmhhcyh0YXJnZXRTY2hlbWEpKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSnNvbkVycm9yKFwiQ2Fubm90IGdldCBzY2hlbWEgZm9yIGB0YXJnZXRTY2hlbWFgIHBhcmFtXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRhcmdldFNjaGVtYSA9ICh0YXJnZXRTY2hlbWEgfHwgb2JqLmNvbnN0cnVjdG9yKTtcclxuICAgICAgICAgICAgaWYgKHNjaGVtYVN0b3JhZ2UuaGFzKHRhcmdldFNjaGVtYSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNjaGVtYSA9IHNjaGVtYVN0b3JhZ2UuZ2V0KHRhcmdldFNjaGVtYSk7XHJcbiAgICAgICAgICAgICAgICByZXMgPSB7fTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5hbWVkU2NoZW1hID0gdGhpcy5nZXRTY2hlbWFCeU5hbWUoc2NoZW1hLCBzY2hlbWFOYW1lKTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG5hbWVkU2NoZW1hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IG5hbWVkU2NoZW1hW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9iakl0ZW0gPSBvYmpba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGl0ZW0ub3B0aW9uYWwgJiYgb2JqSXRlbSA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgKGl0ZW0uZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQgJiYgb2JqSXRlbSA9PT0gaXRlbS5kZWZhdWx0VmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWl0ZW0ub3B0aW9uYWwgJiYgb2JqSXRlbSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU2VyaWFsaXplckVycm9yKHRhcmdldFNjaGVtYS5uYW1lLCBgUHJvcGVydHkgJyR7a2V5fScgaXMgcmVxdWlyZWQuYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpdGVtLnR5cGUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmNvbnZlcnRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLnJlcGVhdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gb2JqSXRlbS5tYXAoKGVsKSA9PiBpdGVtLmNvbnZlcnRlci50b0pTT04oZWwsIG9iaikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBpdGVtLmNvbnZlcnRlci50b0pTT04ob2JqSXRlbSwgb2JqKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG9iakl0ZW07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5yZXBlYXRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gb2JqSXRlbS5tYXAoKGVsKSA9PiB0aGlzLnRvSlNPTihlbCwgeyBzY2hlbWFOYW1lIH0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy50b0pTT04ob2JqSXRlbSwgeyBzY2hlbWFOYW1lIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tUeXBlcyh2YWx1ZSwgaXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tWYWx1ZXModmFsdWUsIGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNbaXRlbS5uYW1lIHx8IGtleV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBTZXJpYWxpemVyRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU2VyaWFsaXplckVycm9yKHNjaGVtYS50YXJnZXQubmFtZSwgYFByb3BlcnR5ICcke2tleX0nIGlzIHdyb25nLiAke2UubWVzc2FnZX1gLCBlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJlcyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzW2tleV0gPSB0aGlzLnRvSlNPTihvYmpba2V5XSwgeyBzY2hlbWFOYW1lIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXMgPSBvYmo7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9XHJcbn1cblxuY2xhc3MgSnNvblBhcnNlciBleHRlbmRzIEpzb25UcmFuc2Zvcm0ge1xyXG4gICAgc3RhdGljIHBhcnNlKGRhdGEsIG9wdGlvbnMpIHtcclxuICAgICAgICBjb25zdCBvYmogPSBKU09OLnBhcnNlKGRhdGEpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZyb21KU09OKG9iaiwgb3B0aW9ucyk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZnJvbUpTT04odGFyZ2V0LCBvcHRpb25zKSB7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0U2NoZW1hID0gb3B0aW9ucy50YXJnZXRTY2hlbWE7XHJcbiAgICAgICAgY29uc3Qgc2NoZW1hTmFtZSA9IG9wdGlvbnMuc2NoZW1hTmFtZSB8fCBERUZBVUxUX1NDSEVNQTtcclxuICAgICAgICBjb25zdCBvYmogPSBuZXcgdGFyZ2V0U2NoZW1hKCk7XHJcbiAgICAgICAgaWYgKGlzQ29udmVydGlibGUob2JqKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gb2JqLmZyb21KU09OKHRhcmdldCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHNjaGVtYSA9IHNjaGVtYVN0b3JhZ2UuZ2V0KHRhcmdldFNjaGVtYSk7XHJcbiAgICAgICAgY29uc3QgbmFtZWRTY2hlbWEgPSB0aGlzLmdldFNjaGVtYUJ5TmFtZShzY2hlbWEsIHNjaGVtYU5hbWUpO1xyXG4gICAgICAgIGNvbnN0IGtleUVycm9ycyA9IHt9O1xyXG4gICAgICAgIGlmIChvcHRpb25zLnN0cmljdFByb3BlcnR5ICYmICFBcnJheS5pc0FycmF5KHRhcmdldCkpIHtcclxuICAgICAgICAgICAgSnNvblBhcnNlci5jaGVja1N0cmljdFByb3BlcnR5KHRhcmdldCwgbmFtZWRTY2hlbWEsIHNjaGVtYSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIG5hbWVkU2NoZW1hKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gbmFtZWRTY2hlbWFba2V5XTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBpdGVtLm5hbWUgfHwga2V5O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB0YXJnZXRbbmFtZV07XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAoaXRlbS5vcHRpb25hbCB8fCBpdGVtLmRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFpdGVtLm9wdGlvbmFsICYmIHZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUGFyc2VyRXJyb3Ioc2NoZW1hLCBgUHJvcGVydHkgJyR7bmFtZX0nIGlzIHJlcXVpcmVkLmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja1R5cGVzKHZhbHVlLCBpdGVtKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tWYWx1ZXModmFsdWUsIGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAoaXRlbS50eXBlKSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmNvbnZlcnRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5yZXBlYXRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqW2tleV0gPSB2YWx1ZS5tYXAoKGVsKSA9PiBpdGVtLmNvbnZlcnRlci5mcm9tSlNPTihlbCwgb2JqKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmpba2V5XSA9IGl0ZW0uY29udmVydGVyLmZyb21KU09OKHZhbHVlLCBvYmopO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmpba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld09wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFNjaGVtYTogaXRlbS50eXBlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY2hlbWFOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0ucmVwZWF0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqW2tleV0gPSB2YWx1ZS5tYXAoKGVsKSA9PiB0aGlzLmZyb21KU09OKGVsLCBuZXdPcHRpb25zKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmpba2V5XSA9IHRoaXMuZnJvbUpTT04odmFsdWUsIG5ld09wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCEoZSBpbnN0YW5jZW9mIFBhcnNlckVycm9yKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUgPSBuZXcgUGFyc2VyRXJyb3Ioc2NoZW1hLCBgUHJvcGVydHkgJyR7a2V5fScgaXMgd3JvbmcuICR7ZS5tZXNzYWdlfWAsIGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3RyaWN0QWxsS2V5cykge1xyXG4gICAgICAgICAgICAgICAgICAgIGtleUVycm9yc1trZXldID0gZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGtleUVycm9ycyk7XHJcbiAgICAgICAgaWYgKGtleXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBLZXlFcnJvcihzY2hlbWEsIGtleXMsIGtleUVycm9ycyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgY2hlY2tTdHJpY3RQcm9wZXJ0eSh0YXJnZXQsIG5hbWVkU2NoZW1hLCBzY2hlbWEpIHtcclxuICAgICAgICBjb25zdCBqc29uUHJvcHMgPSBPYmplY3Qua2V5cyh0YXJnZXQpO1xyXG4gICAgICAgIGNvbnN0IHNjaGVtYVByb3BzID0gT2JqZWN0LmtleXMobmFtZWRTY2hlbWEpO1xyXG4gICAgICAgIGNvbnN0IGtleXMgPSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBqc29uUHJvcHMpIHtcclxuICAgICAgICAgICAgaWYgKHNjaGVtYVByb3BzLmluZGV4T2Yoa2V5KSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIGtleXMucHVzaChrZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChrZXlzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgS2V5RXJyb3Ioc2NoZW1hLCBrZXlzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxuZnVuY3Rpb24gZ2V0VmFsaWRhdGlvbnMoaXRlbSkge1xyXG4gICAgY29uc3QgdmFsaWRhdGlvbnMgPSBbXTtcclxuICAgIGlmIChpdGVtLnBhdHRlcm4pIHtcclxuICAgICAgICB2YWxpZGF0aW9ucy5wdXNoKG5ldyBQYXR0ZXJuVmFsaWRhdGlvbihpdGVtLnBhdHRlcm4pKTtcclxuICAgIH1cclxuICAgIGlmIChpdGVtLnR5cGUgPT09IGV4cG9ydHMuSnNvblByb3BUeXBlcy5OdW1iZXIgfHwgaXRlbS50eXBlID09PSBleHBvcnRzLkpzb25Qcm9wVHlwZXMuQW55KSB7XHJcbiAgICAgICAgaWYgKGl0ZW0ubWluSW5jbHVzaXZlICE9PSB1bmRlZmluZWQgfHwgaXRlbS5tYXhJbmNsdXNpdmUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB2YWxpZGF0aW9ucy5wdXNoKG5ldyBJbmNsdXNpdmVWYWxpZGF0aW9uKGl0ZW0ubWluSW5jbHVzaXZlLCBpdGVtLm1heEluY2x1c2l2ZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXRlbS5taW5FeGNsdXNpdmUgIT09IHVuZGVmaW5lZCB8fCBpdGVtLm1heEV4Y2x1c2l2ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25zLnB1c2gobmV3IEV4Y2x1c2l2ZVZhbGlkYXRpb24oaXRlbS5taW5FeGNsdXNpdmUsIGl0ZW0ubWF4RXhjbHVzaXZlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpdGVtLmVudW1lcmF0aW9uICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdmFsaWRhdGlvbnMucHVzaChuZXcgRW51bWVyYXRpb25WYWxpZGF0aW9uKGl0ZW0uZW51bWVyYXRpb24pKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoaXRlbS50eXBlID09PSBleHBvcnRzLkpzb25Qcm9wVHlwZXMuU3RyaW5nIHx8IGl0ZW0ucmVwZWF0ZWQgfHwgaXRlbS50eXBlID09PSBleHBvcnRzLkpzb25Qcm9wVHlwZXMuQW55KSB7XHJcbiAgICAgICAgaWYgKGl0ZW0ubGVuZ3RoICE9PSB1bmRlZmluZWQgfHwgaXRlbS5taW5MZW5ndGggIT09IHVuZGVmaW5lZCB8fCBpdGVtLm1heExlbmd0aCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25zLnB1c2gobmV3IExlbmd0aFZhbGlkYXRpb24oaXRlbS5sZW5ndGgsIGl0ZW0ubWluTGVuZ3RoLCBpdGVtLm1heExlbmd0aCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB2YWxpZGF0aW9ucztcclxufVxyXG5jb25zdCBKc29uUHJvcCA9IChvcHRpb25zID0ge30pID0+ICh0YXJnZXQsIHByb3BlcnR5S2V5KSA9PiB7XHJcbiAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBgQ2Fubm90IHNldCB0eXBlIGZvciAke3Byb3BlcnR5S2V5fSBwcm9wZXJ0eSBvZiAke3RhcmdldC5jb25zdHJ1Y3Rvci5uYW1lfSBzY2hlbWFgO1xyXG4gICAgbGV0IHNjaGVtYTtcclxuICAgIGlmICghc2NoZW1hU3RvcmFnZS5oYXModGFyZ2V0LmNvbnN0cnVjdG9yKSkge1xyXG4gICAgICAgIHNjaGVtYSA9IHNjaGVtYVN0b3JhZ2UuY3JlYXRlKHRhcmdldC5jb25zdHJ1Y3Rvcik7XHJcbiAgICAgICAgc2NoZW1hU3RvcmFnZS5zZXQodGFyZ2V0LmNvbnN0cnVjdG9yLCBzY2hlbWEpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgc2NoZW1hID0gc2NoZW1hU3RvcmFnZS5nZXQodGFyZ2V0LmNvbnN0cnVjdG9yKTtcclxuICAgICAgICBpZiAoc2NoZW1hLnRhcmdldCAhPT0gdGFyZ2V0LmNvbnN0cnVjdG9yKSB7XHJcbiAgICAgICAgICAgIHNjaGVtYSA9IHNjaGVtYVN0b3JhZ2UuY3JlYXRlKHRhcmdldC5jb25zdHJ1Y3Rvcik7XHJcbiAgICAgICAgICAgIHNjaGVtYVN0b3JhZ2Uuc2V0KHRhcmdldC5jb25zdHJ1Y3Rvciwgc2NoZW1hKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCBkZWZhdWx0U2NoZW1hID0ge1xyXG4gICAgICAgIHR5cGU6IGV4cG9ydHMuSnNvblByb3BUeXBlcy5BbnksXHJcbiAgICAgICAgdmFsaWRhdGlvbnM6IFtdLFxyXG4gICAgfTtcclxuICAgIGNvbnN0IGNvcHlPcHRpb25zID0gT2JqZWN0LmFzc2lnbihkZWZhdWx0U2NoZW1hLCBvcHRpb25zKTtcclxuICAgIGNvcHlPcHRpb25zLnZhbGlkYXRpb25zID0gZ2V0VmFsaWRhdGlvbnMoY29weU9wdGlvbnMpO1xyXG4gICAgaWYgKHR5cGVvZiBjb3B5T3B0aW9ucy50eXBlICE9PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgaWYgKCFzY2hlbWFTdG9yYWdlLmhhcyhjb3B5T3B0aW9ucy50eXBlKSAmJiAhaXNDb252ZXJ0aWJsZShjb3B5T3B0aW9ucy50eXBlKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7ZXJyb3JNZXNzYWdlfS4gQXNzaWduaW5nIHR5cGUgZG9lc24ndCBoYXZlIHNjaGVtYS5gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBsZXQgc2NoZW1hTmFtZXM7XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvcHRpb25zLnNjaGVtYSkpIHtcclxuICAgICAgICBzY2hlbWFOYW1lcyA9IG9wdGlvbnMuc2NoZW1hO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgc2NoZW1hTmFtZXMgPSBbb3B0aW9ucy5zY2hlbWEgfHwgREVGQVVMVF9TQ0hFTUFdO1xyXG4gICAgfVxyXG4gICAgZm9yIChjb25zdCBzY2hlbWFOYW1lIG9mIHNjaGVtYU5hbWVzKSB7XHJcbiAgICAgICAgaWYgKCFzY2hlbWEubmFtZXNbc2NoZW1hTmFtZV0pIHtcclxuICAgICAgICAgICAgc2NoZW1hLm5hbWVzW3NjaGVtYU5hbWVdID0ge307XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG5hbWVkU2NoZW1hID0gc2NoZW1hLm5hbWVzW3NjaGVtYU5hbWVdO1xyXG4gICAgICAgIG5hbWVkU2NoZW1hW3Byb3BlcnR5S2V5XSA9IGNvcHlPcHRpb25zO1xyXG4gICAgfVxyXG59O1xuXG5leHBvcnRzLkpzb25FcnJvciA9IEpzb25FcnJvcjtcbmV4cG9ydHMuSnNvblBhcnNlciA9IEpzb25QYXJzZXI7XG5leHBvcnRzLkpzb25Qcm9wID0gSnNvblByb3A7XG5leHBvcnRzLkpzb25TZXJpYWxpemVyID0gSnNvblNlcmlhbGl6ZXI7XG5leHBvcnRzLktleUVycm9yID0gS2V5RXJyb3I7XG5leHBvcnRzLlBhcnNlckVycm9yID0gUGFyc2VyRXJyb3I7XG5leHBvcnRzLlNlcmlhbGl6ZXJFcnJvciA9IFNlcmlhbGl6ZXJFcnJvcjtcbmV4cG9ydHMuVHJhbnNmb3JtRXJyb3IgPSBUcmFuc2Zvcm1FcnJvcjtcbmV4cG9ydHMuVmFsaWRhdGlvbkVycm9yID0gVmFsaWRhdGlvbkVycm9yO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiSnNvbkVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsIm1lc3NhZ2UiLCJpbm5lckVycm9yIiwiVHJhbnNmb3JtRXJyb3IiLCJzY2hlbWEiLCJQYXJzZXJFcnJvciIsInRhcmdldCIsIm5hbWUiLCJWYWxpZGF0aW9uRXJyb3IiLCJTZXJpYWxpemVyRXJyb3IiLCJzY2hlbWFOYW1lIiwiS2V5RXJyb3IiLCJrZXlzIiwiZXJyb3JzIiwiSnNvblByb3BUeXBlcyIsImNoZWNrVHlwZSIsInR5cGUiLCJCb29sZWFuIiwiTnVtYmVyIiwiU3RyaW5nIiwidGhyb3dJZlR5cGVJc1dyb25nIiwiVHlwZUVycm9yIiwiaXNDb252ZXJ0aWJsZSIsInByb3RvdHlwZSIsInRvSlNPTiIsImZyb21KU09OIiwiSnNvblNjaGVtYVN0b3JhZ2UiLCJpdGVtcyIsIk1hcCIsImhhcyIsImZpbmRQYXJlbnRTY2hlbWEiLCJnZXQiLCJjcmVhdGUiLCJuYW1lcyIsInBhcmVudFNjaGVtYSIsImFzc2lnbiIsInNldCIsInBhcmVudCIsIl9fcHJvdG9fXyIsIkRFRkFVTFRfU0NIRU1BIiwic2NoZW1hU3RvcmFnZSIsIlBhdHRlcm5WYWxpZGF0aW9uIiwicGF0dGVybiIsIlJlZ0V4cCIsInZhbGlkYXRlIiwic291cmNlIiwiZmxhZ3MiLCJleGVjIiwidG9TdHJpbmciLCJJbmNsdXNpdmVWYWxpZGF0aW9uIiwibWluIiwiTUlOX1ZBTFVFIiwibWF4IiwiTUFYX1ZBTFVFIiwiRXhjbHVzaXZlVmFsaWRhdGlvbiIsIkxlbmd0aFZhbGlkYXRpb24iLCJsZW5ndGgiLCJtaW5MZW5ndGgiLCJtYXhMZW5ndGgiLCJ1bmRlZmluZWQiLCJFbnVtZXJhdGlvblZhbGlkYXRpb24iLCJlbnVtZXJhdGlvbiIsImluY2x1ZGVzIiwibWFwIiwidiIsImpvaW4iLCJKc29uVHJhbnNmb3JtIiwiY2hlY2tWYWx1ZXMiLCJkYXRhIiwic2NoZW1hSXRlbSIsInZhbHVlcyIsIkFycmF5IiwiaXNBcnJheSIsInZhbGlkYXRpb24iLCJ2YWxpZGF0aW9ucyIsInJlcGVhdGVkIiwiY2hlY2tUeXBlcyIsImdldFNjaGVtYUJ5TmFtZSIsIkpzb25TZXJpYWxpemVyIiwic2VyaWFsaXplIiwib2JqIiwib3B0aW9ucyIsInJlcGxhY2VyIiwic3BhY2UiLCJqc29uIiwiSlNPTiIsInN0cmluZ2lmeSIsInJlcyIsInRhcmdldFNjaGVtYSIsIml0ZW0iLCJwdXNoIiwibmFtZWRTY2hlbWEiLCJrZXkiLCJvYmpJdGVtIiwib3B0aW9uYWwiLCJkZWZhdWx0VmFsdWUiLCJjb252ZXJ0ZXIiLCJlbCIsImUiLCJKc29uUGFyc2VyIiwicGFyc2UiLCJrZXlFcnJvcnMiLCJzdHJpY3RQcm9wZXJ0eSIsImNoZWNrU3RyaWN0UHJvcGVydHkiLCJuZXdPcHRpb25zIiwic3RyaWN0QWxsS2V5cyIsImpzb25Qcm9wcyIsInNjaGVtYVByb3BzIiwiaW5kZXhPZiIsImdldFZhbGlkYXRpb25zIiwiQW55IiwibWluSW5jbHVzaXZlIiwibWF4SW5jbHVzaXZlIiwibWluRXhjbHVzaXZlIiwibWF4RXhjbHVzaXZlIiwiSnNvblByb3AiLCJwcm9wZXJ0eUtleSIsImVycm9yTWVzc2FnZSIsImRlZmF1bHRTY2hlbWEiLCJjb3B5T3B0aW9ucyIsInNjaGVtYU5hbWVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@peculiar/json-schema/build/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@peculiar/webcrypto/build/webcrypto.js":
/*!*************************************************************!*\
  !*** ./node_modules/@peculiar/webcrypto/build/webcrypto.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*!\n Copyright (c) Peculiar Ventures, LLC\n*/ \nvar core = __webpack_require__(/*! webcrypto-core */ \"(action-browser)/./node_modules/webcrypto-core/build/webcrypto-core.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar process = __webpack_require__(/*! process */ \"process\");\nvar tslib = __webpack_require__(/*! tslib */ \"(action-browser)/./node_modules/tslib/tslib.es6.mjs\");\nvar jsonSchema = __webpack_require__(/*! @peculiar/json-schema */ \"(action-browser)/./node_modules/@peculiar/json-schema/build/index.js\");\nvar pvtsutils = __webpack_require__(/*! pvtsutils */ \"(action-browser)/./node_modules/pvtsutils/build/index.js\");\nvar asn1Schema = __webpack_require__(/*! @peculiar/asn1-schema */ \"(action-browser)/./node_modules/@peculiar/asn1-schema/build/cjs/index.js\");\nfunction _interopNamespaceDefault(e) {\n    var n = Object.create(null);\n    if (e) {\n        Object.keys(e).forEach(function(k) {\n            if (k !== \"default\") {\n                var d = Object.getOwnPropertyDescriptor(e, k);\n                Object.defineProperty(n, k, d.get ? d : {\n                    enumerable: true,\n                    get: function() {\n                        return e[k];\n                    }\n                });\n            }\n        });\n    }\n    n.default = e;\n    return Object.freeze(n);\n}\nvar core__namespace = /*#__PURE__*/ _interopNamespaceDefault(core);\nvar crypto__namespace = /*#__PURE__*/ _interopNamespaceDefault(crypto);\nvar process__namespace = /*#__PURE__*/ _interopNamespaceDefault(process);\nconst JsonBase64UrlConverter = {\n    fromJSON: (value)=>Buffer.from(pvtsutils.Convert.FromBase64Url(value)),\n    toJSON: (value)=>pvtsutils.Convert.ToBase64Url(value)\n};\nclass CryptoKey extends core__namespace.CryptoKey {\n    constructor(){\n        super(...arguments);\n        this.data = Buffer.alloc(0);\n        this.algorithm = {\n            name: \"\"\n        };\n        this.extractable = false;\n        this.type = \"secret\";\n        this.usages = [];\n        this.kty = \"oct\";\n        this.alg = \"\";\n    }\n}\ntslib.__decorate([\n    jsonSchema.JsonProp({\n        name: \"ext\",\n        type: jsonSchema.JsonPropTypes.Boolean,\n        optional: true\n    })\n], CryptoKey.prototype, \"extractable\", void 0);\ntslib.__decorate([\n    jsonSchema.JsonProp({\n        name: \"key_ops\",\n        type: jsonSchema.JsonPropTypes.String,\n        repeated: true,\n        optional: true\n    })\n], CryptoKey.prototype, \"usages\", void 0);\ntslib.__decorate([\n    jsonSchema.JsonProp({\n        type: jsonSchema.JsonPropTypes.String\n    })\n], CryptoKey.prototype, \"kty\", void 0);\ntslib.__decorate([\n    jsonSchema.JsonProp({\n        type: jsonSchema.JsonPropTypes.String,\n        optional: true\n    })\n], CryptoKey.prototype, \"alg\", void 0);\nclass SymmetricKey extends CryptoKey {\n    constructor(){\n        super(...arguments);\n        this.kty = \"oct\";\n        this.type = \"secret\";\n    }\n}\nclass AsymmetricKey extends CryptoKey {\n}\nclass AesCryptoKey extends SymmetricKey {\n    get alg() {\n        switch(this.algorithm.name.toUpperCase()){\n            case \"AES-CBC\":\n                return `A${this.algorithm.length}CBC`;\n            case \"AES-CTR\":\n                return `A${this.algorithm.length}CTR`;\n            case \"AES-GCM\":\n                return `A${this.algorithm.length}GCM`;\n            case \"AES-KW\":\n                return `A${this.algorithm.length}KW`;\n            case \"AES-CMAC\":\n                return `A${this.algorithm.length}CMAC`;\n            case \"AES-ECB\":\n                return `A${this.algorithm.length}ECB`;\n            default:\n                throw new core__namespace.AlgorithmError(\"Unsupported algorithm name\");\n        }\n    }\n    set alg(value) {}\n}\ntslib.__decorate([\n    jsonSchema.JsonProp({\n        name: \"k\",\n        converter: JsonBase64UrlConverter\n    })\n], AesCryptoKey.prototype, \"data\", void 0);\nconst keyStorage = new WeakMap();\nfunction getCryptoKey(key) {\n    const res = keyStorage.get(key);\n    if (!res) {\n        throw new core__namespace.OperationError(\"Cannot get CryptoKey from secure storage\");\n    }\n    return res;\n}\nfunction setCryptoKey(value) {\n    const key = core__namespace.CryptoKey.create(value.algorithm, value.type, value.extractable, value.usages);\n    Object.freeze(key);\n    keyStorage.set(key, value);\n    return key;\n}\nclass AesCrypto {\n    static async generateKey(algorithm, extractable, keyUsages) {\n        const key = new AesCryptoKey();\n        key.algorithm = algorithm;\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        key.data = crypto.randomBytes(algorithm.length >> 3);\n        return key;\n    }\n    static async exportKey(format, key) {\n        if (!(key instanceof AesCryptoKey)) {\n            throw new Error(\"key: Is not AesCryptoKey\");\n        }\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                return jsonSchema.JsonSerializer.toJSON(key);\n            case \"raw\":\n                return new Uint8Array(key.data).buffer;\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk' or 'raw'\");\n        }\n    }\n    static async importKey(format, keyData, algorithm, extractable, keyUsages) {\n        let key;\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                key = jsonSchema.JsonParser.fromJSON(keyData, {\n                    targetSchema: AesCryptoKey\n                });\n                break;\n            case \"raw\":\n                key = new AesCryptoKey();\n                key.data = Buffer.from(keyData);\n                break;\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk' or 'raw'\");\n        }\n        key.algorithm = algorithm;\n        key.algorithm.length = key.data.length << 3;\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        switch(key.algorithm.length){\n            case 128:\n            case 192:\n            case 256:\n                break;\n            default:\n                throw new core__namespace.OperationError(\"keyData: Is wrong key length\");\n        }\n        return key;\n    }\n    static async encrypt(algorithm, key, data) {\n        switch(algorithm.name.toUpperCase()){\n            case \"AES-CBC\":\n                return this.encryptAesCBC(algorithm, key, Buffer.from(data));\n            case \"AES-CTR\":\n                return this.encryptAesCTR(algorithm, key, Buffer.from(data));\n            case \"AES-GCM\":\n                return this.encryptAesGCM(algorithm, key, Buffer.from(data));\n            case \"AES-KW\":\n                return this.encryptAesKW(algorithm, key, Buffer.from(data));\n            case \"AES-ECB\":\n                return this.encryptAesECB(algorithm, key, Buffer.from(data));\n            default:\n                throw new core__namespace.OperationError(\"algorithm: Is not recognized\");\n        }\n    }\n    static async decrypt(algorithm, key, data) {\n        if (!(key instanceof AesCryptoKey)) {\n            throw new Error(\"key: Is not AesCryptoKey\");\n        }\n        switch(algorithm.name.toUpperCase()){\n            case \"AES-CBC\":\n                return this.decryptAesCBC(algorithm, key, Buffer.from(data));\n            case \"AES-CTR\":\n                return this.decryptAesCTR(algorithm, key, Buffer.from(data));\n            case \"AES-GCM\":\n                return this.decryptAesGCM(algorithm, key, Buffer.from(data));\n            case \"AES-KW\":\n                return this.decryptAesKW(algorithm, key, Buffer.from(data));\n            case \"AES-ECB\":\n                return this.decryptAesECB(algorithm, key, Buffer.from(data));\n            default:\n                throw new core__namespace.OperationError(\"algorithm: Is not recognized\");\n        }\n    }\n    static async encryptAesCBC(algorithm, key, data) {\n        const cipher = crypto.createCipheriv(`aes-${key.algorithm.length}-cbc`, key.data, new Uint8Array(algorithm.iv));\n        let enc = cipher.update(data);\n        enc = Buffer.concat([\n            enc,\n            cipher.final()\n        ]);\n        const res = new Uint8Array(enc).buffer;\n        return res;\n    }\n    static async decryptAesCBC(algorithm, key, data) {\n        const decipher = crypto.createDecipheriv(`aes-${key.algorithm.length}-cbc`, key.data, new Uint8Array(algorithm.iv));\n        let dec = decipher.update(data);\n        dec = Buffer.concat([\n            dec,\n            decipher.final()\n        ]);\n        return new Uint8Array(dec).buffer;\n    }\n    static async encryptAesCTR(algorithm, key, data) {\n        const cipher = crypto.createCipheriv(`aes-${key.algorithm.length}-ctr`, key.data, Buffer.from(algorithm.counter));\n        let enc = cipher.update(data);\n        enc = Buffer.concat([\n            enc,\n            cipher.final()\n        ]);\n        const res = new Uint8Array(enc).buffer;\n        return res;\n    }\n    static async decryptAesCTR(algorithm, key, data) {\n        const decipher = crypto.createDecipheriv(`aes-${key.algorithm.length}-ctr`, key.data, new Uint8Array(algorithm.counter));\n        let dec = decipher.update(data);\n        dec = Buffer.concat([\n            dec,\n            decipher.final()\n        ]);\n        return new Uint8Array(dec).buffer;\n    }\n    static async encryptAesGCM(algorithm, key, data) {\n        const cipher = crypto.createCipheriv(`aes-${key.algorithm.length}-gcm`, key.data, Buffer.from(algorithm.iv), {\n            authTagLength: (algorithm.tagLength || 128) >> 3\n        });\n        if (algorithm.additionalData) {\n            cipher.setAAD(Buffer.from(algorithm.additionalData));\n        }\n        let enc = cipher.update(data);\n        enc = Buffer.concat([\n            enc,\n            cipher.final(),\n            cipher.getAuthTag()\n        ]);\n        const res = new Uint8Array(enc).buffer;\n        return res;\n    }\n    static async decryptAesGCM(algorithm, key, data) {\n        const decipher = crypto.createDecipheriv(`aes-${key.algorithm.length}-gcm`, key.data, new Uint8Array(algorithm.iv));\n        const tagLength = (algorithm.tagLength || 128) >> 3;\n        const enc = data.slice(0, data.length - tagLength);\n        const tag = data.slice(data.length - tagLength);\n        if (algorithm.additionalData) {\n            decipher.setAAD(Buffer.from(algorithm.additionalData));\n        }\n        decipher.setAuthTag(tag);\n        let dec = decipher.update(enc);\n        dec = Buffer.concat([\n            dec,\n            decipher.final()\n        ]);\n        return new Uint8Array(dec).buffer;\n    }\n    static async encryptAesKW(algorithm, key, data) {\n        const cipher = crypto.createCipheriv(`id-aes${key.algorithm.length}-wrap`, key.data, this.AES_KW_IV);\n        let enc = cipher.update(data);\n        enc = Buffer.concat([\n            enc,\n            cipher.final()\n        ]);\n        return new Uint8Array(enc).buffer;\n    }\n    static async decryptAesKW(algorithm, key, data) {\n        const decipher = crypto.createDecipheriv(`id-aes${key.algorithm.length}-wrap`, key.data, this.AES_KW_IV);\n        let dec = decipher.update(data);\n        dec = Buffer.concat([\n            dec,\n            decipher.final()\n        ]);\n        return new Uint8Array(dec).buffer;\n    }\n    static async encryptAesECB(algorithm, key, data) {\n        const cipher = crypto.createCipheriv(`aes-${key.algorithm.length}-ecb`, key.data, new Uint8Array(0));\n        let enc = cipher.update(data);\n        enc = Buffer.concat([\n            enc,\n            cipher.final()\n        ]);\n        const res = new Uint8Array(enc).buffer;\n        return res;\n    }\n    static async decryptAesECB(algorithm, key, data) {\n        const decipher = crypto.createDecipheriv(`aes-${key.algorithm.length}-ecb`, key.data, new Uint8Array(0));\n        let dec = decipher.update(data);\n        dec = Buffer.concat([\n            dec,\n            decipher.final()\n        ]);\n        return new Uint8Array(dec).buffer;\n    }\n}\nAesCrypto.AES_KW_IV = Buffer.from(\"A6A6A6A6A6A6A6A6\", \"hex\");\nclass AesCbcProvider extends core__namespace.AesCbcProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const key = await AesCrypto.generateKey({\n            name: this.name,\n            length: algorithm.length\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    async onEncrypt(algorithm, key, data) {\n        return AesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onDecrypt(algorithm, key, data) {\n        return AesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return AesCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await AesCrypto.importKey(format, keyData, {\n            name: algorithm.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\n            throw new TypeError(\"key: Is not a AesCryptoKey\");\n        }\n    }\n}\nconst zero = Buffer.from([\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0\n]);\nconst rb = Buffer.from([\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    135\n]);\nconst blockSize = 16;\nfunction bitShiftLeft(buffer) {\n    const shifted = Buffer.alloc(buffer.length);\n    const last = buffer.length - 1;\n    for(let index = 0; index < last; index++){\n        shifted[index] = buffer[index] << 1;\n        if (buffer[index + 1] & 0x80) {\n            shifted[index] += 0x01;\n        }\n    }\n    shifted[last] = buffer[last] << 1;\n    return shifted;\n}\nfunction xor(a, b) {\n    const length = Math.min(a.length, b.length);\n    const output = Buffer.alloc(length);\n    for(let index = 0; index < length; index++){\n        output[index] = a[index] ^ b[index];\n    }\n    return output;\n}\nfunction aes(key, message) {\n    const cipher = crypto__namespace.createCipheriv(`aes${key.length << 3}`, key, zero);\n    const result = cipher.update(message);\n    cipher.final();\n    return result;\n}\nfunction getMessageBlock(message, blockIndex) {\n    const block = Buffer.alloc(blockSize);\n    const start = blockIndex * blockSize;\n    const end = start + blockSize;\n    message.copy(block, 0, start, end);\n    return block;\n}\nfunction getPaddedMessageBlock(message, blockIndex) {\n    const block = Buffer.alloc(blockSize);\n    const start = blockIndex * blockSize;\n    const end = message.length;\n    block.fill(0);\n    message.copy(block, 0, start, end);\n    block[end - start] = 0x80;\n    return block;\n}\nfunction generateSubkeys(key) {\n    const l = aes(key, zero);\n    let subkey1 = bitShiftLeft(l);\n    if (l[0] & 0x80) {\n        subkey1 = xor(subkey1, rb);\n    }\n    let subkey2 = bitShiftLeft(subkey1);\n    if (subkey1[0] & 0x80) {\n        subkey2 = xor(subkey2, rb);\n    }\n    return {\n        subkey1,\n        subkey2\n    };\n}\nfunction aesCmac(key, message) {\n    const subkeys = generateSubkeys(key);\n    let blockCount = Math.ceil(message.length / blockSize);\n    let lastBlockCompleteFlag;\n    let lastBlock;\n    if (blockCount === 0) {\n        blockCount = 1;\n        lastBlockCompleteFlag = false;\n    } else {\n        lastBlockCompleteFlag = message.length % blockSize === 0;\n    }\n    const lastBlockIndex = blockCount - 1;\n    if (lastBlockCompleteFlag) {\n        lastBlock = xor(getMessageBlock(message, lastBlockIndex), subkeys.subkey1);\n    } else {\n        lastBlock = xor(getPaddedMessageBlock(message, lastBlockIndex), subkeys.subkey2);\n    }\n    let x = zero;\n    let y;\n    for(let index = 0; index < lastBlockIndex; index++){\n        y = xor(x, getMessageBlock(message, index));\n        x = aes(key, y);\n    }\n    y = xor(lastBlock, x);\n    return aes(key, y);\n}\nclass AesCmacProvider extends core__namespace.AesCmacProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const key = await AesCrypto.generateKey({\n            name: this.name,\n            length: algorithm.length\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    async onSign(algorithm, key, data) {\n        const result = aesCmac(getCryptoKey(key).data, Buffer.from(data));\n        return new Uint8Array(result).buffer;\n    }\n    async onVerify(algorithm, key, signature, data) {\n        const signature2 = await this.sign(algorithm, key, data);\n        return Buffer.from(signature).compare(Buffer.from(signature2)) === 0;\n    }\n    async onExportKey(format, key) {\n        return AesCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const res = await AesCrypto.importKey(format, keyData, {\n            name: algorithm.name\n        }, extractable, keyUsages);\n        return setCryptoKey(res);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\n            throw new TypeError(\"key: Is not a AesCryptoKey\");\n        }\n    }\n}\nclass AesCtrProvider extends core__namespace.AesCtrProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const key = await AesCrypto.generateKey({\n            name: this.name,\n            length: algorithm.length\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    async onEncrypt(algorithm, key, data) {\n        return AesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onDecrypt(algorithm, key, data) {\n        return AesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return AesCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const res = await AesCrypto.importKey(format, keyData, {\n            name: algorithm.name\n        }, extractable, keyUsages);\n        return setCryptoKey(res);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\n            throw new TypeError(\"key: Is not a AesCryptoKey\");\n        }\n    }\n}\nclass AesGcmProvider extends core__namespace.AesGcmProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const key = await AesCrypto.generateKey({\n            name: this.name,\n            length: algorithm.length\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    async onEncrypt(algorithm, key, data) {\n        return AesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onDecrypt(algorithm, key, data) {\n        return AesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return AesCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const res = await AesCrypto.importKey(format, keyData, {\n            name: algorithm.name\n        }, extractable, keyUsages);\n        return setCryptoKey(res);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\n            throw new TypeError(\"key: Is not a AesCryptoKey\");\n        }\n    }\n}\nclass AesKwProvider extends core__namespace.AesKwProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const res = await AesCrypto.generateKey({\n            name: this.name,\n            length: algorithm.length\n        }, extractable, keyUsages);\n        return setCryptoKey(res);\n    }\n    async onExportKey(format, key) {\n        return AesCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const res = await AesCrypto.importKey(format, keyData, {\n            name: algorithm.name\n        }, extractable, keyUsages);\n        return setCryptoKey(res);\n    }\n    async onEncrypt(algorithm, key, data) {\n        return AesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onDecrypt(algorithm, key, data) {\n        return AesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\n            throw new TypeError(\"key: Is not a AesCryptoKey\");\n        }\n    }\n}\nclass AesEcbProvider extends core__namespace.AesEcbProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const key = await AesCrypto.generateKey({\n            name: this.name,\n            length: algorithm.length\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    async onEncrypt(algorithm, key, data) {\n        return AesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onDecrypt(algorithm, key, data) {\n        return AesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return AesCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const res = await AesCrypto.importKey(format, keyData, {\n            name: algorithm.name\n        }, extractable, keyUsages);\n        return setCryptoKey(res);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\n            throw new TypeError(\"key: Is not a AesCryptoKey\");\n        }\n    }\n}\nclass DesCryptoKey extends SymmetricKey {\n    get alg() {\n        switch(this.algorithm.name.toUpperCase()){\n            case \"DES-CBC\":\n                return `DES-CBC`;\n            case \"DES-EDE3-CBC\":\n                return `3DES-CBC`;\n            default:\n                throw new core__namespace.AlgorithmError(\"Unsupported algorithm name\");\n        }\n    }\n    set alg(value) {}\n}\ntslib.__decorate([\n    jsonSchema.JsonProp({\n        name: \"k\",\n        converter: JsonBase64UrlConverter\n    })\n], DesCryptoKey.prototype, \"data\", void 0);\nclass DesCrypto {\n    static async generateKey(algorithm, extractable, keyUsages) {\n        const key = new DesCryptoKey();\n        key.algorithm = algorithm;\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        key.data = crypto.randomBytes(algorithm.length >> 3);\n        return key;\n    }\n    static async exportKey(format, key) {\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                return jsonSchema.JsonSerializer.toJSON(key);\n            case \"raw\":\n                return new Uint8Array(key.data).buffer;\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk' or 'raw'\");\n        }\n    }\n    static async importKey(format, keyData, algorithm, extractable, keyUsages) {\n        let key;\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                key = jsonSchema.JsonParser.fromJSON(keyData, {\n                    targetSchema: DesCryptoKey\n                });\n                break;\n            case \"raw\":\n                key = new DesCryptoKey();\n                key.data = Buffer.from(keyData);\n                break;\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk' or 'raw'\");\n        }\n        key.algorithm = algorithm;\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return key;\n    }\n    static async encrypt(algorithm, key, data) {\n        switch(algorithm.name.toUpperCase()){\n            case \"DES-CBC\":\n                return this.encryptDesCBC(algorithm, key, Buffer.from(data));\n            case \"DES-EDE3-CBC\":\n                return this.encryptDesEDE3CBC(algorithm, key, Buffer.from(data));\n            default:\n                throw new core__namespace.OperationError(\"algorithm: Is not recognized\");\n        }\n    }\n    static async decrypt(algorithm, key, data) {\n        if (!(key instanceof DesCryptoKey)) {\n            throw new Error(\"key: Is not DesCryptoKey\");\n        }\n        switch(algorithm.name.toUpperCase()){\n            case \"DES-CBC\":\n                return this.decryptDesCBC(algorithm, key, Buffer.from(data));\n            case \"DES-EDE3-CBC\":\n                return this.decryptDesEDE3CBC(algorithm, key, Buffer.from(data));\n            default:\n                throw new core__namespace.OperationError(\"algorithm: Is not recognized\");\n        }\n    }\n    static async encryptDesCBC(algorithm, key, data) {\n        const cipher = crypto.createCipheriv(`des-cbc`, key.data, new Uint8Array(algorithm.iv));\n        let enc = cipher.update(data);\n        enc = Buffer.concat([\n            enc,\n            cipher.final()\n        ]);\n        const res = new Uint8Array(enc).buffer;\n        return res;\n    }\n    static async decryptDesCBC(algorithm, key, data) {\n        const decipher = crypto.createDecipheriv(`des-cbc`, key.data, new Uint8Array(algorithm.iv));\n        let dec = decipher.update(data);\n        dec = Buffer.concat([\n            dec,\n            decipher.final()\n        ]);\n        return new Uint8Array(dec).buffer;\n    }\n    static async encryptDesEDE3CBC(algorithm, key, data) {\n        const cipher = crypto.createCipheriv(`des-ede3-cbc`, key.data, Buffer.from(algorithm.iv));\n        let enc = cipher.update(data);\n        enc = Buffer.concat([\n            enc,\n            cipher.final()\n        ]);\n        const res = new Uint8Array(enc).buffer;\n        return res;\n    }\n    static async decryptDesEDE3CBC(algorithm, key, data) {\n        const decipher = crypto.createDecipheriv(`des-ede3-cbc`, key.data, new Uint8Array(algorithm.iv));\n        let dec = decipher.update(data);\n        dec = Buffer.concat([\n            dec,\n            decipher.final()\n        ]);\n        return new Uint8Array(dec).buffer;\n    }\n}\nclass DesCbcProvider extends core__namespace.DesProvider {\n    constructor(){\n        super(...arguments);\n        this.keySizeBits = 64;\n        this.ivSize = 8;\n        this.name = \"DES-CBC\";\n    }\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const key = await DesCrypto.generateKey({\n            name: this.name,\n            length: this.keySizeBits\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    async onEncrypt(algorithm, key, data) {\n        return DesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onDecrypt(algorithm, key, data) {\n        return DesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return DesCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await DesCrypto.importKey(format, keyData, {\n            name: this.name,\n            length: this.keySizeBits\n        }, extractable, keyUsages);\n        if (key.data.length !== this.keySizeBits >> 3) {\n            throw new core__namespace.OperationError(\"keyData: Wrong key size\");\n        }\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof DesCryptoKey)) {\n            throw new TypeError(\"key: Is not a DesCryptoKey\");\n        }\n    }\n}\nclass DesEde3CbcProvider extends core__namespace.DesProvider {\n    constructor(){\n        super(...arguments);\n        this.keySizeBits = 192;\n        this.ivSize = 8;\n        this.name = \"DES-EDE3-CBC\";\n    }\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const key = await DesCrypto.generateKey({\n            name: this.name,\n            length: this.keySizeBits\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    async onEncrypt(algorithm, key, data) {\n        return DesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onDecrypt(algorithm, key, data) {\n        return DesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return DesCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await DesCrypto.importKey(format, keyData, {\n            name: this.name,\n            length: this.keySizeBits\n        }, extractable, keyUsages);\n        if (key.data.length !== this.keySizeBits >> 3) {\n            throw new core__namespace.OperationError(\"keyData: Wrong key size\");\n        }\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof DesCryptoKey)) {\n            throw new TypeError(\"key: Is not a DesCryptoKey\");\n        }\n    }\n}\nfunction getJwkAlgorithm(algorithm) {\n    switch(algorithm.name.toUpperCase()){\n        case \"RSA-OAEP\":\n            {\n                const mdSize = /(\\d+)$/.exec(algorithm.hash.name)[1];\n                return `RSA-OAEP${mdSize !== \"1\" ? `-${mdSize}` : \"\"}`;\n            }\n        case \"RSASSA-PKCS1-V1_5\":\n            return `RS${/(\\d+)$/.exec(algorithm.hash.name)[1]}`;\n        case \"RSA-PSS\":\n            return `PS${/(\\d+)$/.exec(algorithm.hash.name)[1]}`;\n        case \"RSA-PKCS1\":\n            return `RS1`;\n        default:\n            throw new core__namespace.OperationError(\"algorithm: Is not recognized\");\n    }\n}\nclass RsaPrivateKey extends AsymmetricKey {\n    constructor(){\n        super(...arguments);\n        this.type = \"private\";\n    }\n    getKey() {\n        const keyInfo = asn1Schema.AsnParser.parse(this.data, core__namespace.asn1.PrivateKeyInfo);\n        return asn1Schema.AsnParser.parse(keyInfo.privateKey, core__namespace.asn1.RsaPrivateKey);\n    }\n    toJSON() {\n        const key = this.getKey();\n        const json = {\n            kty: \"RSA\",\n            alg: getJwkAlgorithm(this.algorithm),\n            key_ops: this.usages,\n            ext: this.extractable\n        };\n        return Object.assign(json, jsonSchema.JsonSerializer.toJSON(key));\n    }\n    fromJSON(json) {\n        const key = jsonSchema.JsonParser.fromJSON(json, {\n            targetSchema: core__namespace.asn1.RsaPrivateKey\n        });\n        const keyInfo = new core__namespace.asn1.PrivateKeyInfo();\n        keyInfo.privateKeyAlgorithm.algorithm = \"1.2.840.113549.1.1.1\";\n        keyInfo.privateKeyAlgorithm.parameters = null;\n        keyInfo.privateKey = asn1Schema.AsnSerializer.serialize(key);\n        this.data = Buffer.from(asn1Schema.AsnSerializer.serialize(keyInfo));\n    }\n}\nclass RsaPublicKey extends AsymmetricKey {\n    constructor(){\n        super(...arguments);\n        this.type = \"public\";\n    }\n    getKey() {\n        const keyInfo = asn1Schema.AsnParser.parse(this.data, core__namespace.asn1.PublicKeyInfo);\n        return asn1Schema.AsnParser.parse(keyInfo.publicKey, core__namespace.asn1.RsaPublicKey);\n    }\n    toJSON() {\n        const key = this.getKey();\n        const json = {\n            kty: \"RSA\",\n            alg: getJwkAlgorithm(this.algorithm),\n            key_ops: this.usages,\n            ext: this.extractable\n        };\n        return Object.assign(json, jsonSchema.JsonSerializer.toJSON(key));\n    }\n    fromJSON(json) {\n        const key = jsonSchema.JsonParser.fromJSON(json, {\n            targetSchema: core__namespace.asn1.RsaPublicKey\n        });\n        const keyInfo = new core__namespace.asn1.PublicKeyInfo();\n        keyInfo.publicKeyAlgorithm.algorithm = \"1.2.840.113549.1.1.1\";\n        keyInfo.publicKeyAlgorithm.parameters = null;\n        keyInfo.publicKey = asn1Schema.AsnSerializer.serialize(key);\n        this.data = Buffer.from(asn1Schema.AsnSerializer.serialize(keyInfo));\n    }\n}\nclass RsaCrypto {\n    static async generateKey(algorithm, extractable, keyUsages) {\n        const privateKey = new RsaPrivateKey();\n        privateKey.algorithm = algorithm;\n        privateKey.extractable = extractable;\n        privateKey.usages = keyUsages.filter((usage)=>this.privateKeyUsages.indexOf(usage) !== -1);\n        const publicKey = new RsaPublicKey();\n        publicKey.algorithm = algorithm;\n        publicKey.extractable = true;\n        publicKey.usages = keyUsages.filter((usage)=>this.publicKeyUsages.indexOf(usage) !== -1);\n        const publicExponent = Buffer.concat([\n            Buffer.alloc(4 - algorithm.publicExponent.byteLength, 0),\n            Buffer.from(algorithm.publicExponent)\n        ]).readInt32BE(0);\n        const keys = crypto.generateKeyPairSync(\"rsa\", {\n            modulusLength: algorithm.modulusLength,\n            publicExponent,\n            publicKeyEncoding: {\n                format: \"der\",\n                type: \"spki\"\n            },\n            privateKeyEncoding: {\n                format: \"der\",\n                type: \"pkcs8\"\n            }\n        });\n        privateKey.data = keys.privateKey;\n        publicKey.data = keys.publicKey;\n        const res = {\n            privateKey,\n            publicKey\n        };\n        return res;\n    }\n    static async exportKey(format, key) {\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                return jsonSchema.JsonSerializer.toJSON(key);\n            case \"pkcs8\":\n            case \"spki\":\n                return new Uint8Array(key.data).buffer;\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk', 'pkcs8' or 'spki'\");\n        }\n    }\n    static async importKey(format, keyData, algorithm, extractable, keyUsages) {\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                {\n                    const jwk = keyData;\n                    if (jwk.d) {\n                        const asnKey = jsonSchema.JsonParser.fromJSON(keyData, {\n                            targetSchema: core__namespace.asn1.RsaPrivateKey\n                        });\n                        return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\n                    } else {\n                        const asnKey = jsonSchema.JsonParser.fromJSON(keyData, {\n                            targetSchema: core__namespace.asn1.RsaPublicKey\n                        });\n                        return this.importPublicKey(asnKey, algorithm, extractable, keyUsages);\n                    }\n                }\n            case \"spki\":\n                {\n                    const keyInfo = asn1Schema.AsnParser.parse(new Uint8Array(keyData), core__namespace.asn1.PublicKeyInfo);\n                    const asnKey = asn1Schema.AsnParser.parse(keyInfo.publicKey, core__namespace.asn1.RsaPublicKey);\n                    return this.importPublicKey(asnKey, algorithm, extractable, keyUsages);\n                }\n            case \"pkcs8\":\n                {\n                    const keyInfo = asn1Schema.AsnParser.parse(new Uint8Array(keyData), core__namespace.asn1.PrivateKeyInfo);\n                    const asnKey = asn1Schema.AsnParser.parse(keyInfo.privateKey, core__namespace.asn1.RsaPrivateKey);\n                    return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\n                }\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk', 'pkcs8' or 'spki'\");\n        }\n    }\n    static async sign(algorithm, key, data) {\n        switch(algorithm.name.toUpperCase()){\n            case \"RSA-PSS\":\n            case \"RSASSA-PKCS1-V1_5\":\n                return this.signRsa(algorithm, key, data);\n            default:\n                throw new core__namespace.OperationError(\"algorithm: Is not recognized\");\n        }\n    }\n    static async verify(algorithm, key, signature, data) {\n        switch(algorithm.name.toUpperCase()){\n            case \"RSA-PSS\":\n            case \"RSASSA-PKCS1-V1_5\":\n                return this.verifySSA(algorithm, key, data, signature);\n            default:\n                throw new core__namespace.OperationError(\"algorithm: Is not recognized\");\n        }\n    }\n    static async encrypt(algorithm, key, data) {\n        switch(algorithm.name.toUpperCase()){\n            case \"RSA-OAEP\":\n                return this.encryptOAEP(algorithm, key, data);\n            default:\n                throw new core__namespace.OperationError(\"algorithm: Is not recognized\");\n        }\n    }\n    static async decrypt(algorithm, key, data) {\n        switch(algorithm.name.toUpperCase()){\n            case \"RSA-OAEP\":\n                return this.decryptOAEP(algorithm, key, data);\n            default:\n                throw new core__namespace.OperationError(\"algorithm: Is not recognized\");\n        }\n    }\n    static importPrivateKey(asnKey, algorithm, extractable, keyUsages) {\n        const keyInfo = new core__namespace.asn1.PrivateKeyInfo();\n        keyInfo.privateKeyAlgorithm.algorithm = \"1.2.840.113549.1.1.1\";\n        keyInfo.privateKeyAlgorithm.parameters = null;\n        keyInfo.privateKey = asn1Schema.AsnSerializer.serialize(asnKey);\n        const key = new RsaPrivateKey();\n        key.data = Buffer.from(asn1Schema.AsnSerializer.serialize(keyInfo));\n        key.algorithm = Object.assign({}, algorithm);\n        key.algorithm.publicExponent = new Uint8Array(asnKey.publicExponent);\n        key.algorithm.modulusLength = asnKey.modulus.byteLength << 3;\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return key;\n    }\n    static importPublicKey(asnKey, algorithm, extractable, keyUsages) {\n        const keyInfo = new core__namespace.asn1.PublicKeyInfo();\n        keyInfo.publicKeyAlgorithm.algorithm = \"1.2.840.113549.1.1.1\";\n        keyInfo.publicKeyAlgorithm.parameters = null;\n        keyInfo.publicKey = asn1Schema.AsnSerializer.serialize(asnKey);\n        const key = new RsaPublicKey();\n        key.data = Buffer.from(asn1Schema.AsnSerializer.serialize(keyInfo));\n        key.algorithm = Object.assign({}, algorithm);\n        key.algorithm.publicExponent = new Uint8Array(asnKey.publicExponent);\n        key.algorithm.modulusLength = asnKey.modulus.byteLength << 3;\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return key;\n    }\n    static getCryptoAlgorithm(alg) {\n        switch(alg.hash.name.toUpperCase()){\n            case \"SHA-1\":\n                return \"RSA-SHA1\";\n            case \"SHA-256\":\n                return \"RSA-SHA256\";\n            case \"SHA-384\":\n                return \"RSA-SHA384\";\n            case \"SHA-512\":\n                return \"RSA-SHA512\";\n            case \"SHA3-256\":\n                return \"RSA-SHA3-256\";\n            case \"SHA3-384\":\n                return \"RSA-SHA3-384\";\n            case \"SHA3-512\":\n                return \"RSA-SHA3-512\";\n            default:\n                throw new core__namespace.OperationError(\"algorithm.hash: Is not recognized\");\n        }\n    }\n    static signRsa(algorithm, key, data) {\n        const cryptoAlg = this.getCryptoAlgorithm(key.algorithm);\n        const signer = crypto.createSign(cryptoAlg);\n        signer.update(Buffer.from(data));\n        if (!key.pem) {\n            key.pem = `-----BEGIN PRIVATE KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PRIVATE KEY-----`;\n        }\n        const options = {\n            key: key.pem\n        };\n        if (algorithm.name.toUpperCase() === \"RSA-PSS\") {\n            options.padding = crypto.constants.RSA_PKCS1_PSS_PADDING;\n            options.saltLength = algorithm.saltLength;\n        }\n        const signature = signer.sign(options);\n        return new Uint8Array(signature).buffer;\n    }\n    static verifySSA(algorithm, key, data, signature) {\n        const cryptoAlg = this.getCryptoAlgorithm(key.algorithm);\n        const signer = crypto.createVerify(cryptoAlg);\n        signer.update(Buffer.from(data));\n        if (!key.pem) {\n            key.pem = `-----BEGIN PUBLIC KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PUBLIC KEY-----`;\n        }\n        const options = {\n            key: key.pem\n        };\n        if (algorithm.name.toUpperCase() === \"RSA-PSS\") {\n            options.padding = crypto.constants.RSA_PKCS1_PSS_PADDING;\n            options.saltLength = algorithm.saltLength;\n        }\n        const ok = signer.verify(options, signature);\n        return ok;\n    }\n    static encryptOAEP(algorithm, key, data) {\n        const options = {\n            key: `-----BEGIN PUBLIC KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PUBLIC KEY-----`,\n            padding: crypto.constants.RSA_PKCS1_OAEP_PADDING\n        };\n        if (algorithm.label) ;\n        return new Uint8Array(crypto.publicEncrypt(options, data)).buffer;\n    }\n    static decryptOAEP(algorithm, key, data) {\n        const options = {\n            key: `-----BEGIN PRIVATE KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PRIVATE KEY-----`,\n            padding: crypto.constants.RSA_PKCS1_OAEP_PADDING\n        };\n        if (algorithm.label) ;\n        return new Uint8Array(crypto.privateDecrypt(options, data)).buffer;\n    }\n}\nRsaCrypto.publicKeyUsages = [\n    \"verify\",\n    \"encrypt\",\n    \"wrapKey\"\n];\nRsaCrypto.privateKeyUsages = [\n    \"sign\",\n    \"decrypt\",\n    \"unwrapKey\"\n];\nclass RsaSsaProvider extends core__namespace.RsaSsaProvider {\n    constructor(){\n        super(...arguments);\n        this.hashAlgorithms = [\n            \"SHA-1\",\n            \"SHA-256\",\n            \"SHA-384\",\n            \"SHA-512\",\n            \"shake128\",\n            \"shake256\",\n            \"SHA3-256\",\n            \"SHA3-384\",\n            \"SHA3-512\"\n        ];\n    }\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const keys = await RsaCrypto.generateKey({\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return {\n            privateKey: setCryptoKey(keys.privateKey),\n            publicKey: setCryptoKey(keys.publicKey)\n        };\n    }\n    async onSign(algorithm, key, data) {\n        return RsaCrypto.sign(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onVerify(algorithm, key, signature, data) {\n        return RsaCrypto.verify(algorithm, getCryptoKey(key), new Uint8Array(signature), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return RsaCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await RsaCrypto.importKey(format, keyData, {\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        const internalKey = getCryptoKey(key);\n        if (!(internalKey instanceof RsaPrivateKey || internalKey instanceof RsaPublicKey)) {\n            throw new TypeError(\"key: Is not RSA CryptoKey\");\n        }\n    }\n}\nclass RsaPssProvider extends core__namespace.RsaPssProvider {\n    constructor(){\n        super(...arguments);\n        this.hashAlgorithms = [\n            \"SHA-1\",\n            \"SHA-256\",\n            \"SHA-384\",\n            \"SHA-512\",\n            \"shake128\",\n            \"shake256\",\n            \"SHA3-256\",\n            \"SHA3-384\",\n            \"SHA3-512\"\n        ];\n    }\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const keys = await RsaCrypto.generateKey({\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return {\n            privateKey: setCryptoKey(keys.privateKey),\n            publicKey: setCryptoKey(keys.publicKey)\n        };\n    }\n    async onSign(algorithm, key, data) {\n        return RsaCrypto.sign(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onVerify(algorithm, key, signature, data) {\n        return RsaCrypto.verify(algorithm, getCryptoKey(key), new Uint8Array(signature), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return RsaCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await RsaCrypto.importKey(format, keyData, {\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        const internalKey = getCryptoKey(key);\n        if (!(internalKey instanceof RsaPrivateKey || internalKey instanceof RsaPublicKey)) {\n            throw new TypeError(\"key: Is not RSA CryptoKey\");\n        }\n    }\n}\nclass ShaCrypto {\n    static size(algorithm) {\n        switch(algorithm.name.toUpperCase()){\n            case \"SHA-1\":\n                return 160;\n            case \"SHA-256\":\n            case \"SHA3-256\":\n                return 256;\n            case \"SHA-384\":\n            case \"SHA3-384\":\n                return 384;\n            case \"SHA-512\":\n            case \"SHA3-512\":\n                return 512;\n            default:\n                throw new Error(\"Unrecognized name\");\n        }\n    }\n    static getAlgorithmName(algorithm) {\n        switch(algorithm.name.toUpperCase()){\n            case \"SHA-1\":\n                return \"sha1\";\n            case \"SHA-256\":\n                return \"sha256\";\n            case \"SHA-384\":\n                return \"sha384\";\n            case \"SHA-512\":\n                return \"sha512\";\n            case \"SHA3-256\":\n                return \"sha3-256\";\n            case \"SHA3-384\":\n                return \"sha3-384\";\n            case \"SHA3-512\":\n                return \"sha3-512\";\n            default:\n                throw new Error(\"Unrecognized name\");\n        }\n    }\n    static digest(algorithm, data) {\n        const hashAlg = this.getAlgorithmName(algorithm);\n        const hash = crypto.createHash(hashAlg).update(Buffer.from(data)).digest();\n        return new Uint8Array(hash).buffer;\n    }\n}\nclass RsaOaepProvider extends core__namespace.RsaOaepProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const keys = await RsaCrypto.generateKey({\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return {\n            privateKey: setCryptoKey(keys.privateKey),\n            publicKey: setCryptoKey(keys.publicKey)\n        };\n    }\n    async onEncrypt(algorithm, key, data) {\n        const internalKey = getCryptoKey(key);\n        const dataView = new Uint8Array(data);\n        const keySize = Math.ceil(internalKey.algorithm.modulusLength >> 3);\n        const hashSize = ShaCrypto.size(internalKey.algorithm.hash) >> 3;\n        const dataLength = dataView.byteLength;\n        const psLength = keySize - dataLength - 2 * hashSize - 2;\n        if (dataLength > keySize - 2 * hashSize - 2) {\n            throw new Error(\"Data too large\");\n        }\n        const message = new Uint8Array(keySize);\n        const seed = message.subarray(1, hashSize + 1);\n        const dataBlock = message.subarray(hashSize + 1);\n        dataBlock.set(dataView, hashSize + psLength + 1);\n        const labelHash = crypto.createHash(internalKey.algorithm.hash.name.replace(\"-\", \"\")).update(core__namespace.BufferSourceConverter.toUint8Array(algorithm.label || new Uint8Array(0))).digest();\n        dataBlock.set(labelHash, 0);\n        dataBlock[hashSize + psLength] = 1;\n        crypto.randomFillSync(seed);\n        const dataBlockMask = this.mgf1(internalKey.algorithm.hash, seed, dataBlock.length);\n        for(let i = 0; i < dataBlock.length; i++){\n            dataBlock[i] ^= dataBlockMask[i];\n        }\n        const seedMask = this.mgf1(internalKey.algorithm.hash, dataBlock, seed.length);\n        for(let i = 0; i < seed.length; i++){\n            seed[i] ^= seedMask[i];\n        }\n        if (!internalKey.pem) {\n            internalKey.pem = `-----BEGIN PUBLIC KEY-----\\n${internalKey.data.toString(\"base64\")}\\n-----END PUBLIC KEY-----`;\n        }\n        const pkcs0 = crypto.publicEncrypt({\n            key: internalKey.pem,\n            padding: crypto.constants.RSA_NO_PADDING\n        }, Buffer.from(message));\n        return new Uint8Array(pkcs0).buffer;\n    }\n    async onDecrypt(algorithm, key, data) {\n        const internalKey = getCryptoKey(key);\n        const keySize = Math.ceil(internalKey.algorithm.modulusLength >> 3);\n        const hashSize = ShaCrypto.size(internalKey.algorithm.hash) >> 3;\n        const dataLength = data.byteLength;\n        if (dataLength !== keySize) {\n            throw new Error(\"Bad data\");\n        }\n        if (!internalKey.pem) {\n            internalKey.pem = `-----BEGIN PRIVATE KEY-----\\n${internalKey.data.toString(\"base64\")}\\n-----END PRIVATE KEY-----`;\n        }\n        let pkcs0 = crypto.privateDecrypt({\n            key: internalKey.pem,\n            padding: crypto.constants.RSA_NO_PADDING\n        }, Buffer.from(data));\n        const z = pkcs0[0];\n        const seed = pkcs0.subarray(1, hashSize + 1);\n        const dataBlock = pkcs0.subarray(hashSize + 1);\n        if (z !== 0) {\n            throw new Error(\"Decryption failed\");\n        }\n        const seedMask = this.mgf1(internalKey.algorithm.hash, dataBlock, seed.length);\n        for(let i = 0; i < seed.length; i++){\n            seed[i] ^= seedMask[i];\n        }\n        const dataBlockMask = this.mgf1(internalKey.algorithm.hash, seed, dataBlock.length);\n        for(let i = 0; i < dataBlock.length; i++){\n            dataBlock[i] ^= dataBlockMask[i];\n        }\n        const labelHash = crypto.createHash(internalKey.algorithm.hash.name.replace(\"-\", \"\")).update(core__namespace.BufferSourceConverter.toUint8Array(algorithm.label || new Uint8Array(0))).digest();\n        for(let i = 0; i < hashSize; i++){\n            if (labelHash[i] !== dataBlock[i]) {\n                throw new Error(\"Decryption failed\");\n            }\n        }\n        let psEnd = hashSize;\n        for(; psEnd < dataBlock.length; psEnd++){\n            const psz = dataBlock[psEnd];\n            if (psz === 1) {\n                break;\n            }\n            if (psz !== 0) {\n                throw new Error(\"Decryption failed\");\n            }\n        }\n        if (psEnd === dataBlock.length) {\n            throw new Error(\"Decryption failed\");\n        }\n        pkcs0 = dataBlock.subarray(psEnd + 1);\n        return new Uint8Array(pkcs0).buffer;\n    }\n    async onExportKey(format, key) {\n        return RsaCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await RsaCrypto.importKey(format, keyData, {\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        const internalKey = getCryptoKey(key);\n        if (!(internalKey instanceof RsaPrivateKey || internalKey instanceof RsaPublicKey)) {\n            throw new TypeError(\"key: Is not RSA CryptoKey\");\n        }\n    }\n    mgf1(algorithm, seed, length = 0) {\n        const hashSize = ShaCrypto.size(algorithm) >> 3;\n        const mask = new Uint8Array(length);\n        const counter = new Uint8Array(4);\n        const chunks = Math.ceil(length / hashSize);\n        for(let i = 0; i < chunks; i++){\n            counter[0] = i >>> 24;\n            counter[1] = i >>> 16 & 255;\n            counter[2] = i >>> 8 & 255;\n            counter[3] = i & 255;\n            const submask = mask.subarray(i * hashSize);\n            let chunk = crypto.createHash(algorithm.name.replace(\"-\", \"\")).update(seed).update(counter).digest();\n            if (chunk.length > submask.length) {\n                chunk = chunk.subarray(0, submask.length);\n            }\n            submask.set(chunk);\n        }\n        return mask;\n    }\n}\nclass RsaEsProvider extends core__namespace.ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = \"RSAES-PKCS1-v1_5\";\n        this.usages = {\n            publicKey: [\n                \"encrypt\",\n                \"wrapKey\"\n            ],\n            privateKey: [\n                \"decrypt\",\n                \"unwrapKey\"\n            ]\n        };\n    }\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const keys = await RsaCrypto.generateKey({\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return {\n            privateKey: setCryptoKey(keys.privateKey),\n            publicKey: setCryptoKey(keys.publicKey)\n        };\n    }\n    checkGenerateKeyParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"publicExponent\");\n        if (!(algorithm.publicExponent && algorithm.publicExponent instanceof Uint8Array)) {\n            throw new TypeError(\"publicExponent: Missing or not a Uint8Array\");\n        }\n        const publicExponent = pvtsutils.Convert.ToBase64(algorithm.publicExponent);\n        if (!(publicExponent === \"Aw==\" || publicExponent === \"AQAB\")) {\n            throw new TypeError(\"publicExponent: Must be [3] or [1,0,1]\");\n        }\n        this.checkRequiredProperty(algorithm, \"modulusLength\");\n        switch(algorithm.modulusLength){\n            case 1024:\n            case 2048:\n            case 4096:\n                break;\n            default:\n                throw new TypeError(\"modulusLength: Must be 1024, 2048, or 4096\");\n        }\n    }\n    async onEncrypt(algorithm, key, data) {\n        const options = this.toCryptoOptions(key);\n        const enc = crypto__namespace.publicEncrypt(options, new Uint8Array(data));\n        return new Uint8Array(enc).buffer;\n    }\n    async onDecrypt(algorithm, key, data) {\n        const options = this.toCryptoOptions(key);\n        const dec = crypto__namespace.privateDecrypt(options, new Uint8Array(data));\n        return new Uint8Array(dec).buffer;\n    }\n    async onExportKey(format, key) {\n        return RsaCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await RsaCrypto.importKey(format, keyData, {\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        const internalKey = getCryptoKey(key);\n        if (!(internalKey instanceof RsaPrivateKey || internalKey instanceof RsaPublicKey)) {\n            throw new TypeError(\"key: Is not RSA CryptoKey\");\n        }\n    }\n    toCryptoOptions(key) {\n        const type = key.type.toUpperCase();\n        return {\n            key: `-----BEGIN ${type} KEY-----\\n${getCryptoKey(key).data.toString(\"base64\")}\\n-----END ${type} KEY-----`,\n            padding: crypto__namespace.constants.RSA_PKCS1_PADDING\n        };\n    }\n}\nconst namedOIDs = {\n    \"1.2.840.10045.3.1.7\": \"P-256\",\n    \"P-256\": \"1.2.840.10045.3.1.7\",\n    \"1.3.132.0.34\": \"P-384\",\n    \"P-384\": \"1.3.132.0.34\",\n    \"1.3.132.0.35\": \"P-521\",\n    \"P-521\": \"1.3.132.0.35\",\n    \"1.3.132.0.10\": \"K-256\",\n    \"K-256\": \"1.3.132.0.10\",\n    \"brainpoolP160r1\": \"1.3.36.3.3.2.8.1.1.1\",\n    \"1.3.36.3.3.2.8.1.1.1\": \"brainpoolP160r1\",\n    \"brainpoolP160t1\": \"1.3.36.3.3.2.8.1.1.2\",\n    \"1.3.36.3.3.2.8.1.1.2\": \"brainpoolP160t1\",\n    \"brainpoolP192r1\": \"1.3.36.3.3.2.8.1.1.3\",\n    \"1.3.36.3.3.2.8.1.1.3\": \"brainpoolP192r1\",\n    \"brainpoolP192t1\": \"1.3.36.3.3.2.8.1.1.4\",\n    \"1.3.36.3.3.2.8.1.1.4\": \"brainpoolP192t1\",\n    \"brainpoolP224r1\": \"1.3.36.3.3.2.8.1.1.5\",\n    \"1.3.36.3.3.2.8.1.1.5\": \"brainpoolP224r1\",\n    \"brainpoolP224t1\": \"1.3.36.3.3.2.8.1.1.6\",\n    \"1.3.36.3.3.2.8.1.1.6\": \"brainpoolP224t1\",\n    \"brainpoolP256r1\": \"1.3.36.3.3.2.8.1.1.7\",\n    \"1.3.36.3.3.2.8.1.1.7\": \"brainpoolP256r1\",\n    \"brainpoolP256t1\": \"1.3.36.3.3.2.8.1.1.8\",\n    \"1.3.36.3.3.2.8.1.1.8\": \"brainpoolP256t1\",\n    \"brainpoolP320r1\": \"1.3.36.3.3.2.8.1.1.9\",\n    \"1.3.36.3.3.2.8.1.1.9\": \"brainpoolP320r1\",\n    \"brainpoolP320t1\": \"1.3.36.3.3.2.8.1.1.10\",\n    \"1.3.36.3.3.2.8.1.1.10\": \"brainpoolP320t1\",\n    \"brainpoolP384r1\": \"1.3.36.3.3.2.8.1.1.11\",\n    \"1.3.36.3.3.2.8.1.1.11\": \"brainpoolP384r1\",\n    \"brainpoolP384t1\": \"1.3.36.3.3.2.8.1.1.12\",\n    \"1.3.36.3.3.2.8.1.1.12\": \"brainpoolP384t1\",\n    \"brainpoolP512r1\": \"1.3.36.3.3.2.8.1.1.13\",\n    \"1.3.36.3.3.2.8.1.1.13\": \"brainpoolP512r1\",\n    \"brainpoolP512t1\": \"1.3.36.3.3.2.8.1.1.14\",\n    \"1.3.36.3.3.2.8.1.1.14\": \"brainpoolP512t1\"\n};\nfunction getOidByNamedCurve$1(namedCurve) {\n    const oid = namedOIDs[namedCurve];\n    if (!oid) {\n        throw new core__namespace.OperationError(`Cannot convert WebCrypto named curve '${namedCurve}' to OID`);\n    }\n    return oid;\n}\nclass EcPrivateKey extends AsymmetricKey {\n    constructor(){\n        super(...arguments);\n        this.type = \"private\";\n    }\n    getKey() {\n        const keyInfo = asn1Schema.AsnParser.parse(this.data, core__namespace.asn1.PrivateKeyInfo);\n        return asn1Schema.AsnParser.parse(keyInfo.privateKey, core__namespace.asn1.EcPrivateKey);\n    }\n    toJSON() {\n        const key = this.getKey();\n        const json = {\n            kty: \"EC\",\n            crv: this.algorithm.namedCurve,\n            key_ops: this.usages,\n            ext: this.extractable\n        };\n        return Object.assign(json, jsonSchema.JsonSerializer.toJSON(key));\n    }\n    fromJSON(json) {\n        if (!json.crv) {\n            throw new core__namespace.OperationError(`Cannot get named curve from JWK. Property 'crv' is required`);\n        }\n        const keyInfo = new core__namespace.asn1.PrivateKeyInfo();\n        keyInfo.privateKeyAlgorithm.algorithm = \"1.2.840.10045.2.1\";\n        keyInfo.privateKeyAlgorithm.parameters = asn1Schema.AsnSerializer.serialize(new core__namespace.asn1.ObjectIdentifier(getOidByNamedCurve$1(json.crv)));\n        const key = jsonSchema.JsonParser.fromJSON(json, {\n            targetSchema: core__namespace.asn1.EcPrivateKey\n        });\n        keyInfo.privateKey = asn1Schema.AsnSerializer.serialize(key);\n        this.data = Buffer.from(asn1Schema.AsnSerializer.serialize(keyInfo));\n        return this;\n    }\n}\nclass EcPublicKey extends AsymmetricKey {\n    constructor(){\n        super(...arguments);\n        this.type = \"public\";\n    }\n    getKey() {\n        const keyInfo = asn1Schema.AsnParser.parse(this.data, core__namespace.asn1.PublicKeyInfo);\n        return new core__namespace.asn1.EcPublicKey(keyInfo.publicKey);\n    }\n    toJSON() {\n        const key = this.getKey();\n        const json = {\n            kty: \"EC\",\n            crv: this.algorithm.namedCurve,\n            key_ops: this.usages,\n            ext: this.extractable\n        };\n        return Object.assign(json, jsonSchema.JsonSerializer.toJSON(key));\n    }\n    fromJSON(json) {\n        if (!json.crv) {\n            throw new core__namespace.OperationError(`Cannot get named curve from JWK. Property 'crv' is required`);\n        }\n        const key = jsonSchema.JsonParser.fromJSON(json, {\n            targetSchema: core__namespace.asn1.EcPublicKey\n        });\n        const keyInfo = new core__namespace.asn1.PublicKeyInfo();\n        keyInfo.publicKeyAlgorithm.algorithm = \"1.2.840.10045.2.1\";\n        keyInfo.publicKeyAlgorithm.parameters = asn1Schema.AsnSerializer.serialize(new core__namespace.asn1.ObjectIdentifier(getOidByNamedCurve$1(json.crv)));\n        keyInfo.publicKey = asn1Schema.AsnSerializer.toASN(key).valueHex;\n        this.data = Buffer.from(asn1Schema.AsnSerializer.serialize(keyInfo));\n        return this;\n    }\n}\nclass Sha1Provider extends core__namespace.ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = \"SHA-1\";\n        this.usages = [];\n    }\n    async onDigest(algorithm, data) {\n        return ShaCrypto.digest(algorithm, data);\n    }\n}\nclass Sha256Provider extends core__namespace.ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = \"SHA-256\";\n        this.usages = [];\n    }\n    async onDigest(algorithm, data) {\n        return ShaCrypto.digest(algorithm, data);\n    }\n}\nclass Sha384Provider extends core__namespace.ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = \"SHA-384\";\n        this.usages = [];\n    }\n    async onDigest(algorithm, data) {\n        return ShaCrypto.digest(algorithm, data);\n    }\n}\nclass Sha512Provider extends core__namespace.ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = \"SHA-512\";\n        this.usages = [];\n    }\n    async onDigest(algorithm, data) {\n        return ShaCrypto.digest(algorithm, data);\n    }\n}\nclass Sha3256Provider extends core__namespace.ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = \"SHA3-256\";\n        this.usages = [];\n    }\n    async onDigest(algorithm, data) {\n        return ShaCrypto.digest(algorithm, data);\n    }\n}\nclass Sha3384Provider extends core__namespace.ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = \"SHA3-384\";\n        this.usages = [];\n    }\n    async onDigest(algorithm, data) {\n        return ShaCrypto.digest(algorithm, data);\n    }\n}\nclass Sha3512Provider extends core__namespace.ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = \"SHA3-512\";\n        this.usages = [];\n    }\n    async onDigest(algorithm, data) {\n        return ShaCrypto.digest(algorithm, data);\n    }\n}\nclass EcCrypto {\n    static async generateKey(algorithm, extractable, keyUsages) {\n        const privateKey = new EcPrivateKey();\n        privateKey.algorithm = algorithm;\n        privateKey.extractable = extractable;\n        privateKey.usages = keyUsages.filter((usage)=>this.privateKeyUsages.indexOf(usage) !== -1);\n        const publicKey = new EcPublicKey();\n        publicKey.algorithm = algorithm;\n        publicKey.extractable = true;\n        publicKey.usages = keyUsages.filter((usage)=>this.publicKeyUsages.indexOf(usage) !== -1);\n        const keys = crypto.generateKeyPairSync(\"ec\", {\n            namedCurve: this.getOpenSSLNamedCurve(algorithm.namedCurve),\n            publicKeyEncoding: {\n                format: \"der\",\n                type: \"spki\"\n            },\n            privateKeyEncoding: {\n                format: \"der\",\n                type: \"pkcs8\"\n            }\n        });\n        privateKey.data = keys.privateKey;\n        publicKey.data = keys.publicKey;\n        const res = {\n            privateKey,\n            publicKey\n        };\n        return res;\n    }\n    static async sign(algorithm, key, data) {\n        const cryptoAlg = ShaCrypto.getAlgorithmName(algorithm.hash);\n        const signer = crypto.createSign(cryptoAlg);\n        signer.update(Buffer.from(data));\n        if (!key.pem) {\n            key.pem = `-----BEGIN PRIVATE KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PRIVATE KEY-----`;\n        }\n        const options = {\n            key: key.pem\n        };\n        const signature = signer.sign(options);\n        const ecSignature = asn1Schema.AsnParser.parse(signature, core__namespace.asn1.EcDsaSignature);\n        const signatureRaw = core__namespace.EcUtils.encodeSignature(ecSignature, core__namespace.EcCurves.get(key.algorithm.namedCurve).size);\n        return signatureRaw.buffer;\n    }\n    static async verify(algorithm, key, signature, data) {\n        const cryptoAlg = ShaCrypto.getAlgorithmName(algorithm.hash);\n        const signer = crypto.createVerify(cryptoAlg);\n        signer.update(Buffer.from(data));\n        if (!key.pem) {\n            key.pem = `-----BEGIN PUBLIC KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PUBLIC KEY-----`;\n        }\n        const options = {\n            key: key.pem\n        };\n        const ecSignature = new core__namespace.asn1.EcDsaSignature();\n        const namedCurve = core__namespace.EcCurves.get(key.algorithm.namedCurve);\n        const signaturePoint = core__namespace.EcUtils.decodeSignature(signature, namedCurve.size);\n        ecSignature.r = pvtsutils.BufferSourceConverter.toArrayBuffer(signaturePoint.r);\n        ecSignature.s = pvtsutils.BufferSourceConverter.toArrayBuffer(signaturePoint.s);\n        const ecSignatureRaw = Buffer.from(asn1Schema.AsnSerializer.serialize(ecSignature));\n        const ok = signer.verify(options, ecSignatureRaw);\n        return ok;\n    }\n    static async deriveBits(algorithm, baseKey, length) {\n        const cryptoAlg = this.getOpenSSLNamedCurve(baseKey.algorithm.namedCurve);\n        const ecdh = crypto.createECDH(cryptoAlg);\n        const asnPrivateKey = asn1Schema.AsnParser.parse(baseKey.data, core__namespace.asn1.PrivateKeyInfo);\n        const asnEcPrivateKey = asn1Schema.AsnParser.parse(asnPrivateKey.privateKey, core__namespace.asn1.EcPrivateKey);\n        ecdh.setPrivateKey(Buffer.from(asnEcPrivateKey.privateKey));\n        const asnPublicKey = asn1Schema.AsnParser.parse(algorithm.public.data, core__namespace.asn1.PublicKeyInfo);\n        const bits = ecdh.computeSecret(Buffer.from(asnPublicKey.publicKey));\n        if (length === null) {\n            return bits;\n        }\n        return new Uint8Array(bits).buffer.slice(0, length >> 3);\n    }\n    static async exportKey(format, key) {\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                return jsonSchema.JsonSerializer.toJSON(key);\n            case \"pkcs8\":\n            case \"spki\":\n                return new Uint8Array(key.data).buffer;\n            case \"raw\":\n                {\n                    const publicKeyInfo = asn1Schema.AsnParser.parse(key.data, core__namespace.asn1.PublicKeyInfo);\n                    return publicKeyInfo.publicKey;\n                }\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk', 'raw', pkcs8' or 'spki'\");\n        }\n    }\n    static async importKey(format, keyData, algorithm, extractable, keyUsages) {\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                {\n                    const jwk = keyData;\n                    if (jwk.d) {\n                        const asnKey = jsonSchema.JsonParser.fromJSON(keyData, {\n                            targetSchema: core__namespace.asn1.EcPrivateKey\n                        });\n                        return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\n                    } else {\n                        const asnKey = jsonSchema.JsonParser.fromJSON(keyData, {\n                            targetSchema: core__namespace.asn1.EcPublicKey\n                        });\n                        return this.importPublicKey(asnKey, algorithm, extractable, keyUsages);\n                    }\n                }\n            case \"raw\":\n                {\n                    const asnKey = new core__namespace.asn1.EcPublicKey(keyData);\n                    return this.importPublicKey(asnKey, algorithm, extractable, keyUsages);\n                }\n            case \"spki\":\n                {\n                    const keyInfo = asn1Schema.AsnParser.parse(new Uint8Array(keyData), core__namespace.asn1.PublicKeyInfo);\n                    const asnKey = new core__namespace.asn1.EcPublicKey(keyInfo.publicKey);\n                    this.assertKeyParameters(keyInfo.publicKeyAlgorithm.parameters, algorithm.namedCurve);\n                    return this.importPublicKey(asnKey, algorithm, extractable, keyUsages);\n                }\n            case \"pkcs8\":\n                {\n                    const keyInfo = asn1Schema.AsnParser.parse(new Uint8Array(keyData), core__namespace.asn1.PrivateKeyInfo);\n                    const asnKey = asn1Schema.AsnParser.parse(keyInfo.privateKey, core__namespace.asn1.EcPrivateKey);\n                    this.assertKeyParameters(keyInfo.privateKeyAlgorithm.parameters, algorithm.namedCurve);\n                    return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\n                }\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk', 'raw', 'pkcs8' or 'spki'\");\n        }\n    }\n    static assertKeyParameters(parameters, namedCurve) {\n        if (!parameters) {\n            throw new core__namespace.CryptoError(\"Key info doesn't have required parameters\");\n        }\n        let namedCurveIdentifier = \"\";\n        try {\n            namedCurveIdentifier = asn1Schema.AsnParser.parse(parameters, core__namespace.asn1.ObjectIdentifier).value;\n        } catch (e) {\n            throw new core__namespace.CryptoError(\"Cannot read key info parameters\");\n        }\n        if (getOidByNamedCurve$1(namedCurve) !== namedCurveIdentifier) {\n            throw new core__namespace.CryptoError(\"Key info parameter doesn't match to named curve\");\n        }\n    }\n    static async importPrivateKey(asnKey, algorithm, extractable, keyUsages) {\n        const keyInfo = new core__namespace.asn1.PrivateKeyInfo();\n        keyInfo.privateKeyAlgorithm.algorithm = \"1.2.840.10045.2.1\";\n        keyInfo.privateKeyAlgorithm.parameters = asn1Schema.AsnSerializer.serialize(new core__namespace.asn1.ObjectIdentifier(getOidByNamedCurve$1(algorithm.namedCurve)));\n        keyInfo.privateKey = asn1Schema.AsnSerializer.serialize(asnKey);\n        const key = new EcPrivateKey();\n        key.data = Buffer.from(asn1Schema.AsnSerializer.serialize(keyInfo));\n        key.algorithm = Object.assign({}, algorithm);\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return key;\n    }\n    static async importPublicKey(asnKey, algorithm, extractable, keyUsages) {\n        const keyInfo = new core__namespace.asn1.PublicKeyInfo();\n        keyInfo.publicKeyAlgorithm.algorithm = \"1.2.840.10045.2.1\";\n        const namedCurve = getOidByNamedCurve$1(algorithm.namedCurve);\n        keyInfo.publicKeyAlgorithm.parameters = asn1Schema.AsnSerializer.serialize(new core__namespace.asn1.ObjectIdentifier(namedCurve));\n        keyInfo.publicKey = asnKey.value;\n        const key = new EcPublicKey();\n        key.data = Buffer.from(asn1Schema.AsnSerializer.serialize(keyInfo));\n        key.algorithm = Object.assign({}, algorithm);\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return key;\n    }\n    static getOpenSSLNamedCurve(curve) {\n        switch(curve.toUpperCase()){\n            case \"P-256\":\n                return \"prime256v1\";\n            case \"K-256\":\n                return \"secp256k1\";\n            case \"P-384\":\n                return \"secp384r1\";\n            case \"P-521\":\n                return \"secp521r1\";\n            default:\n                return curve;\n        }\n    }\n}\nEcCrypto.publicKeyUsages = [\n    \"verify\"\n];\nEcCrypto.privateKeyUsages = [\n    \"sign\",\n    \"deriveKey\",\n    \"deriveBits\"\n];\nclass EcdsaProvider extends core__namespace.EcdsaProvider {\n    constructor(){\n        super(...arguments);\n        this.namedCurves = core__namespace.EcCurves.names;\n        this.hashAlgorithms = [\n            \"SHA-1\",\n            \"SHA-256\",\n            \"SHA-384\",\n            \"SHA-512\",\n            \"shake128\",\n            \"shake256\",\n            \"SHA3-256\",\n            \"SHA3-384\",\n            \"SHA3-512\"\n        ];\n    }\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const keys = await EcCrypto.generateKey({\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return {\n            privateKey: setCryptoKey(keys.privateKey),\n            publicKey: setCryptoKey(keys.publicKey)\n        };\n    }\n    async onSign(algorithm, key, data) {\n        return EcCrypto.sign(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onVerify(algorithm, key, signature, data) {\n        return EcCrypto.verify(algorithm, getCryptoKey(key), new Uint8Array(signature), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return EcCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await EcCrypto.importKey(format, keyData, {\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        const internalKey = getCryptoKey(key);\n        if (!(internalKey instanceof EcPrivateKey || internalKey instanceof EcPublicKey)) {\n            throw new TypeError(\"key: Is not EC CryptoKey\");\n        }\n    }\n}\nclass EcdhProvider extends core__namespace.EcdhProvider {\n    constructor(){\n        super(...arguments);\n        this.namedCurves = core__namespace.EcCurves.names;\n    }\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const keys = await EcCrypto.generateKey({\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return {\n            privateKey: setCryptoKey(keys.privateKey),\n            publicKey: setCryptoKey(keys.publicKey)\n        };\n    }\n    async onExportKey(format, key) {\n        return EcCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await EcCrypto.importKey(format, keyData, {\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        const internalKey = getCryptoKey(key);\n        if (!(internalKey instanceof EcPrivateKey || internalKey instanceof EcPublicKey)) {\n            throw new TypeError(\"key: Is not EC CryptoKey\");\n        }\n    }\n    async onDeriveBits(algorithm, baseKey, length) {\n        const bits = await EcCrypto.deriveBits({\n            ...algorithm,\n            public: getCryptoKey(algorithm.public)\n        }, getCryptoKey(baseKey), length);\n        return bits;\n    }\n}\nconst edOIDs = {\n    [core__namespace.asn1.idEd448]: \"Ed448\",\n    \"ed448\": core__namespace.asn1.idEd448,\n    [core__namespace.asn1.idX448]: \"X448\",\n    \"x448\": core__namespace.asn1.idX448,\n    [core__namespace.asn1.idEd25519]: \"Ed25519\",\n    \"ed25519\": core__namespace.asn1.idEd25519,\n    [core__namespace.asn1.idX25519]: \"X25519\",\n    \"x25519\": core__namespace.asn1.idX25519\n};\nfunction getOidByNamedCurve(namedCurve) {\n    const oid = edOIDs[namedCurve.toLowerCase()];\n    if (!oid) {\n        throw new core__namespace.OperationError(`Cannot convert WebCrypto named curve '${namedCurve}' to OID`);\n    }\n    return oid;\n}\nclass EdPrivateKey extends AsymmetricKey {\n    constructor(){\n        super(...arguments);\n        this.type = \"private\";\n    }\n    getKey() {\n        const keyInfo = asn1Schema.AsnParser.parse(this.data, core__namespace.asn1.PrivateKeyInfo);\n        return asn1Schema.AsnParser.parse(keyInfo.privateKey, core__namespace.asn1.CurvePrivateKey);\n    }\n    toJSON() {\n        const key = this.getKey();\n        const json = {\n            kty: \"OKP\",\n            crv: this.algorithm.namedCurve,\n            key_ops: this.usages,\n            ext: this.extractable\n        };\n        return Object.assign(json, jsonSchema.JsonSerializer.toJSON(key));\n    }\n    fromJSON(json) {\n        if (!json.crv) {\n            throw new core__namespace.OperationError(`Cannot get named curve from JWK. Property 'crv' is required`);\n        }\n        const keyInfo = new core__namespace.asn1.PrivateKeyInfo();\n        keyInfo.privateKeyAlgorithm.algorithm = getOidByNamedCurve(json.crv);\n        const key = jsonSchema.JsonParser.fromJSON(json, {\n            targetSchema: core__namespace.asn1.CurvePrivateKey\n        });\n        keyInfo.privateKey = asn1Schema.AsnSerializer.serialize(key);\n        this.data = Buffer.from(asn1Schema.AsnSerializer.serialize(keyInfo));\n        return this;\n    }\n}\nclass EdPublicKey extends AsymmetricKey {\n    constructor(){\n        super(...arguments);\n        this.type = \"public\";\n    }\n    getKey() {\n        const keyInfo = asn1Schema.AsnParser.parse(this.data, core__namespace.asn1.PublicKeyInfo);\n        return keyInfo.publicKey;\n    }\n    toJSON() {\n        const key = this.getKey();\n        const json = {\n            kty: \"OKP\",\n            crv: this.algorithm.namedCurve,\n            key_ops: this.usages,\n            ext: this.extractable\n        };\n        return Object.assign(json, {\n            x: pvtsutils.Convert.ToBase64Url(key)\n        });\n    }\n    fromJSON(json) {\n        if (!json.crv) {\n            throw new core__namespace.OperationError(`Cannot get named curve from JWK. Property 'crv' is required`);\n        }\n        if (!json.x) {\n            throw new core__namespace.OperationError(`Cannot get property from JWK. Property 'x' is required`);\n        }\n        const keyInfo = new core__namespace.asn1.PublicKeyInfo();\n        keyInfo.publicKeyAlgorithm.algorithm = getOidByNamedCurve(json.crv);\n        keyInfo.publicKey = pvtsutils.Convert.FromBase64Url(json.x);\n        this.data = Buffer.from(asn1Schema.AsnSerializer.serialize(keyInfo));\n        return this;\n    }\n}\nclass EdCrypto {\n    static async generateKey(algorithm, extractable, keyUsages) {\n        const privateKey = new EdPrivateKey();\n        privateKey.algorithm = algorithm;\n        privateKey.extractable = extractable;\n        privateKey.usages = keyUsages.filter((usage)=>this.privateKeyUsages.indexOf(usage) !== -1);\n        const publicKey = new EdPublicKey();\n        publicKey.algorithm = algorithm;\n        publicKey.extractable = true;\n        publicKey.usages = keyUsages.filter((usage)=>this.publicKeyUsages.indexOf(usage) !== -1);\n        const type = algorithm.namedCurve.toLowerCase();\n        const keys = crypto.generateKeyPairSync(type, {\n            publicKeyEncoding: {\n                format: \"der\",\n                type: \"spki\"\n            },\n            privateKeyEncoding: {\n                format: \"der\",\n                type: \"pkcs8\"\n            }\n        });\n        privateKey.data = keys.privateKey;\n        publicKey.data = keys.publicKey;\n        const res = {\n            privateKey,\n            publicKey\n        };\n        return res;\n    }\n    static async sign(algorithm, key, data) {\n        if (!key.pem) {\n            key.pem = `-----BEGIN PRIVATE KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PRIVATE KEY-----`;\n        }\n        const options = {\n            key: key.pem\n        };\n        const signature = crypto.sign(null, Buffer.from(data), options);\n        return core__namespace.BufferSourceConverter.toArrayBuffer(signature);\n    }\n    static async verify(algorithm, key, signature, data) {\n        if (!key.pem) {\n            key.pem = `-----BEGIN PUBLIC KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PUBLIC KEY-----`;\n        }\n        const options = {\n            key: key.pem\n        };\n        const ok = crypto.verify(null, Buffer.from(data), options, Buffer.from(signature));\n        return ok;\n    }\n    static async deriveBits(algorithm, baseKey, length) {\n        const publicKey = crypto.createPublicKey({\n            key: algorithm.public.data,\n            format: \"der\",\n            type: \"spki\"\n        });\n        const privateKey = crypto.createPrivateKey({\n            key: baseKey.data,\n            format: \"der\",\n            type: \"pkcs8\"\n        });\n        const bits = crypto.diffieHellman({\n            publicKey,\n            privateKey\n        });\n        return new Uint8Array(bits).buffer.slice(0, length >> 3);\n    }\n    static async exportKey(format, key) {\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                return jsonSchema.JsonSerializer.toJSON(key);\n            case \"pkcs8\":\n            case \"spki\":\n                return new Uint8Array(key.data).buffer;\n            case \"raw\":\n                {\n                    const publicKeyInfo = asn1Schema.AsnParser.parse(key.data, core__namespace.asn1.PublicKeyInfo);\n                    return publicKeyInfo.publicKey;\n                }\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk', 'raw', pkcs8' or 'spki'\");\n        }\n    }\n    static async importKey(format, keyData, algorithm, extractable, keyUsages) {\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                {\n                    const jwk = keyData;\n                    if (jwk.d) {\n                        const asnKey = jsonSchema.JsonParser.fromJSON(keyData, {\n                            targetSchema: core__namespace.asn1.CurvePrivateKey\n                        });\n                        return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\n                    } else {\n                        if (!jwk.x) {\n                            throw new TypeError(\"keyData: Cannot get required 'x' filed\");\n                        }\n                        return this.importPublicKey(pvtsutils.Convert.FromBase64Url(jwk.x), algorithm, extractable, keyUsages);\n                    }\n                }\n            case \"raw\":\n                {\n                    return this.importPublicKey(keyData, algorithm, extractable, keyUsages);\n                }\n            case \"spki\":\n                {\n                    const keyInfo = asn1Schema.AsnParser.parse(new Uint8Array(keyData), core__namespace.asn1.PublicKeyInfo);\n                    return this.importPublicKey(keyInfo.publicKey, algorithm, extractable, keyUsages);\n                }\n            case \"pkcs8\":\n                {\n                    const keyInfo = asn1Schema.AsnParser.parse(new Uint8Array(keyData), core__namespace.asn1.PrivateKeyInfo);\n                    const asnKey = asn1Schema.AsnParser.parse(keyInfo.privateKey, core__namespace.asn1.CurvePrivateKey);\n                    return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\n                }\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk', 'raw', 'pkcs8' or 'spki'\");\n        }\n    }\n    static importPrivateKey(asnKey, algorithm, extractable, keyUsages) {\n        const key = new EdPrivateKey();\n        key.fromJSON({\n            crv: algorithm.namedCurve,\n            d: pvtsutils.Convert.ToBase64Url(asnKey.d)\n        });\n        key.algorithm = Object.assign({}, algorithm);\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return key;\n    }\n    static async importPublicKey(asnKey, algorithm, extractable, keyUsages) {\n        const key = new EdPublicKey();\n        key.fromJSON({\n            crv: algorithm.namedCurve,\n            x: pvtsutils.Convert.ToBase64Url(asnKey)\n        });\n        key.algorithm = Object.assign({}, algorithm);\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return key;\n    }\n}\nEdCrypto.publicKeyUsages = [\n    \"verify\"\n];\nEdCrypto.privateKeyUsages = [\n    \"sign\",\n    \"deriveKey\",\n    \"deriveBits\"\n];\nclass EdDsaProvider extends core__namespace.EdDsaProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const keys = await EdCrypto.generateKey({\n            name: this.name,\n            namedCurve: algorithm.namedCurve.replace(/^ed/i, \"Ed\")\n        }, extractable, keyUsages);\n        return {\n            privateKey: setCryptoKey(keys.privateKey),\n            publicKey: setCryptoKey(keys.publicKey)\n        };\n    }\n    async onSign(algorithm, key, data) {\n        return EdCrypto.sign(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onVerify(algorithm, key, signature, data) {\n        return EdCrypto.verify(algorithm, getCryptoKey(key), new Uint8Array(signature), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return EdCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await EdCrypto.importKey(format, keyData, {\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n}\nclass EcdhEsProvider extends core__namespace.EcdhEsProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const keys = await EdCrypto.generateKey({\n            name: this.name,\n            namedCurve: algorithm.namedCurve.toUpperCase()\n        }, extractable, keyUsages);\n        return {\n            privateKey: setCryptoKey(keys.privateKey),\n            publicKey: setCryptoKey(keys.publicKey)\n        };\n    }\n    async onDeriveBits(algorithm, baseKey, length) {\n        const bits = await EdCrypto.deriveBits({\n            ...algorithm,\n            public: getCryptoKey(algorithm.public)\n        }, getCryptoKey(baseKey), length);\n        return bits;\n    }\n    async onExportKey(format, key) {\n        return EdCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await EdCrypto.importKey(format, keyData, {\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n}\nclass PbkdfCryptoKey extends CryptoKey {\n}\nclass Pbkdf2Provider extends core__namespace.Pbkdf2Provider {\n    async onDeriveBits(algorithm, baseKey, length) {\n        return new Promise((resolve, reject)=>{\n            const salt = core__namespace.BufferSourceConverter.toArrayBuffer(algorithm.salt);\n            const hash = algorithm.hash.name.replace(\"-\", \"\");\n            crypto.pbkdf2(getCryptoKey(baseKey).data, Buffer.from(salt), algorithm.iterations, length >> 3, hash, (err, derivedBits)=>{\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(new Uint8Array(derivedBits).buffer);\n                }\n            });\n        });\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        if (format === \"raw\") {\n            const key = new PbkdfCryptoKey();\n            key.data = Buffer.from(keyData);\n            key.algorithm = {\n                name: this.name\n            };\n            key.extractable = false;\n            key.usages = keyUsages;\n            return setCryptoKey(key);\n        }\n        throw new core__namespace.OperationError(\"format: Must be 'raw'\");\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof PbkdfCryptoKey)) {\n            throw new TypeError(\"key: Is not PBKDF CryptoKey\");\n        }\n    }\n}\nclass HmacCryptoKey extends CryptoKey {\n    get alg() {\n        const hash = this.algorithm.hash.name.toUpperCase();\n        return `HS${hash.replace(\"SHA-\", \"\")}`;\n    }\n    set alg(value) {}\n}\ntslib.__decorate([\n    jsonSchema.JsonProp({\n        name: \"k\",\n        converter: JsonBase64UrlConverter\n    })\n], HmacCryptoKey.prototype, \"data\", void 0);\nclass HmacProvider extends core__namespace.HmacProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const length = (algorithm.length || this.getDefaultLength(algorithm.hash.name)) >> 3 << 3;\n        const key = new HmacCryptoKey();\n        key.algorithm = {\n            ...algorithm,\n            length,\n            name: this.name\n        };\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        key.data = crypto.randomBytes(length >> 3);\n        return setCryptoKey(key);\n    }\n    async onSign(algorithm, key, data) {\n        const cryptoAlg = ShaCrypto.getAlgorithmName(key.algorithm.hash);\n        const hmac = crypto.createHmac(cryptoAlg, getCryptoKey(key).data).update(Buffer.from(data)).digest();\n        return new Uint8Array(hmac).buffer;\n    }\n    async onVerify(algorithm, key, signature, data) {\n        const cryptoAlg = ShaCrypto.getAlgorithmName(key.algorithm.hash);\n        const hmac = crypto.createHmac(cryptoAlg, getCryptoKey(key).data).update(Buffer.from(data)).digest();\n        return hmac.compare(Buffer.from(signature)) === 0;\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        let key;\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                key = jsonSchema.JsonParser.fromJSON(keyData, {\n                    targetSchema: HmacCryptoKey\n                });\n                break;\n            case \"raw\":\n                key = new HmacCryptoKey();\n                key.data = Buffer.from(keyData);\n                break;\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk' or 'raw'\");\n        }\n        key.algorithm = {\n            hash: {\n                name: algorithm.hash.name\n            },\n            name: this.name,\n            length: key.data.length << 3\n        };\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return setCryptoKey(key);\n    }\n    async onExportKey(format, key) {\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                return jsonSchema.JsonSerializer.toJSON(getCryptoKey(key));\n            case \"raw\":\n                return new Uint8Array(getCryptoKey(key).data).buffer;\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk' or 'raw'\");\n        }\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof HmacCryptoKey)) {\n            throw new TypeError(\"key: Is not HMAC CryptoKey\");\n        }\n    }\n}\nclass HkdfCryptoKey extends CryptoKey {\n}\nclass HkdfProvider extends core__namespace.HkdfProvider {\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        if (format.toLowerCase() !== \"raw\") {\n            throw new core__namespace.OperationError(\"Operation not supported\");\n        }\n        const key = new HkdfCryptoKey();\n        key.data = Buffer.from(keyData);\n        key.algorithm = {\n            name: this.name\n        };\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return setCryptoKey(key);\n    }\n    async onDeriveBits(params, baseKey, length) {\n        const hash = params.hash.name.replace(\"-\", \"\");\n        const hashLength = crypto.createHash(hash).digest().length;\n        const byteLength = length / 8;\n        const info = core.BufferSourceConverter.toUint8Array(params.info);\n        const PRK = crypto.createHmac(hash, core.BufferSourceConverter.toUint8Array(params.salt)).update(core.BufferSourceConverter.toUint8Array(getCryptoKey(baseKey).data)).digest();\n        const blocks = [\n            Buffer.alloc(0)\n        ];\n        const blockCount = Math.ceil(byteLength / hashLength) + 1;\n        for(let i = 1; i < blockCount; ++i){\n            blocks.push(crypto.createHmac(hash, PRK).update(Buffer.concat([\n                blocks[i - 1],\n                info,\n                Buffer.from([\n                    i\n                ])\n            ])).digest());\n        }\n        return Buffer.concat(blocks).slice(0, byteLength);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof HkdfCryptoKey)) {\n            throw new TypeError(\"key: Is not HKDF CryptoKey\");\n        }\n    }\n}\nclass ShakeCrypto {\n    static digest(algorithm, data) {\n        const hash = crypto.createHash(algorithm.name.toLowerCase(), {\n            outputLength: algorithm.length\n        }).update(Buffer.from(data)).digest();\n        return new Uint8Array(hash).buffer;\n    }\n}\nclass Shake128Provider extends core__namespace.Shake128Provider {\n    async onDigest(algorithm, data) {\n        return ShakeCrypto.digest(algorithm, data);\n    }\n}\nclass Shake256Provider extends core__namespace.Shake256Provider {\n    async onDigest(algorithm, data) {\n        return ShakeCrypto.digest(algorithm, data);\n    }\n}\nclass SubtleCrypto extends core__namespace.SubtleCrypto {\n    constructor(){\n        var _a;\n        super();\n        this.providers.set(new AesCbcProvider());\n        this.providers.set(new AesCtrProvider());\n        this.providers.set(new AesGcmProvider());\n        this.providers.set(new AesCmacProvider());\n        this.providers.set(new AesKwProvider());\n        this.providers.set(new AesEcbProvider());\n        this.providers.set(new DesCbcProvider());\n        this.providers.set(new DesEde3CbcProvider());\n        this.providers.set(new RsaSsaProvider());\n        this.providers.set(new RsaPssProvider());\n        this.providers.set(new RsaOaepProvider());\n        this.providers.set(new RsaEsProvider());\n        this.providers.set(new EcdsaProvider());\n        this.providers.set(new EcdhProvider());\n        this.providers.set(new Sha1Provider());\n        this.providers.set(new Sha256Provider());\n        this.providers.set(new Sha384Provider());\n        this.providers.set(new Sha512Provider());\n        this.providers.set(new Pbkdf2Provider());\n        this.providers.set(new HmacProvider());\n        this.providers.set(new HkdfProvider());\n        const nodeMajorVersion = (_a = /^v(\\d+)/.exec(process__namespace.version)) === null || _a === void 0 ? void 0 : _a[1];\n        if (nodeMajorVersion && parseInt(nodeMajorVersion, 10) >= 12) {\n            this.providers.set(new Shake128Provider());\n            this.providers.set(new Shake256Provider());\n        }\n        const hashes = crypto__namespace.getHashes();\n        if (hashes.includes(\"sha3-256\")) {\n            this.providers.set(new Sha3256Provider());\n        }\n        if (hashes.includes(\"sha3-384\")) {\n            this.providers.set(new Sha3384Provider());\n        }\n        if (hashes.includes(\"sha3-512\")) {\n            this.providers.set(new Sha3512Provider());\n        }\n        if (nodeMajorVersion && parseInt(nodeMajorVersion, 10) >= 14) {\n            this.providers.set(new EdDsaProvider());\n            this.providers.set(new EcdhEsProvider());\n        }\n    }\n}\nclass Crypto extends core__namespace.Crypto {\n    constructor(){\n        super(...arguments);\n        this.subtle = new SubtleCrypto();\n    }\n    getRandomValues(array) {\n        if (!ArrayBuffer.isView(array)) {\n            throw new TypeError(\"Failed to execute 'getRandomValues' on 'Crypto': parameter 1 is not of type 'ArrayBufferView'\");\n        }\n        const buffer = Buffer.from(array.buffer, array.byteOffset, array.byteLength);\n        crypto.randomFillSync(buffer);\n        return array;\n    }\n}\nObject.defineProperty(exports, \"CryptoKey\", ({\n    enumerable: true,\n    get: function() {\n        return core.CryptoKey;\n    }\n}));\nexports.Crypto = Crypto;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@peculiar/webcrypto/build/webcrypto.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@peculiar/webcrypto/build/webcrypto.js":
/*!*************************************************************!*\
  !*** ./node_modules/@peculiar/webcrypto/build/webcrypto.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*!\n Copyright (c) Peculiar Ventures, LLC\n*/ \nvar core = __webpack_require__(/*! webcrypto-core */ \"(rsc)/./node_modules/webcrypto-core/build/webcrypto-core.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar process = __webpack_require__(/*! process */ \"process\");\nvar tslib = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nvar jsonSchema = __webpack_require__(/*! @peculiar/json-schema */ \"(rsc)/./node_modules/@peculiar/json-schema/build/index.js\");\nvar pvtsutils = __webpack_require__(/*! pvtsutils */ \"(rsc)/./node_modules/pvtsutils/build/index.js\");\nvar asn1Schema = __webpack_require__(/*! @peculiar/asn1-schema */ \"(rsc)/./node_modules/@peculiar/asn1-schema/build/cjs/index.js\");\nfunction _interopNamespaceDefault(e) {\n    var n = Object.create(null);\n    if (e) {\n        Object.keys(e).forEach(function(k) {\n            if (k !== \"default\") {\n                var d = Object.getOwnPropertyDescriptor(e, k);\n                Object.defineProperty(n, k, d.get ? d : {\n                    enumerable: true,\n                    get: function() {\n                        return e[k];\n                    }\n                });\n            }\n        });\n    }\n    n.default = e;\n    return Object.freeze(n);\n}\nvar core__namespace = /*#__PURE__*/ _interopNamespaceDefault(core);\nvar crypto__namespace = /*#__PURE__*/ _interopNamespaceDefault(crypto);\nvar process__namespace = /*#__PURE__*/ _interopNamespaceDefault(process);\nconst JsonBase64UrlConverter = {\n    fromJSON: (value)=>Buffer.from(pvtsutils.Convert.FromBase64Url(value)),\n    toJSON: (value)=>pvtsutils.Convert.ToBase64Url(value)\n};\nclass CryptoKey extends core__namespace.CryptoKey {\n    constructor(){\n        super(...arguments);\n        this.data = Buffer.alloc(0);\n        this.algorithm = {\n            name: \"\"\n        };\n        this.extractable = false;\n        this.type = \"secret\";\n        this.usages = [];\n        this.kty = \"oct\";\n        this.alg = \"\";\n    }\n}\ntslib.__decorate([\n    jsonSchema.JsonProp({\n        name: \"ext\",\n        type: jsonSchema.JsonPropTypes.Boolean,\n        optional: true\n    })\n], CryptoKey.prototype, \"extractable\", void 0);\ntslib.__decorate([\n    jsonSchema.JsonProp({\n        name: \"key_ops\",\n        type: jsonSchema.JsonPropTypes.String,\n        repeated: true,\n        optional: true\n    })\n], CryptoKey.prototype, \"usages\", void 0);\ntslib.__decorate([\n    jsonSchema.JsonProp({\n        type: jsonSchema.JsonPropTypes.String\n    })\n], CryptoKey.prototype, \"kty\", void 0);\ntslib.__decorate([\n    jsonSchema.JsonProp({\n        type: jsonSchema.JsonPropTypes.String,\n        optional: true\n    })\n], CryptoKey.prototype, \"alg\", void 0);\nclass SymmetricKey extends CryptoKey {\n    constructor(){\n        super(...arguments);\n        this.kty = \"oct\";\n        this.type = \"secret\";\n    }\n}\nclass AsymmetricKey extends CryptoKey {\n}\nclass AesCryptoKey extends SymmetricKey {\n    get alg() {\n        switch(this.algorithm.name.toUpperCase()){\n            case \"AES-CBC\":\n                return `A${this.algorithm.length}CBC`;\n            case \"AES-CTR\":\n                return `A${this.algorithm.length}CTR`;\n            case \"AES-GCM\":\n                return `A${this.algorithm.length}GCM`;\n            case \"AES-KW\":\n                return `A${this.algorithm.length}KW`;\n            case \"AES-CMAC\":\n                return `A${this.algorithm.length}CMAC`;\n            case \"AES-ECB\":\n                return `A${this.algorithm.length}ECB`;\n            default:\n                throw new core__namespace.AlgorithmError(\"Unsupported algorithm name\");\n        }\n    }\n    set alg(value) {}\n}\ntslib.__decorate([\n    jsonSchema.JsonProp({\n        name: \"k\",\n        converter: JsonBase64UrlConverter\n    })\n], AesCryptoKey.prototype, \"data\", void 0);\nconst keyStorage = new WeakMap();\nfunction getCryptoKey(key) {\n    const res = keyStorage.get(key);\n    if (!res) {\n        throw new core__namespace.OperationError(\"Cannot get CryptoKey from secure storage\");\n    }\n    return res;\n}\nfunction setCryptoKey(value) {\n    const key = core__namespace.CryptoKey.create(value.algorithm, value.type, value.extractable, value.usages);\n    Object.freeze(key);\n    keyStorage.set(key, value);\n    return key;\n}\nclass AesCrypto {\n    static async generateKey(algorithm, extractable, keyUsages) {\n        const key = new AesCryptoKey();\n        key.algorithm = algorithm;\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        key.data = crypto.randomBytes(algorithm.length >> 3);\n        return key;\n    }\n    static async exportKey(format, key) {\n        if (!(key instanceof AesCryptoKey)) {\n            throw new Error(\"key: Is not AesCryptoKey\");\n        }\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                return jsonSchema.JsonSerializer.toJSON(key);\n            case \"raw\":\n                return new Uint8Array(key.data).buffer;\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk' or 'raw'\");\n        }\n    }\n    static async importKey(format, keyData, algorithm, extractable, keyUsages) {\n        let key;\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                key = jsonSchema.JsonParser.fromJSON(keyData, {\n                    targetSchema: AesCryptoKey\n                });\n                break;\n            case \"raw\":\n                key = new AesCryptoKey();\n                key.data = Buffer.from(keyData);\n                break;\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk' or 'raw'\");\n        }\n        key.algorithm = algorithm;\n        key.algorithm.length = key.data.length << 3;\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        switch(key.algorithm.length){\n            case 128:\n            case 192:\n            case 256:\n                break;\n            default:\n                throw new core__namespace.OperationError(\"keyData: Is wrong key length\");\n        }\n        return key;\n    }\n    static async encrypt(algorithm, key, data) {\n        switch(algorithm.name.toUpperCase()){\n            case \"AES-CBC\":\n                return this.encryptAesCBC(algorithm, key, Buffer.from(data));\n            case \"AES-CTR\":\n                return this.encryptAesCTR(algorithm, key, Buffer.from(data));\n            case \"AES-GCM\":\n                return this.encryptAesGCM(algorithm, key, Buffer.from(data));\n            case \"AES-KW\":\n                return this.encryptAesKW(algorithm, key, Buffer.from(data));\n            case \"AES-ECB\":\n                return this.encryptAesECB(algorithm, key, Buffer.from(data));\n            default:\n                throw new core__namespace.OperationError(\"algorithm: Is not recognized\");\n        }\n    }\n    static async decrypt(algorithm, key, data) {\n        if (!(key instanceof AesCryptoKey)) {\n            throw new Error(\"key: Is not AesCryptoKey\");\n        }\n        switch(algorithm.name.toUpperCase()){\n            case \"AES-CBC\":\n                return this.decryptAesCBC(algorithm, key, Buffer.from(data));\n            case \"AES-CTR\":\n                return this.decryptAesCTR(algorithm, key, Buffer.from(data));\n            case \"AES-GCM\":\n                return this.decryptAesGCM(algorithm, key, Buffer.from(data));\n            case \"AES-KW\":\n                return this.decryptAesKW(algorithm, key, Buffer.from(data));\n            case \"AES-ECB\":\n                return this.decryptAesECB(algorithm, key, Buffer.from(data));\n            default:\n                throw new core__namespace.OperationError(\"algorithm: Is not recognized\");\n        }\n    }\n    static async encryptAesCBC(algorithm, key, data) {\n        const cipher = crypto.createCipheriv(`aes-${key.algorithm.length}-cbc`, key.data, new Uint8Array(algorithm.iv));\n        let enc = cipher.update(data);\n        enc = Buffer.concat([\n            enc,\n            cipher.final()\n        ]);\n        const res = new Uint8Array(enc).buffer;\n        return res;\n    }\n    static async decryptAesCBC(algorithm, key, data) {\n        const decipher = crypto.createDecipheriv(`aes-${key.algorithm.length}-cbc`, key.data, new Uint8Array(algorithm.iv));\n        let dec = decipher.update(data);\n        dec = Buffer.concat([\n            dec,\n            decipher.final()\n        ]);\n        return new Uint8Array(dec).buffer;\n    }\n    static async encryptAesCTR(algorithm, key, data) {\n        const cipher = crypto.createCipheriv(`aes-${key.algorithm.length}-ctr`, key.data, Buffer.from(algorithm.counter));\n        let enc = cipher.update(data);\n        enc = Buffer.concat([\n            enc,\n            cipher.final()\n        ]);\n        const res = new Uint8Array(enc).buffer;\n        return res;\n    }\n    static async decryptAesCTR(algorithm, key, data) {\n        const decipher = crypto.createDecipheriv(`aes-${key.algorithm.length}-ctr`, key.data, new Uint8Array(algorithm.counter));\n        let dec = decipher.update(data);\n        dec = Buffer.concat([\n            dec,\n            decipher.final()\n        ]);\n        return new Uint8Array(dec).buffer;\n    }\n    static async encryptAesGCM(algorithm, key, data) {\n        const cipher = crypto.createCipheriv(`aes-${key.algorithm.length}-gcm`, key.data, Buffer.from(algorithm.iv), {\n            authTagLength: (algorithm.tagLength || 128) >> 3\n        });\n        if (algorithm.additionalData) {\n            cipher.setAAD(Buffer.from(algorithm.additionalData));\n        }\n        let enc = cipher.update(data);\n        enc = Buffer.concat([\n            enc,\n            cipher.final(),\n            cipher.getAuthTag()\n        ]);\n        const res = new Uint8Array(enc).buffer;\n        return res;\n    }\n    static async decryptAesGCM(algorithm, key, data) {\n        const decipher = crypto.createDecipheriv(`aes-${key.algorithm.length}-gcm`, key.data, new Uint8Array(algorithm.iv));\n        const tagLength = (algorithm.tagLength || 128) >> 3;\n        const enc = data.slice(0, data.length - tagLength);\n        const tag = data.slice(data.length - tagLength);\n        if (algorithm.additionalData) {\n            decipher.setAAD(Buffer.from(algorithm.additionalData));\n        }\n        decipher.setAuthTag(tag);\n        let dec = decipher.update(enc);\n        dec = Buffer.concat([\n            dec,\n            decipher.final()\n        ]);\n        return new Uint8Array(dec).buffer;\n    }\n    static async encryptAesKW(algorithm, key, data) {\n        const cipher = crypto.createCipheriv(`id-aes${key.algorithm.length}-wrap`, key.data, this.AES_KW_IV);\n        let enc = cipher.update(data);\n        enc = Buffer.concat([\n            enc,\n            cipher.final()\n        ]);\n        return new Uint8Array(enc).buffer;\n    }\n    static async decryptAesKW(algorithm, key, data) {\n        const decipher = crypto.createDecipheriv(`id-aes${key.algorithm.length}-wrap`, key.data, this.AES_KW_IV);\n        let dec = decipher.update(data);\n        dec = Buffer.concat([\n            dec,\n            decipher.final()\n        ]);\n        return new Uint8Array(dec).buffer;\n    }\n    static async encryptAesECB(algorithm, key, data) {\n        const cipher = crypto.createCipheriv(`aes-${key.algorithm.length}-ecb`, key.data, new Uint8Array(0));\n        let enc = cipher.update(data);\n        enc = Buffer.concat([\n            enc,\n            cipher.final()\n        ]);\n        const res = new Uint8Array(enc).buffer;\n        return res;\n    }\n    static async decryptAesECB(algorithm, key, data) {\n        const decipher = crypto.createDecipheriv(`aes-${key.algorithm.length}-ecb`, key.data, new Uint8Array(0));\n        let dec = decipher.update(data);\n        dec = Buffer.concat([\n            dec,\n            decipher.final()\n        ]);\n        return new Uint8Array(dec).buffer;\n    }\n}\nAesCrypto.AES_KW_IV = Buffer.from(\"A6A6A6A6A6A6A6A6\", \"hex\");\nclass AesCbcProvider extends core__namespace.AesCbcProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const key = await AesCrypto.generateKey({\n            name: this.name,\n            length: algorithm.length\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    async onEncrypt(algorithm, key, data) {\n        return AesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onDecrypt(algorithm, key, data) {\n        return AesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return AesCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await AesCrypto.importKey(format, keyData, {\n            name: algorithm.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\n            throw new TypeError(\"key: Is not a AesCryptoKey\");\n        }\n    }\n}\nconst zero = Buffer.from([\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0\n]);\nconst rb = Buffer.from([\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    135\n]);\nconst blockSize = 16;\nfunction bitShiftLeft(buffer) {\n    const shifted = Buffer.alloc(buffer.length);\n    const last = buffer.length - 1;\n    for(let index = 0; index < last; index++){\n        shifted[index] = buffer[index] << 1;\n        if (buffer[index + 1] & 0x80) {\n            shifted[index] += 0x01;\n        }\n    }\n    shifted[last] = buffer[last] << 1;\n    return shifted;\n}\nfunction xor(a, b) {\n    const length = Math.min(a.length, b.length);\n    const output = Buffer.alloc(length);\n    for(let index = 0; index < length; index++){\n        output[index] = a[index] ^ b[index];\n    }\n    return output;\n}\nfunction aes(key, message) {\n    const cipher = crypto__namespace.createCipheriv(`aes${key.length << 3}`, key, zero);\n    const result = cipher.update(message);\n    cipher.final();\n    return result;\n}\nfunction getMessageBlock(message, blockIndex) {\n    const block = Buffer.alloc(blockSize);\n    const start = blockIndex * blockSize;\n    const end = start + blockSize;\n    message.copy(block, 0, start, end);\n    return block;\n}\nfunction getPaddedMessageBlock(message, blockIndex) {\n    const block = Buffer.alloc(blockSize);\n    const start = blockIndex * blockSize;\n    const end = message.length;\n    block.fill(0);\n    message.copy(block, 0, start, end);\n    block[end - start] = 0x80;\n    return block;\n}\nfunction generateSubkeys(key) {\n    const l = aes(key, zero);\n    let subkey1 = bitShiftLeft(l);\n    if (l[0] & 0x80) {\n        subkey1 = xor(subkey1, rb);\n    }\n    let subkey2 = bitShiftLeft(subkey1);\n    if (subkey1[0] & 0x80) {\n        subkey2 = xor(subkey2, rb);\n    }\n    return {\n        subkey1,\n        subkey2\n    };\n}\nfunction aesCmac(key, message) {\n    const subkeys = generateSubkeys(key);\n    let blockCount = Math.ceil(message.length / blockSize);\n    let lastBlockCompleteFlag;\n    let lastBlock;\n    if (blockCount === 0) {\n        blockCount = 1;\n        lastBlockCompleteFlag = false;\n    } else {\n        lastBlockCompleteFlag = message.length % blockSize === 0;\n    }\n    const lastBlockIndex = blockCount - 1;\n    if (lastBlockCompleteFlag) {\n        lastBlock = xor(getMessageBlock(message, lastBlockIndex), subkeys.subkey1);\n    } else {\n        lastBlock = xor(getPaddedMessageBlock(message, lastBlockIndex), subkeys.subkey2);\n    }\n    let x = zero;\n    let y;\n    for(let index = 0; index < lastBlockIndex; index++){\n        y = xor(x, getMessageBlock(message, index));\n        x = aes(key, y);\n    }\n    y = xor(lastBlock, x);\n    return aes(key, y);\n}\nclass AesCmacProvider extends core__namespace.AesCmacProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const key = await AesCrypto.generateKey({\n            name: this.name,\n            length: algorithm.length\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    async onSign(algorithm, key, data) {\n        const result = aesCmac(getCryptoKey(key).data, Buffer.from(data));\n        return new Uint8Array(result).buffer;\n    }\n    async onVerify(algorithm, key, signature, data) {\n        const signature2 = await this.sign(algorithm, key, data);\n        return Buffer.from(signature).compare(Buffer.from(signature2)) === 0;\n    }\n    async onExportKey(format, key) {\n        return AesCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const res = await AesCrypto.importKey(format, keyData, {\n            name: algorithm.name\n        }, extractable, keyUsages);\n        return setCryptoKey(res);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\n            throw new TypeError(\"key: Is not a AesCryptoKey\");\n        }\n    }\n}\nclass AesCtrProvider extends core__namespace.AesCtrProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const key = await AesCrypto.generateKey({\n            name: this.name,\n            length: algorithm.length\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    async onEncrypt(algorithm, key, data) {\n        return AesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onDecrypt(algorithm, key, data) {\n        return AesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return AesCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const res = await AesCrypto.importKey(format, keyData, {\n            name: algorithm.name\n        }, extractable, keyUsages);\n        return setCryptoKey(res);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\n            throw new TypeError(\"key: Is not a AesCryptoKey\");\n        }\n    }\n}\nclass AesGcmProvider extends core__namespace.AesGcmProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const key = await AesCrypto.generateKey({\n            name: this.name,\n            length: algorithm.length\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    async onEncrypt(algorithm, key, data) {\n        return AesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onDecrypt(algorithm, key, data) {\n        return AesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return AesCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const res = await AesCrypto.importKey(format, keyData, {\n            name: algorithm.name\n        }, extractable, keyUsages);\n        return setCryptoKey(res);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\n            throw new TypeError(\"key: Is not a AesCryptoKey\");\n        }\n    }\n}\nclass AesKwProvider extends core__namespace.AesKwProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const res = await AesCrypto.generateKey({\n            name: this.name,\n            length: algorithm.length\n        }, extractable, keyUsages);\n        return setCryptoKey(res);\n    }\n    async onExportKey(format, key) {\n        return AesCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const res = await AesCrypto.importKey(format, keyData, {\n            name: algorithm.name\n        }, extractable, keyUsages);\n        return setCryptoKey(res);\n    }\n    async onEncrypt(algorithm, key, data) {\n        return AesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onDecrypt(algorithm, key, data) {\n        return AesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\n            throw new TypeError(\"key: Is not a AesCryptoKey\");\n        }\n    }\n}\nclass AesEcbProvider extends core__namespace.AesEcbProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const key = await AesCrypto.generateKey({\n            name: this.name,\n            length: algorithm.length\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    async onEncrypt(algorithm, key, data) {\n        return AesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onDecrypt(algorithm, key, data) {\n        return AesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return AesCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const res = await AesCrypto.importKey(format, keyData, {\n            name: algorithm.name\n        }, extractable, keyUsages);\n        return setCryptoKey(res);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\n            throw new TypeError(\"key: Is not a AesCryptoKey\");\n        }\n    }\n}\nclass DesCryptoKey extends SymmetricKey {\n    get alg() {\n        switch(this.algorithm.name.toUpperCase()){\n            case \"DES-CBC\":\n                return `DES-CBC`;\n            case \"DES-EDE3-CBC\":\n                return `3DES-CBC`;\n            default:\n                throw new core__namespace.AlgorithmError(\"Unsupported algorithm name\");\n        }\n    }\n    set alg(value) {}\n}\ntslib.__decorate([\n    jsonSchema.JsonProp({\n        name: \"k\",\n        converter: JsonBase64UrlConverter\n    })\n], DesCryptoKey.prototype, \"data\", void 0);\nclass DesCrypto {\n    static async generateKey(algorithm, extractable, keyUsages) {\n        const key = new DesCryptoKey();\n        key.algorithm = algorithm;\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        key.data = crypto.randomBytes(algorithm.length >> 3);\n        return key;\n    }\n    static async exportKey(format, key) {\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                return jsonSchema.JsonSerializer.toJSON(key);\n            case \"raw\":\n                return new Uint8Array(key.data).buffer;\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk' or 'raw'\");\n        }\n    }\n    static async importKey(format, keyData, algorithm, extractable, keyUsages) {\n        let key;\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                key = jsonSchema.JsonParser.fromJSON(keyData, {\n                    targetSchema: DesCryptoKey\n                });\n                break;\n            case \"raw\":\n                key = new DesCryptoKey();\n                key.data = Buffer.from(keyData);\n                break;\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk' or 'raw'\");\n        }\n        key.algorithm = algorithm;\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return key;\n    }\n    static async encrypt(algorithm, key, data) {\n        switch(algorithm.name.toUpperCase()){\n            case \"DES-CBC\":\n                return this.encryptDesCBC(algorithm, key, Buffer.from(data));\n            case \"DES-EDE3-CBC\":\n                return this.encryptDesEDE3CBC(algorithm, key, Buffer.from(data));\n            default:\n                throw new core__namespace.OperationError(\"algorithm: Is not recognized\");\n        }\n    }\n    static async decrypt(algorithm, key, data) {\n        if (!(key instanceof DesCryptoKey)) {\n            throw new Error(\"key: Is not DesCryptoKey\");\n        }\n        switch(algorithm.name.toUpperCase()){\n            case \"DES-CBC\":\n                return this.decryptDesCBC(algorithm, key, Buffer.from(data));\n            case \"DES-EDE3-CBC\":\n                return this.decryptDesEDE3CBC(algorithm, key, Buffer.from(data));\n            default:\n                throw new core__namespace.OperationError(\"algorithm: Is not recognized\");\n        }\n    }\n    static async encryptDesCBC(algorithm, key, data) {\n        const cipher = crypto.createCipheriv(`des-cbc`, key.data, new Uint8Array(algorithm.iv));\n        let enc = cipher.update(data);\n        enc = Buffer.concat([\n            enc,\n            cipher.final()\n        ]);\n        const res = new Uint8Array(enc).buffer;\n        return res;\n    }\n    static async decryptDesCBC(algorithm, key, data) {\n        const decipher = crypto.createDecipheriv(`des-cbc`, key.data, new Uint8Array(algorithm.iv));\n        let dec = decipher.update(data);\n        dec = Buffer.concat([\n            dec,\n            decipher.final()\n        ]);\n        return new Uint8Array(dec).buffer;\n    }\n    static async encryptDesEDE3CBC(algorithm, key, data) {\n        const cipher = crypto.createCipheriv(`des-ede3-cbc`, key.data, Buffer.from(algorithm.iv));\n        let enc = cipher.update(data);\n        enc = Buffer.concat([\n            enc,\n            cipher.final()\n        ]);\n        const res = new Uint8Array(enc).buffer;\n        return res;\n    }\n    static async decryptDesEDE3CBC(algorithm, key, data) {\n        const decipher = crypto.createDecipheriv(`des-ede3-cbc`, key.data, new Uint8Array(algorithm.iv));\n        let dec = decipher.update(data);\n        dec = Buffer.concat([\n            dec,\n            decipher.final()\n        ]);\n        return new Uint8Array(dec).buffer;\n    }\n}\nclass DesCbcProvider extends core__namespace.DesProvider {\n    constructor(){\n        super(...arguments);\n        this.keySizeBits = 64;\n        this.ivSize = 8;\n        this.name = \"DES-CBC\";\n    }\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const key = await DesCrypto.generateKey({\n            name: this.name,\n            length: this.keySizeBits\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    async onEncrypt(algorithm, key, data) {\n        return DesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onDecrypt(algorithm, key, data) {\n        return DesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return DesCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await DesCrypto.importKey(format, keyData, {\n            name: this.name,\n            length: this.keySizeBits\n        }, extractable, keyUsages);\n        if (key.data.length !== this.keySizeBits >> 3) {\n            throw new core__namespace.OperationError(\"keyData: Wrong key size\");\n        }\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof DesCryptoKey)) {\n            throw new TypeError(\"key: Is not a DesCryptoKey\");\n        }\n    }\n}\nclass DesEde3CbcProvider extends core__namespace.DesProvider {\n    constructor(){\n        super(...arguments);\n        this.keySizeBits = 192;\n        this.ivSize = 8;\n        this.name = \"DES-EDE3-CBC\";\n    }\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const key = await DesCrypto.generateKey({\n            name: this.name,\n            length: this.keySizeBits\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    async onEncrypt(algorithm, key, data) {\n        return DesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onDecrypt(algorithm, key, data) {\n        return DesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return DesCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await DesCrypto.importKey(format, keyData, {\n            name: this.name,\n            length: this.keySizeBits\n        }, extractable, keyUsages);\n        if (key.data.length !== this.keySizeBits >> 3) {\n            throw new core__namespace.OperationError(\"keyData: Wrong key size\");\n        }\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof DesCryptoKey)) {\n            throw new TypeError(\"key: Is not a DesCryptoKey\");\n        }\n    }\n}\nfunction getJwkAlgorithm(algorithm) {\n    switch(algorithm.name.toUpperCase()){\n        case \"RSA-OAEP\":\n            {\n                const mdSize = /(\\d+)$/.exec(algorithm.hash.name)[1];\n                return `RSA-OAEP${mdSize !== \"1\" ? `-${mdSize}` : \"\"}`;\n            }\n        case \"RSASSA-PKCS1-V1_5\":\n            return `RS${/(\\d+)$/.exec(algorithm.hash.name)[1]}`;\n        case \"RSA-PSS\":\n            return `PS${/(\\d+)$/.exec(algorithm.hash.name)[1]}`;\n        case \"RSA-PKCS1\":\n            return `RS1`;\n        default:\n            throw new core__namespace.OperationError(\"algorithm: Is not recognized\");\n    }\n}\nclass RsaPrivateKey extends AsymmetricKey {\n    constructor(){\n        super(...arguments);\n        this.type = \"private\";\n    }\n    getKey() {\n        const keyInfo = asn1Schema.AsnParser.parse(this.data, core__namespace.asn1.PrivateKeyInfo);\n        return asn1Schema.AsnParser.parse(keyInfo.privateKey, core__namespace.asn1.RsaPrivateKey);\n    }\n    toJSON() {\n        const key = this.getKey();\n        const json = {\n            kty: \"RSA\",\n            alg: getJwkAlgorithm(this.algorithm),\n            key_ops: this.usages,\n            ext: this.extractable\n        };\n        return Object.assign(json, jsonSchema.JsonSerializer.toJSON(key));\n    }\n    fromJSON(json) {\n        const key = jsonSchema.JsonParser.fromJSON(json, {\n            targetSchema: core__namespace.asn1.RsaPrivateKey\n        });\n        const keyInfo = new core__namespace.asn1.PrivateKeyInfo();\n        keyInfo.privateKeyAlgorithm.algorithm = \"1.2.840.113549.1.1.1\";\n        keyInfo.privateKeyAlgorithm.parameters = null;\n        keyInfo.privateKey = asn1Schema.AsnSerializer.serialize(key);\n        this.data = Buffer.from(asn1Schema.AsnSerializer.serialize(keyInfo));\n    }\n}\nclass RsaPublicKey extends AsymmetricKey {\n    constructor(){\n        super(...arguments);\n        this.type = \"public\";\n    }\n    getKey() {\n        const keyInfo = asn1Schema.AsnParser.parse(this.data, core__namespace.asn1.PublicKeyInfo);\n        return asn1Schema.AsnParser.parse(keyInfo.publicKey, core__namespace.asn1.RsaPublicKey);\n    }\n    toJSON() {\n        const key = this.getKey();\n        const json = {\n            kty: \"RSA\",\n            alg: getJwkAlgorithm(this.algorithm),\n            key_ops: this.usages,\n            ext: this.extractable\n        };\n        return Object.assign(json, jsonSchema.JsonSerializer.toJSON(key));\n    }\n    fromJSON(json) {\n        const key = jsonSchema.JsonParser.fromJSON(json, {\n            targetSchema: core__namespace.asn1.RsaPublicKey\n        });\n        const keyInfo = new core__namespace.asn1.PublicKeyInfo();\n        keyInfo.publicKeyAlgorithm.algorithm = \"1.2.840.113549.1.1.1\";\n        keyInfo.publicKeyAlgorithm.parameters = null;\n        keyInfo.publicKey = asn1Schema.AsnSerializer.serialize(key);\n        this.data = Buffer.from(asn1Schema.AsnSerializer.serialize(keyInfo));\n    }\n}\nclass RsaCrypto {\n    static async generateKey(algorithm, extractable, keyUsages) {\n        const privateKey = new RsaPrivateKey();\n        privateKey.algorithm = algorithm;\n        privateKey.extractable = extractable;\n        privateKey.usages = keyUsages.filter((usage)=>this.privateKeyUsages.indexOf(usage) !== -1);\n        const publicKey = new RsaPublicKey();\n        publicKey.algorithm = algorithm;\n        publicKey.extractable = true;\n        publicKey.usages = keyUsages.filter((usage)=>this.publicKeyUsages.indexOf(usage) !== -1);\n        const publicExponent = Buffer.concat([\n            Buffer.alloc(4 - algorithm.publicExponent.byteLength, 0),\n            Buffer.from(algorithm.publicExponent)\n        ]).readInt32BE(0);\n        const keys = crypto.generateKeyPairSync(\"rsa\", {\n            modulusLength: algorithm.modulusLength,\n            publicExponent,\n            publicKeyEncoding: {\n                format: \"der\",\n                type: \"spki\"\n            },\n            privateKeyEncoding: {\n                format: \"der\",\n                type: \"pkcs8\"\n            }\n        });\n        privateKey.data = keys.privateKey;\n        publicKey.data = keys.publicKey;\n        const res = {\n            privateKey,\n            publicKey\n        };\n        return res;\n    }\n    static async exportKey(format, key) {\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                return jsonSchema.JsonSerializer.toJSON(key);\n            case \"pkcs8\":\n            case \"spki\":\n                return new Uint8Array(key.data).buffer;\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk', 'pkcs8' or 'spki'\");\n        }\n    }\n    static async importKey(format, keyData, algorithm, extractable, keyUsages) {\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                {\n                    const jwk = keyData;\n                    if (jwk.d) {\n                        const asnKey = jsonSchema.JsonParser.fromJSON(keyData, {\n                            targetSchema: core__namespace.asn1.RsaPrivateKey\n                        });\n                        return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\n                    } else {\n                        const asnKey = jsonSchema.JsonParser.fromJSON(keyData, {\n                            targetSchema: core__namespace.asn1.RsaPublicKey\n                        });\n                        return this.importPublicKey(asnKey, algorithm, extractable, keyUsages);\n                    }\n                }\n            case \"spki\":\n                {\n                    const keyInfo = asn1Schema.AsnParser.parse(new Uint8Array(keyData), core__namespace.asn1.PublicKeyInfo);\n                    const asnKey = asn1Schema.AsnParser.parse(keyInfo.publicKey, core__namespace.asn1.RsaPublicKey);\n                    return this.importPublicKey(asnKey, algorithm, extractable, keyUsages);\n                }\n            case \"pkcs8\":\n                {\n                    const keyInfo = asn1Schema.AsnParser.parse(new Uint8Array(keyData), core__namespace.asn1.PrivateKeyInfo);\n                    const asnKey = asn1Schema.AsnParser.parse(keyInfo.privateKey, core__namespace.asn1.RsaPrivateKey);\n                    return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\n                }\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk', 'pkcs8' or 'spki'\");\n        }\n    }\n    static async sign(algorithm, key, data) {\n        switch(algorithm.name.toUpperCase()){\n            case \"RSA-PSS\":\n            case \"RSASSA-PKCS1-V1_5\":\n                return this.signRsa(algorithm, key, data);\n            default:\n                throw new core__namespace.OperationError(\"algorithm: Is not recognized\");\n        }\n    }\n    static async verify(algorithm, key, signature, data) {\n        switch(algorithm.name.toUpperCase()){\n            case \"RSA-PSS\":\n            case \"RSASSA-PKCS1-V1_5\":\n                return this.verifySSA(algorithm, key, data, signature);\n            default:\n                throw new core__namespace.OperationError(\"algorithm: Is not recognized\");\n        }\n    }\n    static async encrypt(algorithm, key, data) {\n        switch(algorithm.name.toUpperCase()){\n            case \"RSA-OAEP\":\n                return this.encryptOAEP(algorithm, key, data);\n            default:\n                throw new core__namespace.OperationError(\"algorithm: Is not recognized\");\n        }\n    }\n    static async decrypt(algorithm, key, data) {\n        switch(algorithm.name.toUpperCase()){\n            case \"RSA-OAEP\":\n                return this.decryptOAEP(algorithm, key, data);\n            default:\n                throw new core__namespace.OperationError(\"algorithm: Is not recognized\");\n        }\n    }\n    static importPrivateKey(asnKey, algorithm, extractable, keyUsages) {\n        const keyInfo = new core__namespace.asn1.PrivateKeyInfo();\n        keyInfo.privateKeyAlgorithm.algorithm = \"1.2.840.113549.1.1.1\";\n        keyInfo.privateKeyAlgorithm.parameters = null;\n        keyInfo.privateKey = asn1Schema.AsnSerializer.serialize(asnKey);\n        const key = new RsaPrivateKey();\n        key.data = Buffer.from(asn1Schema.AsnSerializer.serialize(keyInfo));\n        key.algorithm = Object.assign({}, algorithm);\n        key.algorithm.publicExponent = new Uint8Array(asnKey.publicExponent);\n        key.algorithm.modulusLength = asnKey.modulus.byteLength << 3;\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return key;\n    }\n    static importPublicKey(asnKey, algorithm, extractable, keyUsages) {\n        const keyInfo = new core__namespace.asn1.PublicKeyInfo();\n        keyInfo.publicKeyAlgorithm.algorithm = \"1.2.840.113549.1.1.1\";\n        keyInfo.publicKeyAlgorithm.parameters = null;\n        keyInfo.publicKey = asn1Schema.AsnSerializer.serialize(asnKey);\n        const key = new RsaPublicKey();\n        key.data = Buffer.from(asn1Schema.AsnSerializer.serialize(keyInfo));\n        key.algorithm = Object.assign({}, algorithm);\n        key.algorithm.publicExponent = new Uint8Array(asnKey.publicExponent);\n        key.algorithm.modulusLength = asnKey.modulus.byteLength << 3;\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return key;\n    }\n    static getCryptoAlgorithm(alg) {\n        switch(alg.hash.name.toUpperCase()){\n            case \"SHA-1\":\n                return \"RSA-SHA1\";\n            case \"SHA-256\":\n                return \"RSA-SHA256\";\n            case \"SHA-384\":\n                return \"RSA-SHA384\";\n            case \"SHA-512\":\n                return \"RSA-SHA512\";\n            case \"SHA3-256\":\n                return \"RSA-SHA3-256\";\n            case \"SHA3-384\":\n                return \"RSA-SHA3-384\";\n            case \"SHA3-512\":\n                return \"RSA-SHA3-512\";\n            default:\n                throw new core__namespace.OperationError(\"algorithm.hash: Is not recognized\");\n        }\n    }\n    static signRsa(algorithm, key, data) {\n        const cryptoAlg = this.getCryptoAlgorithm(key.algorithm);\n        const signer = crypto.createSign(cryptoAlg);\n        signer.update(Buffer.from(data));\n        if (!key.pem) {\n            key.pem = `-----BEGIN PRIVATE KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PRIVATE KEY-----`;\n        }\n        const options = {\n            key: key.pem\n        };\n        if (algorithm.name.toUpperCase() === \"RSA-PSS\") {\n            options.padding = crypto.constants.RSA_PKCS1_PSS_PADDING;\n            options.saltLength = algorithm.saltLength;\n        }\n        const signature = signer.sign(options);\n        return new Uint8Array(signature).buffer;\n    }\n    static verifySSA(algorithm, key, data, signature) {\n        const cryptoAlg = this.getCryptoAlgorithm(key.algorithm);\n        const signer = crypto.createVerify(cryptoAlg);\n        signer.update(Buffer.from(data));\n        if (!key.pem) {\n            key.pem = `-----BEGIN PUBLIC KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PUBLIC KEY-----`;\n        }\n        const options = {\n            key: key.pem\n        };\n        if (algorithm.name.toUpperCase() === \"RSA-PSS\") {\n            options.padding = crypto.constants.RSA_PKCS1_PSS_PADDING;\n            options.saltLength = algorithm.saltLength;\n        }\n        const ok = signer.verify(options, signature);\n        return ok;\n    }\n    static encryptOAEP(algorithm, key, data) {\n        const options = {\n            key: `-----BEGIN PUBLIC KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PUBLIC KEY-----`,\n            padding: crypto.constants.RSA_PKCS1_OAEP_PADDING\n        };\n        if (algorithm.label) ;\n        return new Uint8Array(crypto.publicEncrypt(options, data)).buffer;\n    }\n    static decryptOAEP(algorithm, key, data) {\n        const options = {\n            key: `-----BEGIN PRIVATE KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PRIVATE KEY-----`,\n            padding: crypto.constants.RSA_PKCS1_OAEP_PADDING\n        };\n        if (algorithm.label) ;\n        return new Uint8Array(crypto.privateDecrypt(options, data)).buffer;\n    }\n}\nRsaCrypto.publicKeyUsages = [\n    \"verify\",\n    \"encrypt\",\n    \"wrapKey\"\n];\nRsaCrypto.privateKeyUsages = [\n    \"sign\",\n    \"decrypt\",\n    \"unwrapKey\"\n];\nclass RsaSsaProvider extends core__namespace.RsaSsaProvider {\n    constructor(){\n        super(...arguments);\n        this.hashAlgorithms = [\n            \"SHA-1\",\n            \"SHA-256\",\n            \"SHA-384\",\n            \"SHA-512\",\n            \"shake128\",\n            \"shake256\",\n            \"SHA3-256\",\n            \"SHA3-384\",\n            \"SHA3-512\"\n        ];\n    }\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const keys = await RsaCrypto.generateKey({\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return {\n            privateKey: setCryptoKey(keys.privateKey),\n            publicKey: setCryptoKey(keys.publicKey)\n        };\n    }\n    async onSign(algorithm, key, data) {\n        return RsaCrypto.sign(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onVerify(algorithm, key, signature, data) {\n        return RsaCrypto.verify(algorithm, getCryptoKey(key), new Uint8Array(signature), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return RsaCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await RsaCrypto.importKey(format, keyData, {\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        const internalKey = getCryptoKey(key);\n        if (!(internalKey instanceof RsaPrivateKey || internalKey instanceof RsaPublicKey)) {\n            throw new TypeError(\"key: Is not RSA CryptoKey\");\n        }\n    }\n}\nclass RsaPssProvider extends core__namespace.RsaPssProvider {\n    constructor(){\n        super(...arguments);\n        this.hashAlgorithms = [\n            \"SHA-1\",\n            \"SHA-256\",\n            \"SHA-384\",\n            \"SHA-512\",\n            \"shake128\",\n            \"shake256\",\n            \"SHA3-256\",\n            \"SHA3-384\",\n            \"SHA3-512\"\n        ];\n    }\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const keys = await RsaCrypto.generateKey({\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return {\n            privateKey: setCryptoKey(keys.privateKey),\n            publicKey: setCryptoKey(keys.publicKey)\n        };\n    }\n    async onSign(algorithm, key, data) {\n        return RsaCrypto.sign(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onVerify(algorithm, key, signature, data) {\n        return RsaCrypto.verify(algorithm, getCryptoKey(key), new Uint8Array(signature), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return RsaCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await RsaCrypto.importKey(format, keyData, {\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        const internalKey = getCryptoKey(key);\n        if (!(internalKey instanceof RsaPrivateKey || internalKey instanceof RsaPublicKey)) {\n            throw new TypeError(\"key: Is not RSA CryptoKey\");\n        }\n    }\n}\nclass ShaCrypto {\n    static size(algorithm) {\n        switch(algorithm.name.toUpperCase()){\n            case \"SHA-1\":\n                return 160;\n            case \"SHA-256\":\n            case \"SHA3-256\":\n                return 256;\n            case \"SHA-384\":\n            case \"SHA3-384\":\n                return 384;\n            case \"SHA-512\":\n            case \"SHA3-512\":\n                return 512;\n            default:\n                throw new Error(\"Unrecognized name\");\n        }\n    }\n    static getAlgorithmName(algorithm) {\n        switch(algorithm.name.toUpperCase()){\n            case \"SHA-1\":\n                return \"sha1\";\n            case \"SHA-256\":\n                return \"sha256\";\n            case \"SHA-384\":\n                return \"sha384\";\n            case \"SHA-512\":\n                return \"sha512\";\n            case \"SHA3-256\":\n                return \"sha3-256\";\n            case \"SHA3-384\":\n                return \"sha3-384\";\n            case \"SHA3-512\":\n                return \"sha3-512\";\n            default:\n                throw new Error(\"Unrecognized name\");\n        }\n    }\n    static digest(algorithm, data) {\n        const hashAlg = this.getAlgorithmName(algorithm);\n        const hash = crypto.createHash(hashAlg).update(Buffer.from(data)).digest();\n        return new Uint8Array(hash).buffer;\n    }\n}\nclass RsaOaepProvider extends core__namespace.RsaOaepProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const keys = await RsaCrypto.generateKey({\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return {\n            privateKey: setCryptoKey(keys.privateKey),\n            publicKey: setCryptoKey(keys.publicKey)\n        };\n    }\n    async onEncrypt(algorithm, key, data) {\n        const internalKey = getCryptoKey(key);\n        const dataView = new Uint8Array(data);\n        const keySize = Math.ceil(internalKey.algorithm.modulusLength >> 3);\n        const hashSize = ShaCrypto.size(internalKey.algorithm.hash) >> 3;\n        const dataLength = dataView.byteLength;\n        const psLength = keySize - dataLength - 2 * hashSize - 2;\n        if (dataLength > keySize - 2 * hashSize - 2) {\n            throw new Error(\"Data too large\");\n        }\n        const message = new Uint8Array(keySize);\n        const seed = message.subarray(1, hashSize + 1);\n        const dataBlock = message.subarray(hashSize + 1);\n        dataBlock.set(dataView, hashSize + psLength + 1);\n        const labelHash = crypto.createHash(internalKey.algorithm.hash.name.replace(\"-\", \"\")).update(core__namespace.BufferSourceConverter.toUint8Array(algorithm.label || new Uint8Array(0))).digest();\n        dataBlock.set(labelHash, 0);\n        dataBlock[hashSize + psLength] = 1;\n        crypto.randomFillSync(seed);\n        const dataBlockMask = this.mgf1(internalKey.algorithm.hash, seed, dataBlock.length);\n        for(let i = 0; i < dataBlock.length; i++){\n            dataBlock[i] ^= dataBlockMask[i];\n        }\n        const seedMask = this.mgf1(internalKey.algorithm.hash, dataBlock, seed.length);\n        for(let i = 0; i < seed.length; i++){\n            seed[i] ^= seedMask[i];\n        }\n        if (!internalKey.pem) {\n            internalKey.pem = `-----BEGIN PUBLIC KEY-----\\n${internalKey.data.toString(\"base64\")}\\n-----END PUBLIC KEY-----`;\n        }\n        const pkcs0 = crypto.publicEncrypt({\n            key: internalKey.pem,\n            padding: crypto.constants.RSA_NO_PADDING\n        }, Buffer.from(message));\n        return new Uint8Array(pkcs0).buffer;\n    }\n    async onDecrypt(algorithm, key, data) {\n        const internalKey = getCryptoKey(key);\n        const keySize = Math.ceil(internalKey.algorithm.modulusLength >> 3);\n        const hashSize = ShaCrypto.size(internalKey.algorithm.hash) >> 3;\n        const dataLength = data.byteLength;\n        if (dataLength !== keySize) {\n            throw new Error(\"Bad data\");\n        }\n        if (!internalKey.pem) {\n            internalKey.pem = `-----BEGIN PRIVATE KEY-----\\n${internalKey.data.toString(\"base64\")}\\n-----END PRIVATE KEY-----`;\n        }\n        let pkcs0 = crypto.privateDecrypt({\n            key: internalKey.pem,\n            padding: crypto.constants.RSA_NO_PADDING\n        }, Buffer.from(data));\n        const z = pkcs0[0];\n        const seed = pkcs0.subarray(1, hashSize + 1);\n        const dataBlock = pkcs0.subarray(hashSize + 1);\n        if (z !== 0) {\n            throw new Error(\"Decryption failed\");\n        }\n        const seedMask = this.mgf1(internalKey.algorithm.hash, dataBlock, seed.length);\n        for(let i = 0; i < seed.length; i++){\n            seed[i] ^= seedMask[i];\n        }\n        const dataBlockMask = this.mgf1(internalKey.algorithm.hash, seed, dataBlock.length);\n        for(let i = 0; i < dataBlock.length; i++){\n            dataBlock[i] ^= dataBlockMask[i];\n        }\n        const labelHash = crypto.createHash(internalKey.algorithm.hash.name.replace(\"-\", \"\")).update(core__namespace.BufferSourceConverter.toUint8Array(algorithm.label || new Uint8Array(0))).digest();\n        for(let i = 0; i < hashSize; i++){\n            if (labelHash[i] !== dataBlock[i]) {\n                throw new Error(\"Decryption failed\");\n            }\n        }\n        let psEnd = hashSize;\n        for(; psEnd < dataBlock.length; psEnd++){\n            const psz = dataBlock[psEnd];\n            if (psz === 1) {\n                break;\n            }\n            if (psz !== 0) {\n                throw new Error(\"Decryption failed\");\n            }\n        }\n        if (psEnd === dataBlock.length) {\n            throw new Error(\"Decryption failed\");\n        }\n        pkcs0 = dataBlock.subarray(psEnd + 1);\n        return new Uint8Array(pkcs0).buffer;\n    }\n    async onExportKey(format, key) {\n        return RsaCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await RsaCrypto.importKey(format, keyData, {\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        const internalKey = getCryptoKey(key);\n        if (!(internalKey instanceof RsaPrivateKey || internalKey instanceof RsaPublicKey)) {\n            throw new TypeError(\"key: Is not RSA CryptoKey\");\n        }\n    }\n    mgf1(algorithm, seed, length = 0) {\n        const hashSize = ShaCrypto.size(algorithm) >> 3;\n        const mask = new Uint8Array(length);\n        const counter = new Uint8Array(4);\n        const chunks = Math.ceil(length / hashSize);\n        for(let i = 0; i < chunks; i++){\n            counter[0] = i >>> 24;\n            counter[1] = i >>> 16 & 255;\n            counter[2] = i >>> 8 & 255;\n            counter[3] = i & 255;\n            const submask = mask.subarray(i * hashSize);\n            let chunk = crypto.createHash(algorithm.name.replace(\"-\", \"\")).update(seed).update(counter).digest();\n            if (chunk.length > submask.length) {\n                chunk = chunk.subarray(0, submask.length);\n            }\n            submask.set(chunk);\n        }\n        return mask;\n    }\n}\nclass RsaEsProvider extends core__namespace.ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = \"RSAES-PKCS1-v1_5\";\n        this.usages = {\n            publicKey: [\n                \"encrypt\",\n                \"wrapKey\"\n            ],\n            privateKey: [\n                \"decrypt\",\n                \"unwrapKey\"\n            ]\n        };\n    }\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const keys = await RsaCrypto.generateKey({\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return {\n            privateKey: setCryptoKey(keys.privateKey),\n            publicKey: setCryptoKey(keys.publicKey)\n        };\n    }\n    checkGenerateKeyParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"publicExponent\");\n        if (!(algorithm.publicExponent && algorithm.publicExponent instanceof Uint8Array)) {\n            throw new TypeError(\"publicExponent: Missing or not a Uint8Array\");\n        }\n        const publicExponent = pvtsutils.Convert.ToBase64(algorithm.publicExponent);\n        if (!(publicExponent === \"Aw==\" || publicExponent === \"AQAB\")) {\n            throw new TypeError(\"publicExponent: Must be [3] or [1,0,1]\");\n        }\n        this.checkRequiredProperty(algorithm, \"modulusLength\");\n        switch(algorithm.modulusLength){\n            case 1024:\n            case 2048:\n            case 4096:\n                break;\n            default:\n                throw new TypeError(\"modulusLength: Must be 1024, 2048, or 4096\");\n        }\n    }\n    async onEncrypt(algorithm, key, data) {\n        const options = this.toCryptoOptions(key);\n        const enc = crypto__namespace.publicEncrypt(options, new Uint8Array(data));\n        return new Uint8Array(enc).buffer;\n    }\n    async onDecrypt(algorithm, key, data) {\n        const options = this.toCryptoOptions(key);\n        const dec = crypto__namespace.privateDecrypt(options, new Uint8Array(data));\n        return new Uint8Array(dec).buffer;\n    }\n    async onExportKey(format, key) {\n        return RsaCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await RsaCrypto.importKey(format, keyData, {\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        const internalKey = getCryptoKey(key);\n        if (!(internalKey instanceof RsaPrivateKey || internalKey instanceof RsaPublicKey)) {\n            throw new TypeError(\"key: Is not RSA CryptoKey\");\n        }\n    }\n    toCryptoOptions(key) {\n        const type = key.type.toUpperCase();\n        return {\n            key: `-----BEGIN ${type} KEY-----\\n${getCryptoKey(key).data.toString(\"base64\")}\\n-----END ${type} KEY-----`,\n            padding: crypto__namespace.constants.RSA_PKCS1_PADDING\n        };\n    }\n}\nconst namedOIDs = {\n    \"1.2.840.10045.3.1.7\": \"P-256\",\n    \"P-256\": \"1.2.840.10045.3.1.7\",\n    \"1.3.132.0.34\": \"P-384\",\n    \"P-384\": \"1.3.132.0.34\",\n    \"1.3.132.0.35\": \"P-521\",\n    \"P-521\": \"1.3.132.0.35\",\n    \"1.3.132.0.10\": \"K-256\",\n    \"K-256\": \"1.3.132.0.10\",\n    \"brainpoolP160r1\": \"1.3.36.3.3.2.8.1.1.1\",\n    \"1.3.36.3.3.2.8.1.1.1\": \"brainpoolP160r1\",\n    \"brainpoolP160t1\": \"1.3.36.3.3.2.8.1.1.2\",\n    \"1.3.36.3.3.2.8.1.1.2\": \"brainpoolP160t1\",\n    \"brainpoolP192r1\": \"1.3.36.3.3.2.8.1.1.3\",\n    \"1.3.36.3.3.2.8.1.1.3\": \"brainpoolP192r1\",\n    \"brainpoolP192t1\": \"1.3.36.3.3.2.8.1.1.4\",\n    \"1.3.36.3.3.2.8.1.1.4\": \"brainpoolP192t1\",\n    \"brainpoolP224r1\": \"1.3.36.3.3.2.8.1.1.5\",\n    \"1.3.36.3.3.2.8.1.1.5\": \"brainpoolP224r1\",\n    \"brainpoolP224t1\": \"1.3.36.3.3.2.8.1.1.6\",\n    \"1.3.36.3.3.2.8.1.1.6\": \"brainpoolP224t1\",\n    \"brainpoolP256r1\": \"1.3.36.3.3.2.8.1.1.7\",\n    \"1.3.36.3.3.2.8.1.1.7\": \"brainpoolP256r1\",\n    \"brainpoolP256t1\": \"1.3.36.3.3.2.8.1.1.8\",\n    \"1.3.36.3.3.2.8.1.1.8\": \"brainpoolP256t1\",\n    \"brainpoolP320r1\": \"1.3.36.3.3.2.8.1.1.9\",\n    \"1.3.36.3.3.2.8.1.1.9\": \"brainpoolP320r1\",\n    \"brainpoolP320t1\": \"1.3.36.3.3.2.8.1.1.10\",\n    \"1.3.36.3.3.2.8.1.1.10\": \"brainpoolP320t1\",\n    \"brainpoolP384r1\": \"1.3.36.3.3.2.8.1.1.11\",\n    \"1.3.36.3.3.2.8.1.1.11\": \"brainpoolP384r1\",\n    \"brainpoolP384t1\": \"1.3.36.3.3.2.8.1.1.12\",\n    \"1.3.36.3.3.2.8.1.1.12\": \"brainpoolP384t1\",\n    \"brainpoolP512r1\": \"1.3.36.3.3.2.8.1.1.13\",\n    \"1.3.36.3.3.2.8.1.1.13\": \"brainpoolP512r1\",\n    \"brainpoolP512t1\": \"1.3.36.3.3.2.8.1.1.14\",\n    \"1.3.36.3.3.2.8.1.1.14\": \"brainpoolP512t1\"\n};\nfunction getOidByNamedCurve$1(namedCurve) {\n    const oid = namedOIDs[namedCurve];\n    if (!oid) {\n        throw new core__namespace.OperationError(`Cannot convert WebCrypto named curve '${namedCurve}' to OID`);\n    }\n    return oid;\n}\nclass EcPrivateKey extends AsymmetricKey {\n    constructor(){\n        super(...arguments);\n        this.type = \"private\";\n    }\n    getKey() {\n        const keyInfo = asn1Schema.AsnParser.parse(this.data, core__namespace.asn1.PrivateKeyInfo);\n        return asn1Schema.AsnParser.parse(keyInfo.privateKey, core__namespace.asn1.EcPrivateKey);\n    }\n    toJSON() {\n        const key = this.getKey();\n        const json = {\n            kty: \"EC\",\n            crv: this.algorithm.namedCurve,\n            key_ops: this.usages,\n            ext: this.extractable\n        };\n        return Object.assign(json, jsonSchema.JsonSerializer.toJSON(key));\n    }\n    fromJSON(json) {\n        if (!json.crv) {\n            throw new core__namespace.OperationError(`Cannot get named curve from JWK. Property 'crv' is required`);\n        }\n        const keyInfo = new core__namespace.asn1.PrivateKeyInfo();\n        keyInfo.privateKeyAlgorithm.algorithm = \"1.2.840.10045.2.1\";\n        keyInfo.privateKeyAlgorithm.parameters = asn1Schema.AsnSerializer.serialize(new core__namespace.asn1.ObjectIdentifier(getOidByNamedCurve$1(json.crv)));\n        const key = jsonSchema.JsonParser.fromJSON(json, {\n            targetSchema: core__namespace.asn1.EcPrivateKey\n        });\n        keyInfo.privateKey = asn1Schema.AsnSerializer.serialize(key);\n        this.data = Buffer.from(asn1Schema.AsnSerializer.serialize(keyInfo));\n        return this;\n    }\n}\nclass EcPublicKey extends AsymmetricKey {\n    constructor(){\n        super(...arguments);\n        this.type = \"public\";\n    }\n    getKey() {\n        const keyInfo = asn1Schema.AsnParser.parse(this.data, core__namespace.asn1.PublicKeyInfo);\n        return new core__namespace.asn1.EcPublicKey(keyInfo.publicKey);\n    }\n    toJSON() {\n        const key = this.getKey();\n        const json = {\n            kty: \"EC\",\n            crv: this.algorithm.namedCurve,\n            key_ops: this.usages,\n            ext: this.extractable\n        };\n        return Object.assign(json, jsonSchema.JsonSerializer.toJSON(key));\n    }\n    fromJSON(json) {\n        if (!json.crv) {\n            throw new core__namespace.OperationError(`Cannot get named curve from JWK. Property 'crv' is required`);\n        }\n        const key = jsonSchema.JsonParser.fromJSON(json, {\n            targetSchema: core__namespace.asn1.EcPublicKey\n        });\n        const keyInfo = new core__namespace.asn1.PublicKeyInfo();\n        keyInfo.publicKeyAlgorithm.algorithm = \"1.2.840.10045.2.1\";\n        keyInfo.publicKeyAlgorithm.parameters = asn1Schema.AsnSerializer.serialize(new core__namespace.asn1.ObjectIdentifier(getOidByNamedCurve$1(json.crv)));\n        keyInfo.publicKey = asn1Schema.AsnSerializer.toASN(key).valueHex;\n        this.data = Buffer.from(asn1Schema.AsnSerializer.serialize(keyInfo));\n        return this;\n    }\n}\nclass Sha1Provider extends core__namespace.ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = \"SHA-1\";\n        this.usages = [];\n    }\n    async onDigest(algorithm, data) {\n        return ShaCrypto.digest(algorithm, data);\n    }\n}\nclass Sha256Provider extends core__namespace.ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = \"SHA-256\";\n        this.usages = [];\n    }\n    async onDigest(algorithm, data) {\n        return ShaCrypto.digest(algorithm, data);\n    }\n}\nclass Sha384Provider extends core__namespace.ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = \"SHA-384\";\n        this.usages = [];\n    }\n    async onDigest(algorithm, data) {\n        return ShaCrypto.digest(algorithm, data);\n    }\n}\nclass Sha512Provider extends core__namespace.ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = \"SHA-512\";\n        this.usages = [];\n    }\n    async onDigest(algorithm, data) {\n        return ShaCrypto.digest(algorithm, data);\n    }\n}\nclass Sha3256Provider extends core__namespace.ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = \"SHA3-256\";\n        this.usages = [];\n    }\n    async onDigest(algorithm, data) {\n        return ShaCrypto.digest(algorithm, data);\n    }\n}\nclass Sha3384Provider extends core__namespace.ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = \"SHA3-384\";\n        this.usages = [];\n    }\n    async onDigest(algorithm, data) {\n        return ShaCrypto.digest(algorithm, data);\n    }\n}\nclass Sha3512Provider extends core__namespace.ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = \"SHA3-512\";\n        this.usages = [];\n    }\n    async onDigest(algorithm, data) {\n        return ShaCrypto.digest(algorithm, data);\n    }\n}\nclass EcCrypto {\n    static async generateKey(algorithm, extractable, keyUsages) {\n        const privateKey = new EcPrivateKey();\n        privateKey.algorithm = algorithm;\n        privateKey.extractable = extractable;\n        privateKey.usages = keyUsages.filter((usage)=>this.privateKeyUsages.indexOf(usage) !== -1);\n        const publicKey = new EcPublicKey();\n        publicKey.algorithm = algorithm;\n        publicKey.extractable = true;\n        publicKey.usages = keyUsages.filter((usage)=>this.publicKeyUsages.indexOf(usage) !== -1);\n        const keys = crypto.generateKeyPairSync(\"ec\", {\n            namedCurve: this.getOpenSSLNamedCurve(algorithm.namedCurve),\n            publicKeyEncoding: {\n                format: \"der\",\n                type: \"spki\"\n            },\n            privateKeyEncoding: {\n                format: \"der\",\n                type: \"pkcs8\"\n            }\n        });\n        privateKey.data = keys.privateKey;\n        publicKey.data = keys.publicKey;\n        const res = {\n            privateKey,\n            publicKey\n        };\n        return res;\n    }\n    static async sign(algorithm, key, data) {\n        const cryptoAlg = ShaCrypto.getAlgorithmName(algorithm.hash);\n        const signer = crypto.createSign(cryptoAlg);\n        signer.update(Buffer.from(data));\n        if (!key.pem) {\n            key.pem = `-----BEGIN PRIVATE KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PRIVATE KEY-----`;\n        }\n        const options = {\n            key: key.pem\n        };\n        const signature = signer.sign(options);\n        const ecSignature = asn1Schema.AsnParser.parse(signature, core__namespace.asn1.EcDsaSignature);\n        const signatureRaw = core__namespace.EcUtils.encodeSignature(ecSignature, core__namespace.EcCurves.get(key.algorithm.namedCurve).size);\n        return signatureRaw.buffer;\n    }\n    static async verify(algorithm, key, signature, data) {\n        const cryptoAlg = ShaCrypto.getAlgorithmName(algorithm.hash);\n        const signer = crypto.createVerify(cryptoAlg);\n        signer.update(Buffer.from(data));\n        if (!key.pem) {\n            key.pem = `-----BEGIN PUBLIC KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PUBLIC KEY-----`;\n        }\n        const options = {\n            key: key.pem\n        };\n        const ecSignature = new core__namespace.asn1.EcDsaSignature();\n        const namedCurve = core__namespace.EcCurves.get(key.algorithm.namedCurve);\n        const signaturePoint = core__namespace.EcUtils.decodeSignature(signature, namedCurve.size);\n        ecSignature.r = pvtsutils.BufferSourceConverter.toArrayBuffer(signaturePoint.r);\n        ecSignature.s = pvtsutils.BufferSourceConverter.toArrayBuffer(signaturePoint.s);\n        const ecSignatureRaw = Buffer.from(asn1Schema.AsnSerializer.serialize(ecSignature));\n        const ok = signer.verify(options, ecSignatureRaw);\n        return ok;\n    }\n    static async deriveBits(algorithm, baseKey, length) {\n        const cryptoAlg = this.getOpenSSLNamedCurve(baseKey.algorithm.namedCurve);\n        const ecdh = crypto.createECDH(cryptoAlg);\n        const asnPrivateKey = asn1Schema.AsnParser.parse(baseKey.data, core__namespace.asn1.PrivateKeyInfo);\n        const asnEcPrivateKey = asn1Schema.AsnParser.parse(asnPrivateKey.privateKey, core__namespace.asn1.EcPrivateKey);\n        ecdh.setPrivateKey(Buffer.from(asnEcPrivateKey.privateKey));\n        const asnPublicKey = asn1Schema.AsnParser.parse(algorithm.public.data, core__namespace.asn1.PublicKeyInfo);\n        const bits = ecdh.computeSecret(Buffer.from(asnPublicKey.publicKey));\n        if (length === null) {\n            return bits;\n        }\n        return new Uint8Array(bits).buffer.slice(0, length >> 3);\n    }\n    static async exportKey(format, key) {\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                return jsonSchema.JsonSerializer.toJSON(key);\n            case \"pkcs8\":\n            case \"spki\":\n                return new Uint8Array(key.data).buffer;\n            case \"raw\":\n                {\n                    const publicKeyInfo = asn1Schema.AsnParser.parse(key.data, core__namespace.asn1.PublicKeyInfo);\n                    return publicKeyInfo.publicKey;\n                }\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk', 'raw', pkcs8' or 'spki'\");\n        }\n    }\n    static async importKey(format, keyData, algorithm, extractable, keyUsages) {\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                {\n                    const jwk = keyData;\n                    if (jwk.d) {\n                        const asnKey = jsonSchema.JsonParser.fromJSON(keyData, {\n                            targetSchema: core__namespace.asn1.EcPrivateKey\n                        });\n                        return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\n                    } else {\n                        const asnKey = jsonSchema.JsonParser.fromJSON(keyData, {\n                            targetSchema: core__namespace.asn1.EcPublicKey\n                        });\n                        return this.importPublicKey(asnKey, algorithm, extractable, keyUsages);\n                    }\n                }\n            case \"raw\":\n                {\n                    const asnKey = new core__namespace.asn1.EcPublicKey(keyData);\n                    return this.importPublicKey(asnKey, algorithm, extractable, keyUsages);\n                }\n            case \"spki\":\n                {\n                    const keyInfo = asn1Schema.AsnParser.parse(new Uint8Array(keyData), core__namespace.asn1.PublicKeyInfo);\n                    const asnKey = new core__namespace.asn1.EcPublicKey(keyInfo.publicKey);\n                    this.assertKeyParameters(keyInfo.publicKeyAlgorithm.parameters, algorithm.namedCurve);\n                    return this.importPublicKey(asnKey, algorithm, extractable, keyUsages);\n                }\n            case \"pkcs8\":\n                {\n                    const keyInfo = asn1Schema.AsnParser.parse(new Uint8Array(keyData), core__namespace.asn1.PrivateKeyInfo);\n                    const asnKey = asn1Schema.AsnParser.parse(keyInfo.privateKey, core__namespace.asn1.EcPrivateKey);\n                    this.assertKeyParameters(keyInfo.privateKeyAlgorithm.parameters, algorithm.namedCurve);\n                    return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\n                }\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk', 'raw', 'pkcs8' or 'spki'\");\n        }\n    }\n    static assertKeyParameters(parameters, namedCurve) {\n        if (!parameters) {\n            throw new core__namespace.CryptoError(\"Key info doesn't have required parameters\");\n        }\n        let namedCurveIdentifier = \"\";\n        try {\n            namedCurveIdentifier = asn1Schema.AsnParser.parse(parameters, core__namespace.asn1.ObjectIdentifier).value;\n        } catch (e) {\n            throw new core__namespace.CryptoError(\"Cannot read key info parameters\");\n        }\n        if (getOidByNamedCurve$1(namedCurve) !== namedCurveIdentifier) {\n            throw new core__namespace.CryptoError(\"Key info parameter doesn't match to named curve\");\n        }\n    }\n    static async importPrivateKey(asnKey, algorithm, extractable, keyUsages) {\n        const keyInfo = new core__namespace.asn1.PrivateKeyInfo();\n        keyInfo.privateKeyAlgorithm.algorithm = \"1.2.840.10045.2.1\";\n        keyInfo.privateKeyAlgorithm.parameters = asn1Schema.AsnSerializer.serialize(new core__namespace.asn1.ObjectIdentifier(getOidByNamedCurve$1(algorithm.namedCurve)));\n        keyInfo.privateKey = asn1Schema.AsnSerializer.serialize(asnKey);\n        const key = new EcPrivateKey();\n        key.data = Buffer.from(asn1Schema.AsnSerializer.serialize(keyInfo));\n        key.algorithm = Object.assign({}, algorithm);\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return key;\n    }\n    static async importPublicKey(asnKey, algorithm, extractable, keyUsages) {\n        const keyInfo = new core__namespace.asn1.PublicKeyInfo();\n        keyInfo.publicKeyAlgorithm.algorithm = \"1.2.840.10045.2.1\";\n        const namedCurve = getOidByNamedCurve$1(algorithm.namedCurve);\n        keyInfo.publicKeyAlgorithm.parameters = asn1Schema.AsnSerializer.serialize(new core__namespace.asn1.ObjectIdentifier(namedCurve));\n        keyInfo.publicKey = asnKey.value;\n        const key = new EcPublicKey();\n        key.data = Buffer.from(asn1Schema.AsnSerializer.serialize(keyInfo));\n        key.algorithm = Object.assign({}, algorithm);\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return key;\n    }\n    static getOpenSSLNamedCurve(curve) {\n        switch(curve.toUpperCase()){\n            case \"P-256\":\n                return \"prime256v1\";\n            case \"K-256\":\n                return \"secp256k1\";\n            case \"P-384\":\n                return \"secp384r1\";\n            case \"P-521\":\n                return \"secp521r1\";\n            default:\n                return curve;\n        }\n    }\n}\nEcCrypto.publicKeyUsages = [\n    \"verify\"\n];\nEcCrypto.privateKeyUsages = [\n    \"sign\",\n    \"deriveKey\",\n    \"deriveBits\"\n];\nclass EcdsaProvider extends core__namespace.EcdsaProvider {\n    constructor(){\n        super(...arguments);\n        this.namedCurves = core__namespace.EcCurves.names;\n        this.hashAlgorithms = [\n            \"SHA-1\",\n            \"SHA-256\",\n            \"SHA-384\",\n            \"SHA-512\",\n            \"shake128\",\n            \"shake256\",\n            \"SHA3-256\",\n            \"SHA3-384\",\n            \"SHA3-512\"\n        ];\n    }\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const keys = await EcCrypto.generateKey({\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return {\n            privateKey: setCryptoKey(keys.privateKey),\n            publicKey: setCryptoKey(keys.publicKey)\n        };\n    }\n    async onSign(algorithm, key, data) {\n        return EcCrypto.sign(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onVerify(algorithm, key, signature, data) {\n        return EcCrypto.verify(algorithm, getCryptoKey(key), new Uint8Array(signature), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return EcCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await EcCrypto.importKey(format, keyData, {\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        const internalKey = getCryptoKey(key);\n        if (!(internalKey instanceof EcPrivateKey || internalKey instanceof EcPublicKey)) {\n            throw new TypeError(\"key: Is not EC CryptoKey\");\n        }\n    }\n}\nclass EcdhProvider extends core__namespace.EcdhProvider {\n    constructor(){\n        super(...arguments);\n        this.namedCurves = core__namespace.EcCurves.names;\n    }\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const keys = await EcCrypto.generateKey({\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return {\n            privateKey: setCryptoKey(keys.privateKey),\n            publicKey: setCryptoKey(keys.publicKey)\n        };\n    }\n    async onExportKey(format, key) {\n        return EcCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await EcCrypto.importKey(format, keyData, {\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        const internalKey = getCryptoKey(key);\n        if (!(internalKey instanceof EcPrivateKey || internalKey instanceof EcPublicKey)) {\n            throw new TypeError(\"key: Is not EC CryptoKey\");\n        }\n    }\n    async onDeriveBits(algorithm, baseKey, length) {\n        const bits = await EcCrypto.deriveBits({\n            ...algorithm,\n            public: getCryptoKey(algorithm.public)\n        }, getCryptoKey(baseKey), length);\n        return bits;\n    }\n}\nconst edOIDs = {\n    [core__namespace.asn1.idEd448]: \"Ed448\",\n    \"ed448\": core__namespace.asn1.idEd448,\n    [core__namespace.asn1.idX448]: \"X448\",\n    \"x448\": core__namespace.asn1.idX448,\n    [core__namespace.asn1.idEd25519]: \"Ed25519\",\n    \"ed25519\": core__namespace.asn1.idEd25519,\n    [core__namespace.asn1.idX25519]: \"X25519\",\n    \"x25519\": core__namespace.asn1.idX25519\n};\nfunction getOidByNamedCurve(namedCurve) {\n    const oid = edOIDs[namedCurve.toLowerCase()];\n    if (!oid) {\n        throw new core__namespace.OperationError(`Cannot convert WebCrypto named curve '${namedCurve}' to OID`);\n    }\n    return oid;\n}\nclass EdPrivateKey extends AsymmetricKey {\n    constructor(){\n        super(...arguments);\n        this.type = \"private\";\n    }\n    getKey() {\n        const keyInfo = asn1Schema.AsnParser.parse(this.data, core__namespace.asn1.PrivateKeyInfo);\n        return asn1Schema.AsnParser.parse(keyInfo.privateKey, core__namespace.asn1.CurvePrivateKey);\n    }\n    toJSON() {\n        const key = this.getKey();\n        const json = {\n            kty: \"OKP\",\n            crv: this.algorithm.namedCurve,\n            key_ops: this.usages,\n            ext: this.extractable\n        };\n        return Object.assign(json, jsonSchema.JsonSerializer.toJSON(key));\n    }\n    fromJSON(json) {\n        if (!json.crv) {\n            throw new core__namespace.OperationError(`Cannot get named curve from JWK. Property 'crv' is required`);\n        }\n        const keyInfo = new core__namespace.asn1.PrivateKeyInfo();\n        keyInfo.privateKeyAlgorithm.algorithm = getOidByNamedCurve(json.crv);\n        const key = jsonSchema.JsonParser.fromJSON(json, {\n            targetSchema: core__namespace.asn1.CurvePrivateKey\n        });\n        keyInfo.privateKey = asn1Schema.AsnSerializer.serialize(key);\n        this.data = Buffer.from(asn1Schema.AsnSerializer.serialize(keyInfo));\n        return this;\n    }\n}\nclass EdPublicKey extends AsymmetricKey {\n    constructor(){\n        super(...arguments);\n        this.type = \"public\";\n    }\n    getKey() {\n        const keyInfo = asn1Schema.AsnParser.parse(this.data, core__namespace.asn1.PublicKeyInfo);\n        return keyInfo.publicKey;\n    }\n    toJSON() {\n        const key = this.getKey();\n        const json = {\n            kty: \"OKP\",\n            crv: this.algorithm.namedCurve,\n            key_ops: this.usages,\n            ext: this.extractable\n        };\n        return Object.assign(json, {\n            x: pvtsutils.Convert.ToBase64Url(key)\n        });\n    }\n    fromJSON(json) {\n        if (!json.crv) {\n            throw new core__namespace.OperationError(`Cannot get named curve from JWK. Property 'crv' is required`);\n        }\n        if (!json.x) {\n            throw new core__namespace.OperationError(`Cannot get property from JWK. Property 'x' is required`);\n        }\n        const keyInfo = new core__namespace.asn1.PublicKeyInfo();\n        keyInfo.publicKeyAlgorithm.algorithm = getOidByNamedCurve(json.crv);\n        keyInfo.publicKey = pvtsutils.Convert.FromBase64Url(json.x);\n        this.data = Buffer.from(asn1Schema.AsnSerializer.serialize(keyInfo));\n        return this;\n    }\n}\nclass EdCrypto {\n    static async generateKey(algorithm, extractable, keyUsages) {\n        const privateKey = new EdPrivateKey();\n        privateKey.algorithm = algorithm;\n        privateKey.extractable = extractable;\n        privateKey.usages = keyUsages.filter((usage)=>this.privateKeyUsages.indexOf(usage) !== -1);\n        const publicKey = new EdPublicKey();\n        publicKey.algorithm = algorithm;\n        publicKey.extractable = true;\n        publicKey.usages = keyUsages.filter((usage)=>this.publicKeyUsages.indexOf(usage) !== -1);\n        const type = algorithm.namedCurve.toLowerCase();\n        const keys = crypto.generateKeyPairSync(type, {\n            publicKeyEncoding: {\n                format: \"der\",\n                type: \"spki\"\n            },\n            privateKeyEncoding: {\n                format: \"der\",\n                type: \"pkcs8\"\n            }\n        });\n        privateKey.data = keys.privateKey;\n        publicKey.data = keys.publicKey;\n        const res = {\n            privateKey,\n            publicKey\n        };\n        return res;\n    }\n    static async sign(algorithm, key, data) {\n        if (!key.pem) {\n            key.pem = `-----BEGIN PRIVATE KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PRIVATE KEY-----`;\n        }\n        const options = {\n            key: key.pem\n        };\n        const signature = crypto.sign(null, Buffer.from(data), options);\n        return core__namespace.BufferSourceConverter.toArrayBuffer(signature);\n    }\n    static async verify(algorithm, key, signature, data) {\n        if (!key.pem) {\n            key.pem = `-----BEGIN PUBLIC KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PUBLIC KEY-----`;\n        }\n        const options = {\n            key: key.pem\n        };\n        const ok = crypto.verify(null, Buffer.from(data), options, Buffer.from(signature));\n        return ok;\n    }\n    static async deriveBits(algorithm, baseKey, length) {\n        const publicKey = crypto.createPublicKey({\n            key: algorithm.public.data,\n            format: \"der\",\n            type: \"spki\"\n        });\n        const privateKey = crypto.createPrivateKey({\n            key: baseKey.data,\n            format: \"der\",\n            type: \"pkcs8\"\n        });\n        const bits = crypto.diffieHellman({\n            publicKey,\n            privateKey\n        });\n        return new Uint8Array(bits).buffer.slice(0, length >> 3);\n    }\n    static async exportKey(format, key) {\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                return jsonSchema.JsonSerializer.toJSON(key);\n            case \"pkcs8\":\n            case \"spki\":\n                return new Uint8Array(key.data).buffer;\n            case \"raw\":\n                {\n                    const publicKeyInfo = asn1Schema.AsnParser.parse(key.data, core__namespace.asn1.PublicKeyInfo);\n                    return publicKeyInfo.publicKey;\n                }\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk', 'raw', pkcs8' or 'spki'\");\n        }\n    }\n    static async importKey(format, keyData, algorithm, extractable, keyUsages) {\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                {\n                    const jwk = keyData;\n                    if (jwk.d) {\n                        const asnKey = jsonSchema.JsonParser.fromJSON(keyData, {\n                            targetSchema: core__namespace.asn1.CurvePrivateKey\n                        });\n                        return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\n                    } else {\n                        if (!jwk.x) {\n                            throw new TypeError(\"keyData: Cannot get required 'x' filed\");\n                        }\n                        return this.importPublicKey(pvtsutils.Convert.FromBase64Url(jwk.x), algorithm, extractable, keyUsages);\n                    }\n                }\n            case \"raw\":\n                {\n                    return this.importPublicKey(keyData, algorithm, extractable, keyUsages);\n                }\n            case \"spki\":\n                {\n                    const keyInfo = asn1Schema.AsnParser.parse(new Uint8Array(keyData), core__namespace.asn1.PublicKeyInfo);\n                    return this.importPublicKey(keyInfo.publicKey, algorithm, extractable, keyUsages);\n                }\n            case \"pkcs8\":\n                {\n                    const keyInfo = asn1Schema.AsnParser.parse(new Uint8Array(keyData), core__namespace.asn1.PrivateKeyInfo);\n                    const asnKey = asn1Schema.AsnParser.parse(keyInfo.privateKey, core__namespace.asn1.CurvePrivateKey);\n                    return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\n                }\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk', 'raw', 'pkcs8' or 'spki'\");\n        }\n    }\n    static importPrivateKey(asnKey, algorithm, extractable, keyUsages) {\n        const key = new EdPrivateKey();\n        key.fromJSON({\n            crv: algorithm.namedCurve,\n            d: pvtsutils.Convert.ToBase64Url(asnKey.d)\n        });\n        key.algorithm = Object.assign({}, algorithm);\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return key;\n    }\n    static async importPublicKey(asnKey, algorithm, extractable, keyUsages) {\n        const key = new EdPublicKey();\n        key.fromJSON({\n            crv: algorithm.namedCurve,\n            x: pvtsutils.Convert.ToBase64Url(asnKey)\n        });\n        key.algorithm = Object.assign({}, algorithm);\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return key;\n    }\n}\nEdCrypto.publicKeyUsages = [\n    \"verify\"\n];\nEdCrypto.privateKeyUsages = [\n    \"sign\",\n    \"deriveKey\",\n    \"deriveBits\"\n];\nclass EdDsaProvider extends core__namespace.EdDsaProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const keys = await EdCrypto.generateKey({\n            name: this.name,\n            namedCurve: algorithm.namedCurve.replace(/^ed/i, \"Ed\")\n        }, extractable, keyUsages);\n        return {\n            privateKey: setCryptoKey(keys.privateKey),\n            publicKey: setCryptoKey(keys.publicKey)\n        };\n    }\n    async onSign(algorithm, key, data) {\n        return EdCrypto.sign(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onVerify(algorithm, key, signature, data) {\n        return EdCrypto.verify(algorithm, getCryptoKey(key), new Uint8Array(signature), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return EdCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await EdCrypto.importKey(format, keyData, {\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n}\nclass EcdhEsProvider extends core__namespace.EcdhEsProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const keys = await EdCrypto.generateKey({\n            name: this.name,\n            namedCurve: algorithm.namedCurve.toUpperCase()\n        }, extractable, keyUsages);\n        return {\n            privateKey: setCryptoKey(keys.privateKey),\n            publicKey: setCryptoKey(keys.publicKey)\n        };\n    }\n    async onDeriveBits(algorithm, baseKey, length) {\n        const bits = await EdCrypto.deriveBits({\n            ...algorithm,\n            public: getCryptoKey(algorithm.public)\n        }, getCryptoKey(baseKey), length);\n        return bits;\n    }\n    async onExportKey(format, key) {\n        return EdCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await EdCrypto.importKey(format, keyData, {\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n}\nclass PbkdfCryptoKey extends CryptoKey {\n}\nclass Pbkdf2Provider extends core__namespace.Pbkdf2Provider {\n    async onDeriveBits(algorithm, baseKey, length) {\n        return new Promise((resolve, reject)=>{\n            const salt = core__namespace.BufferSourceConverter.toArrayBuffer(algorithm.salt);\n            const hash = algorithm.hash.name.replace(\"-\", \"\");\n            crypto.pbkdf2(getCryptoKey(baseKey).data, Buffer.from(salt), algorithm.iterations, length >> 3, hash, (err, derivedBits)=>{\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(new Uint8Array(derivedBits).buffer);\n                }\n            });\n        });\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        if (format === \"raw\") {\n            const key = new PbkdfCryptoKey();\n            key.data = Buffer.from(keyData);\n            key.algorithm = {\n                name: this.name\n            };\n            key.extractable = false;\n            key.usages = keyUsages;\n            return setCryptoKey(key);\n        }\n        throw new core__namespace.OperationError(\"format: Must be 'raw'\");\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof PbkdfCryptoKey)) {\n            throw new TypeError(\"key: Is not PBKDF CryptoKey\");\n        }\n    }\n}\nclass HmacCryptoKey extends CryptoKey {\n    get alg() {\n        const hash = this.algorithm.hash.name.toUpperCase();\n        return `HS${hash.replace(\"SHA-\", \"\")}`;\n    }\n    set alg(value) {}\n}\ntslib.__decorate([\n    jsonSchema.JsonProp({\n        name: \"k\",\n        converter: JsonBase64UrlConverter\n    })\n], HmacCryptoKey.prototype, \"data\", void 0);\nclass HmacProvider extends core__namespace.HmacProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const length = (algorithm.length || this.getDefaultLength(algorithm.hash.name)) >> 3 << 3;\n        const key = new HmacCryptoKey();\n        key.algorithm = {\n            ...algorithm,\n            length,\n            name: this.name\n        };\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        key.data = crypto.randomBytes(length >> 3);\n        return setCryptoKey(key);\n    }\n    async onSign(algorithm, key, data) {\n        const cryptoAlg = ShaCrypto.getAlgorithmName(key.algorithm.hash);\n        const hmac = crypto.createHmac(cryptoAlg, getCryptoKey(key).data).update(Buffer.from(data)).digest();\n        return new Uint8Array(hmac).buffer;\n    }\n    async onVerify(algorithm, key, signature, data) {\n        const cryptoAlg = ShaCrypto.getAlgorithmName(key.algorithm.hash);\n        const hmac = crypto.createHmac(cryptoAlg, getCryptoKey(key).data).update(Buffer.from(data)).digest();\n        return hmac.compare(Buffer.from(signature)) === 0;\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        let key;\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                key = jsonSchema.JsonParser.fromJSON(keyData, {\n                    targetSchema: HmacCryptoKey\n                });\n                break;\n            case \"raw\":\n                key = new HmacCryptoKey();\n                key.data = Buffer.from(keyData);\n                break;\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk' or 'raw'\");\n        }\n        key.algorithm = {\n            hash: {\n                name: algorithm.hash.name\n            },\n            name: this.name,\n            length: key.data.length << 3\n        };\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return setCryptoKey(key);\n    }\n    async onExportKey(format, key) {\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                return jsonSchema.JsonSerializer.toJSON(getCryptoKey(key));\n            case \"raw\":\n                return new Uint8Array(getCryptoKey(key).data).buffer;\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk' or 'raw'\");\n        }\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof HmacCryptoKey)) {\n            throw new TypeError(\"key: Is not HMAC CryptoKey\");\n        }\n    }\n}\nclass HkdfCryptoKey extends CryptoKey {\n}\nclass HkdfProvider extends core__namespace.HkdfProvider {\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        if (format.toLowerCase() !== \"raw\") {\n            throw new core__namespace.OperationError(\"Operation not supported\");\n        }\n        const key = new HkdfCryptoKey();\n        key.data = Buffer.from(keyData);\n        key.algorithm = {\n            name: this.name\n        };\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return setCryptoKey(key);\n    }\n    async onDeriveBits(params, baseKey, length) {\n        const hash = params.hash.name.replace(\"-\", \"\");\n        const hashLength = crypto.createHash(hash).digest().length;\n        const byteLength = length / 8;\n        const info = core.BufferSourceConverter.toUint8Array(params.info);\n        const PRK = crypto.createHmac(hash, core.BufferSourceConverter.toUint8Array(params.salt)).update(core.BufferSourceConverter.toUint8Array(getCryptoKey(baseKey).data)).digest();\n        const blocks = [\n            Buffer.alloc(0)\n        ];\n        const blockCount = Math.ceil(byteLength / hashLength) + 1;\n        for(let i = 1; i < blockCount; ++i){\n            blocks.push(crypto.createHmac(hash, PRK).update(Buffer.concat([\n                blocks[i - 1],\n                info,\n                Buffer.from([\n                    i\n                ])\n            ])).digest());\n        }\n        return Buffer.concat(blocks).slice(0, byteLength);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof HkdfCryptoKey)) {\n            throw new TypeError(\"key: Is not HKDF CryptoKey\");\n        }\n    }\n}\nclass ShakeCrypto {\n    static digest(algorithm, data) {\n        const hash = crypto.createHash(algorithm.name.toLowerCase(), {\n            outputLength: algorithm.length\n        }).update(Buffer.from(data)).digest();\n        return new Uint8Array(hash).buffer;\n    }\n}\nclass Shake128Provider extends core__namespace.Shake128Provider {\n    async onDigest(algorithm, data) {\n        return ShakeCrypto.digest(algorithm, data);\n    }\n}\nclass Shake256Provider extends core__namespace.Shake256Provider {\n    async onDigest(algorithm, data) {\n        return ShakeCrypto.digest(algorithm, data);\n    }\n}\nclass SubtleCrypto extends core__namespace.SubtleCrypto {\n    constructor(){\n        var _a;\n        super();\n        this.providers.set(new AesCbcProvider());\n        this.providers.set(new AesCtrProvider());\n        this.providers.set(new AesGcmProvider());\n        this.providers.set(new AesCmacProvider());\n        this.providers.set(new AesKwProvider());\n        this.providers.set(new AesEcbProvider());\n        this.providers.set(new DesCbcProvider());\n        this.providers.set(new DesEde3CbcProvider());\n        this.providers.set(new RsaSsaProvider());\n        this.providers.set(new RsaPssProvider());\n        this.providers.set(new RsaOaepProvider());\n        this.providers.set(new RsaEsProvider());\n        this.providers.set(new EcdsaProvider());\n        this.providers.set(new EcdhProvider());\n        this.providers.set(new Sha1Provider());\n        this.providers.set(new Sha256Provider());\n        this.providers.set(new Sha384Provider());\n        this.providers.set(new Sha512Provider());\n        this.providers.set(new Pbkdf2Provider());\n        this.providers.set(new HmacProvider());\n        this.providers.set(new HkdfProvider());\n        const nodeMajorVersion = (_a = /^v(\\d+)/.exec(process__namespace.version)) === null || _a === void 0 ? void 0 : _a[1];\n        if (nodeMajorVersion && parseInt(nodeMajorVersion, 10) >= 12) {\n            this.providers.set(new Shake128Provider());\n            this.providers.set(new Shake256Provider());\n        }\n        const hashes = crypto__namespace.getHashes();\n        if (hashes.includes(\"sha3-256\")) {\n            this.providers.set(new Sha3256Provider());\n        }\n        if (hashes.includes(\"sha3-384\")) {\n            this.providers.set(new Sha3384Provider());\n        }\n        if (hashes.includes(\"sha3-512\")) {\n            this.providers.set(new Sha3512Provider());\n        }\n        if (nodeMajorVersion && parseInt(nodeMajorVersion, 10) >= 14) {\n            this.providers.set(new EdDsaProvider());\n            this.providers.set(new EcdhEsProvider());\n        }\n    }\n}\nclass Crypto extends core__namespace.Crypto {\n    constructor(){\n        super(...arguments);\n        this.subtle = new SubtleCrypto();\n    }\n    getRandomValues(array) {\n        if (!ArrayBuffer.isView(array)) {\n            throw new TypeError(\"Failed to execute 'getRandomValues' on 'Crypto': parameter 1 is not of type 'ArrayBufferView'\");\n        }\n        const buffer = Buffer.from(array.buffer, array.byteOffset, array.byteLength);\n        crypto.randomFillSync(buffer);\n        return array;\n    }\n}\nObject.defineProperty(exports, \"CryptoKey\", ({\n    enumerable: true,\n    get: function() {\n        return core.CryptoKey;\n    }\n}));\nexports.Crypto = Crypto;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@peculiar/webcrypto/build/webcrypto.js\n");

/***/ })

};
;